/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package lwjake2.game.monsters

import lwjake2.Defines
import lwjake2.Globals
import lwjake2.game.EntDieAdapter
import lwjake2.game.EntInteractAdapter
import lwjake2.game.EntPainAdapter
import lwjake2.game.EntThinkAdapter
import lwjake2.game.GameAI
import lwjake2.game.GameBase
import lwjake2.game.GameCombat
import lwjake2.game.GameMisc
import lwjake2.game.GameUtil
import lwjake2.game.GameWeapon
import lwjake2.game.Monster
import lwjake2.game.edict_t
import lwjake2.game.mframe_t
import lwjake2.game.mmove_t
import lwjake2.game.monsters.M_Flash
import lwjake2.util.Lib
import lwjake2.util.Math3D

public class M_Float {
    companion object {

        //	This file generated by ModelGen - Do NOT Modify

        public val FRAME_actvat01: Int = 0

        public val FRAME_actvat02: Int = 1

        public val FRAME_actvat03: Int = 2

        public val FRAME_actvat04: Int = 3

        public val FRAME_actvat05: Int = 4

        public val FRAME_actvat06: Int = 5

        public val FRAME_actvat07: Int = 6

        public val FRAME_actvat08: Int = 7

        public val FRAME_actvat09: Int = 8

        public val FRAME_actvat10: Int = 9

        public val FRAME_actvat11: Int = 10

        public val FRAME_actvat12: Int = 11

        public val FRAME_actvat13: Int = 12

        public val FRAME_actvat14: Int = 13

        public val FRAME_actvat15: Int = 14

        public val FRAME_actvat16: Int = 15

        public val FRAME_actvat17: Int = 16

        public val FRAME_actvat18: Int = 17

        public val FRAME_actvat19: Int = 18

        public val FRAME_actvat20: Int = 19

        public val FRAME_actvat21: Int = 20

        public val FRAME_actvat22: Int = 21

        public val FRAME_actvat23: Int = 22

        public val FRAME_actvat24: Int = 23

        public val FRAME_actvat25: Int = 24

        public val FRAME_actvat26: Int = 25

        public val FRAME_actvat27: Int = 26

        public val FRAME_actvat28: Int = 27

        public val FRAME_actvat29: Int = 28

        public val FRAME_actvat30: Int = 29

        public val FRAME_actvat31: Int = 30

        public val FRAME_attak101: Int = 31

        public val FRAME_attak102: Int = 32

        public val FRAME_attak103: Int = 33

        public val FRAME_attak104: Int = 34

        public val FRAME_attak105: Int = 35

        public val FRAME_attak106: Int = 36

        public val FRAME_attak107: Int = 37

        public val FRAME_attak108: Int = 38

        public val FRAME_attak109: Int = 39

        public val FRAME_attak110: Int = 40

        public val FRAME_attak111: Int = 41

        public val FRAME_attak112: Int = 42

        public val FRAME_attak113: Int = 43

        public val FRAME_attak114: Int = 44

        public val FRAME_attak201: Int = 45

        public val FRAME_attak202: Int = 46

        public val FRAME_attak203: Int = 47

        public val FRAME_attak204: Int = 48

        public val FRAME_attak205: Int = 49

        public val FRAME_attak206: Int = 50

        public val FRAME_attak207: Int = 51

        public val FRAME_attak208: Int = 52

        public val FRAME_attak209: Int = 53

        public val FRAME_attak210: Int = 54

        public val FRAME_attak211: Int = 55

        public val FRAME_attak212: Int = 56

        public val FRAME_attak213: Int = 57

        public val FRAME_attak214: Int = 58

        public val FRAME_attak215: Int = 59

        public val FRAME_attak216: Int = 60

        public val FRAME_attak217: Int = 61

        public val FRAME_attak218: Int = 62

        public val FRAME_attak219: Int = 63

        public val FRAME_attak220: Int = 64

        public val FRAME_attak221: Int = 65

        public val FRAME_attak222: Int = 66

        public val FRAME_attak223: Int = 67

        public val FRAME_attak224: Int = 68

        public val FRAME_attak225: Int = 69

        public val FRAME_attak301: Int = 70

        public val FRAME_attak302: Int = 71

        public val FRAME_attak303: Int = 72

        public val FRAME_attak304: Int = 73

        public val FRAME_attak305: Int = 74

        public val FRAME_attak306: Int = 75

        public val FRAME_attak307: Int = 76

        public val FRAME_attak308: Int = 77

        public val FRAME_attak309: Int = 78

        public val FRAME_attak310: Int = 79

        public val FRAME_attak311: Int = 80

        public val FRAME_attak312: Int = 81

        public val FRAME_attak313: Int = 82

        public val FRAME_attak314: Int = 83

        public val FRAME_attak315: Int = 84

        public val FRAME_attak316: Int = 85

        public val FRAME_attak317: Int = 86

        public val FRAME_attak318: Int = 87

        public val FRAME_attak319: Int = 88

        public val FRAME_attak320: Int = 89

        public val FRAME_attak321: Int = 90

        public val FRAME_attak322: Int = 91

        public val FRAME_attak323: Int = 92

        public val FRAME_attak324: Int = 93

        public val FRAME_attak325: Int = 94

        public val FRAME_attak326: Int = 95

        public val FRAME_attak327: Int = 96

        public val FRAME_attak328: Int = 97

        public val FRAME_attak329: Int = 98

        public val FRAME_attak330: Int = 99

        public val FRAME_attak331: Int = 100

        public val FRAME_attak332: Int = 101

        public val FRAME_attak333: Int = 102

        public val FRAME_attak334: Int = 103

        public val FRAME_death01: Int = 104

        public val FRAME_death02: Int = 105

        public val FRAME_death03: Int = 106

        public val FRAME_death04: Int = 107

        public val FRAME_death05: Int = 108

        public val FRAME_death06: Int = 109

        public val FRAME_death07: Int = 110

        public val FRAME_death08: Int = 111

        public val FRAME_death09: Int = 112

        public val FRAME_death10: Int = 113

        public val FRAME_death11: Int = 114

        public val FRAME_death12: Int = 115

        public val FRAME_death13: Int = 116

        public val FRAME_pain101: Int = 117

        public val FRAME_pain102: Int = 118

        public val FRAME_pain103: Int = 119

        public val FRAME_pain104: Int = 120

        public val FRAME_pain105: Int = 121

        public val FRAME_pain106: Int = 122

        public val FRAME_pain107: Int = 123

        public val FRAME_pain201: Int = 124

        public val FRAME_pain202: Int = 125

        public val FRAME_pain203: Int = 126

        public val FRAME_pain204: Int = 127

        public val FRAME_pain205: Int = 128

        public val FRAME_pain206: Int = 129

        public val FRAME_pain207: Int = 130

        public val FRAME_pain208: Int = 131

        public val FRAME_pain301: Int = 132

        public val FRAME_pain302: Int = 133

        public val FRAME_pain303: Int = 134

        public val FRAME_pain304: Int = 135

        public val FRAME_pain305: Int = 136

        public val FRAME_pain306: Int = 137

        public val FRAME_pain307: Int = 138

        public val FRAME_pain308: Int = 139

        public val FRAME_pain309: Int = 140

        public val FRAME_pain310: Int = 141

        public val FRAME_pain311: Int = 142

        public val FRAME_pain312: Int = 143

        public val FRAME_stand101: Int = 144

        public val FRAME_stand102: Int = 145

        public val FRAME_stand103: Int = 146

        public val FRAME_stand104: Int = 147

        public val FRAME_stand105: Int = 148

        public val FRAME_stand106: Int = 149

        public val FRAME_stand107: Int = 150

        public val FRAME_stand108: Int = 151

        public val FRAME_stand109: Int = 152

        public val FRAME_stand110: Int = 153

        public val FRAME_stand111: Int = 154

        public val FRAME_stand112: Int = 155

        public val FRAME_stand113: Int = 156

        public val FRAME_stand114: Int = 157

        public val FRAME_stand115: Int = 158

        public val FRAME_stand116: Int = 159

        public val FRAME_stand117: Int = 160

        public val FRAME_stand118: Int = 161

        public val FRAME_stand119: Int = 162

        public val FRAME_stand120: Int = 163

        public val FRAME_stand121: Int = 164

        public val FRAME_stand122: Int = 165

        public val FRAME_stand123: Int = 166

        public val FRAME_stand124: Int = 167

        public val FRAME_stand125: Int = 168

        public val FRAME_stand126: Int = 169

        public val FRAME_stand127: Int = 170

        public val FRAME_stand128: Int = 171

        public val FRAME_stand129: Int = 172

        public val FRAME_stand130: Int = 173

        public val FRAME_stand131: Int = 174

        public val FRAME_stand132: Int = 175

        public val FRAME_stand133: Int = 176

        public val FRAME_stand134: Int = 177

        public val FRAME_stand135: Int = 178

        public val FRAME_stand136: Int = 179

        public val FRAME_stand137: Int = 180

        public val FRAME_stand138: Int = 181

        public val FRAME_stand139: Int = 182

        public val FRAME_stand140: Int = 183

        public val FRAME_stand141: Int = 184

        public val FRAME_stand142: Int = 185

        public val FRAME_stand143: Int = 186

        public val FRAME_stand144: Int = 187

        public val FRAME_stand145: Int = 188

        public val FRAME_stand146: Int = 189

        public val FRAME_stand147: Int = 190

        public val FRAME_stand148: Int = 191

        public val FRAME_stand149: Int = 192

        public val FRAME_stand150: Int = 193

        public val FRAME_stand151: Int = 194

        public val FRAME_stand152: Int = 195

        public val FRAME_stand201: Int = 196

        public val FRAME_stand202: Int = 197

        public val FRAME_stand203: Int = 198

        public val FRAME_stand204: Int = 199

        public val FRAME_stand205: Int = 200

        public val FRAME_stand206: Int = 201

        public val FRAME_stand207: Int = 202

        public val FRAME_stand208: Int = 203

        public val FRAME_stand209: Int = 204

        public val FRAME_stand210: Int = 205

        public val FRAME_stand211: Int = 206

        public val FRAME_stand212: Int = 207

        public val FRAME_stand213: Int = 208

        public val FRAME_stand214: Int = 209

        public val FRAME_stand215: Int = 210

        public val FRAME_stand216: Int = 211

        public val FRAME_stand217: Int = 212

        public val FRAME_stand218: Int = 213

        public val FRAME_stand219: Int = 214

        public val FRAME_stand220: Int = 215

        public val FRAME_stand221: Int = 216

        public val FRAME_stand222: Int = 217

        public val FRAME_stand223: Int = 218

        public val FRAME_stand224: Int = 219

        public val FRAME_stand225: Int = 220

        public val FRAME_stand226: Int = 221

        public val FRAME_stand227: Int = 222

        public val FRAME_stand228: Int = 223

        public val FRAME_stand229: Int = 224

        public val FRAME_stand230: Int = 225

        public val FRAME_stand231: Int = 226

        public val FRAME_stand232: Int = 227

        public val FRAME_stand233: Int = 228

        public val FRAME_stand234: Int = 229

        public val FRAME_stand235: Int = 230

        public val FRAME_stand236: Int = 231

        public val FRAME_stand237: Int = 232

        public val FRAME_stand238: Int = 233

        public val FRAME_stand239: Int = 234

        public val FRAME_stand240: Int = 235

        public val FRAME_stand241: Int = 236

        public val FRAME_stand242: Int = 237

        public val FRAME_stand243: Int = 238

        public val FRAME_stand244: Int = 239

        public val FRAME_stand245: Int = 240

        public val FRAME_stand246: Int = 241

        public val FRAME_stand247: Int = 242

        public val FRAME_stand248: Int = 243

        public val FRAME_stand249: Int = 244

        public val FRAME_stand250: Int = 245

        public val FRAME_stand251: Int = 246

        public val FRAME_stand252: Int = 247

        public val MODEL_SCALE: Float = 1.000000.toFloat()

        var sound_attack2: Int = 0

        var sound_attack3: Int = 0

        var sound_death1: Int = 0

        var sound_idle: Int = 0

        var sound_pain1: Int = 0

        var sound_pain2: Int = 0

        var sound_sight: Int = 0

        var floater_sight: EntInteractAdapter = object : EntInteractAdapter() {
            public fun getID(): String {
                return "floater_sight"
            }

            public fun interact(self: edict_t, other: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_sight, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var floater_idle: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "floater_idle"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_idle, 1, Defines.ATTN_IDLE, 0)
                return true
            }
        }

        var floater_fire_blaster: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "floater_fire_blaster"
            }

            public fun think(self: edict_t): Boolean {
                val start = floatArray(0.0, 0.0, 0.0)
                val forward = floatArray(0.0, 0.0, 0.0)
                val right = floatArray(0.0, 0.0, 0.0)
                val end = floatArray(0.0, 0.0, 0.0)
                val dir = floatArray(0.0, 0.0, 0.0)
                val effect: Int

                if ((self.s.frame == FRAME_attak104) || (self.s.frame == FRAME_attak107))
                    effect = Defines.EF_HYPERBLASTER
                else
                    effect = 0
                Math3D.AngleVectors(self.s.angles, forward, right, null)
                Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[Defines.MZ2_FLOAT_BLASTER_1], forward, right, start)

                Math3D.VectorCopy(self.enemy.s.origin, end)
                end[2] += self.enemy.viewheight
                Math3D.VectorSubtract(end, start, dir)

                Monster.monster_fire_blaster(self, start, dir, 1, 1000, Defines.MZ2_FLOAT_BLASTER_1, effect)

                return true
            }
        }

        var floater_frames_stand1 = array<mframe_t>(mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null))

        var floater_move_stand1 = mmove_t(FRAME_stand101, FRAME_stand152, floater_frames_stand1, null)

        var floater_frames_stand2 = array<mframe_t>(mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null))

        var floater_move_stand2 = mmove_t(FRAME_stand201, FRAME_stand252, floater_frames_stand2, null)

        var floater_stand: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "floater_stand"
            }

            public fun think(self: edict_t): Boolean {
                if (Lib.random() <= 0.5)
                    self.monsterinfo.currentmove = floater_move_stand1
                else
                    self.monsterinfo.currentmove = floater_move_stand2
                return true
            }
        }

        var floater_frames_activate = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var floater_move_activate = mmove_t(FRAME_actvat01, FRAME_actvat31, floater_frames_activate, null)

        var floater_run: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "floater_run"
            }

            public fun think(self: edict_t): Boolean {

                if ((self.monsterinfo.aiflags and Defines.AI_STAND_GROUND) != 0)
                    self.monsterinfo.currentmove = floater_move_stand1
                else
                    self.monsterinfo.currentmove = floater_move_run

                return true
            }
        }

        var floater_frames_attack1 = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), // Blaster attack)
                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, floater_fire_blaster), // BOOM (0, -25.8, 32.5) -- LOOP Starts
                mframe_t(GameAI.ai_charge, 0, floater_fire_blaster), mframe_t(GameAI.ai_charge, 0, floater_fire_blaster), mframe_t(GameAI.ai_charge, 0, floater_fire_blaster), mframe_t(GameAI.ai_charge, 0, floater_fire_blaster), mframe_t(GameAI.ai_charge, 0, floater_fire_blaster), mframe_t(GameAI.ai_charge, 0, floater_fire_blaster), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null))// -- LOOP Ends

        var floater_move_attack1 = mmove_t(FRAME_attak101, FRAME_attak114, floater_frames_attack1, floater_run)

        var aim = floatArray(Defines.MELEE_DISTANCE.toFloat(), 0.0, 0.0)

        var floater_wham: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "floater_wham"
            }

            public fun think(self: edict_t): Boolean {

                GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_attack3, 1, Defines.ATTN_NORM, 0)
                GameWeapon.fire_hit(self, aim, 5 + Lib.rand() % 6, -50)
                return true
            }
        }

        var floater_frames_attack2 = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), // Claws
                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, floater_wham), // WHAM (0, -45, 29.6) -- LOOP Starts
                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), //							-- LOOP Ends
                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null))

        var floater_move_attack2 = mmove_t(FRAME_attak201, FRAME_attak225, floater_frames_attack2, floater_run)

        var floater_zap: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "floater_zap"
            }

            public fun think(self: edict_t): Boolean {
                val forward = floatArray(0.0, 0.0, 0.0)
                val right = floatArray(0.0, 0.0, 0.0)
                val origin = floatArray(0.0, 0.0, 0.0)
                val dir = floatArray(0.0, 0.0, 0.0)
                val offset = floatArray(0.0, 0.0, 0.0)

                Math3D.VectorSubtract(self.enemy.s.origin, self.s.origin, dir)

                Math3D.AngleVectors(self.s.angles, forward, right, null)
                //FIXME use a flash and replace these two lines with the commented
                // one
                Math3D.VectorSet(offset, 18.5.toFloat(), -0.9.toFloat(), 10.toFloat())
                Math3D.G_ProjectSource(self.s.origin, offset, forward, right, origin)
                //		G_ProjectSource (self.s.origin,
                // monster_flash_offset[flash_number], forward, right, origin);

                GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_attack2, 1, Defines.ATTN_NORM, 0)

                //FIXME use the flash, Luke
                GameBase.gi.WriteByte(Defines.svc_temp_entity)
                GameBase.gi.WriteByte(Defines.TE_SPLASH)
                GameBase.gi.WriteByte(32)
                GameBase.gi.WritePosition(origin)
                GameBase.gi.WriteDir(dir)
                GameBase.gi.WriteByte(1) //sparks
                GameBase.gi.multicast(origin, Defines.MULTICAST_PVS)

                GameCombat.T_Damage(self.enemy, self, self, dir, self.enemy.s.origin, Globals.vec3_origin, 5 + Lib.rand() % 6, -10, Defines.DAMAGE_ENERGY, Defines.MOD_UNKNOWN)
                return true
            }
        }

        var floater_frames_attack3 = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, floater_zap), //								-- LOOP Starts
                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), //								-- LOOP Ends
                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null))

        var floater_move_attack3 = mmove_t(FRAME_attak301, FRAME_attak334, floater_frames_attack3, floater_run)

        var floater_frames_death = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var floater_dead: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "floater_dead"
            }

            public fun think(self: edict_t): Boolean {
                Math3D.VectorSet(self.mins, -16, -16, -24)
                Math3D.VectorSet(self.maxs, 16, 16, -8)
                self.movetype = Defines.MOVETYPE_TOSS
                self.svflags = self.svflags or Defines.SVF_DEADMONSTER
                self.nextthink = 0
                GameBase.gi.linkentity(self)
                return true
            }
        }

        var floater_move_death = mmove_t(FRAME_death01, FRAME_death13, floater_frames_death, floater_dead)

        var floater_frames_pain1 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var floater_move_pain1 = mmove_t(FRAME_pain101, FRAME_pain107, floater_frames_pain1, floater_run)

        var floater_frames_pain2 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var floater_move_pain2 = mmove_t(FRAME_pain201, FRAME_pain208, floater_frames_pain2, floater_run)

        var floater_frames_pain3 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var floater_move_pain3 = mmove_t(FRAME_pain301, FRAME_pain312, floater_frames_pain3, floater_run)

        var floater_frames_walk = array<mframe_t>(mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null))

        var floater_move_walk = mmove_t(FRAME_stand101, FRAME_stand152, floater_frames_walk, null)

        var floater_frames_run = array<mframe_t>(mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 13, null))

        var floater_move_run = mmove_t(FRAME_stand101, FRAME_stand152, floater_frames_run, null)

        var floater_walk: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "floater_walk"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = floater_move_walk
                return true
            }
        }

        var floater_attack: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "floater_attack"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = floater_move_attack1
                return true
            }
        }

        var floater_melee: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "floater_melee"
            }

            public fun think(self: edict_t): Boolean {

                if (Lib.random() < 0.5)
                    self.monsterinfo.currentmove = floater_move_attack3
                else
                    self.monsterinfo.currentmove = floater_move_attack2
                return true
            }
        }

        var floater_pain: EntPainAdapter = object : EntPainAdapter() {
            public fun getID(): String {
                return "floater_pain"
            }

            public fun pain(self: edict_t, other: edict_t, kick: Float, damage: Int) {
                val n: Int

                if (self.health < (self.max_health / 2))
                    self.s.skinnum = 1

                if (GameBase.level.time < self.pain_debounce_time)
                    return

                self.pain_debounce_time = GameBase.level.time + 3
                if (GameBase.skill.value == 3)
                    return  // no pain anims in nightmare

                n = (Lib.rand() + 1) % 3
                if (n == 0) {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain1, 1, Defines.ATTN_NORM, 0)
                    self.monsterinfo.currentmove = floater_move_pain1
                } else {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain2, 1, Defines.ATTN_NORM, 0)
                    self.monsterinfo.currentmove = floater_move_pain2
                }
                return
            }
        }

        var floater_die: EntDieAdapter = object : EntDieAdapter() {
            public fun getID(): String {
                return "floater_die"
            }

            public fun die(self: edict_t, inflictor: edict_t, attacker: edict_t, damage: Int, point: FloatArray) {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_death1, 1, Defines.ATTN_NORM, 0)
                GameMisc.BecomeExplosion1(self)

            }
        }

        /*
     * QUAKED monster_floater (1 .5 0) (-16 -16 -24) (16 16 32) Ambush
     * Trigger_Spawn Sight
     */
        public fun SP_monster_floater(self: edict_t) {
            if (GameBase.deathmatch.value != 0) {
                GameUtil.G_FreeEdict(self)
                return
            }

            sound_attack2 = GameBase.gi.soundindex("floater/fltatck2.wav")
            sound_attack3 = GameBase.gi.soundindex("floater/fltatck3.wav")
            sound_death1 = GameBase.gi.soundindex("floater/fltdeth1.wav")
            sound_idle = GameBase.gi.soundindex("floater/fltidle1.wav")
            sound_pain1 = GameBase.gi.soundindex("floater/fltpain1.wav")
            sound_pain2 = GameBase.gi.soundindex("floater/fltpain2.wav")
            sound_sight = GameBase.gi.soundindex("floater/fltsght1.wav")

            GameBase.gi.soundindex("floater/fltatck1.wav")

            self.s.sound = GameBase.gi.soundindex("floater/fltsrch1.wav")

            self.movetype = Defines.MOVETYPE_STEP
            self.solid = Defines.SOLID_BBOX
            self.s.modelindex = GameBase.gi.modelindex("models/monsters/float/tris.md2")
            Math3D.VectorSet(self.mins, -24, -24, -24)
            Math3D.VectorSet(self.maxs, 24, 24, 32)

            self.health = 200
            self.gib_health = -80
            self.mass = 300

            self.pain = floater_pain
            self.die = floater_die

            self.monsterinfo.stand = floater_stand
            self.monsterinfo.walk = floater_walk
            self.monsterinfo.run = floater_run
            //		self.monsterinfo.dodge = floater_dodge;
            self.monsterinfo.attack = floater_attack
            self.monsterinfo.melee = floater_melee
            self.monsterinfo.sight = floater_sight
            self.monsterinfo.idle = floater_idle

            GameBase.gi.linkentity(self)

            if (Lib.random() <= 0.5)
                self.monsterinfo.currentmove = floater_move_stand1
            else
                self.monsterinfo.currentmove = floater_move_stand2

            self.monsterinfo.scale = MODEL_SCALE

            GameAI.flymonster_start.think(self)
        }
    }
}