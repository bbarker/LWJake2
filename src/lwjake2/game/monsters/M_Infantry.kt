/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package lwjake2.game.monsters

import lwjake2.Defines
import lwjake2.client.M
import lwjake2.game.EntDieAdapter
import lwjake2.game.EntDodgeAdapter
import lwjake2.game.EntInteractAdapter
import lwjake2.game.EntPainAdapter
import lwjake2.game.EntThinkAdapter
import lwjake2.game.GameAI
import lwjake2.game.GameBase
import lwjake2.game.GameMisc
import lwjake2.game.GameUtil
import lwjake2.game.GameWeapon
import lwjake2.game.Monster
import lwjake2.game.edict_t
import lwjake2.game.mframe_t
import lwjake2.game.mmove_t
import lwjake2.game.monsters.M_Flash
import lwjake2.util.Lib
import lwjake2.util.Math3D

public class M_Infantry {
    companion object {

        //	This file generated by ModelGen - Do NOT Modify

        public val FRAME_gun02: Int = 0

        public val FRAME_stand01: Int = 1

        public val FRAME_stand02: Int = 2

        public val FRAME_stand03: Int = 3

        public val FRAME_stand04: Int = 4

        public val FRAME_stand05: Int = 5

        public val FRAME_stand06: Int = 6

        public val FRAME_stand07: Int = 7

        public val FRAME_stand08: Int = 8

        public val FRAME_stand09: Int = 9

        public val FRAME_stand10: Int = 10

        public val FRAME_stand11: Int = 11

        public val FRAME_stand12: Int = 12

        public val FRAME_stand13: Int = 13

        public val FRAME_stand14: Int = 14

        public val FRAME_stand15: Int = 15

        public val FRAME_stand16: Int = 16

        public val FRAME_stand17: Int = 17

        public val FRAME_stand18: Int = 18

        public val FRAME_stand19: Int = 19

        public val FRAME_stand20: Int = 20

        public val FRAME_stand21: Int = 21

        public val FRAME_stand22: Int = 22

        public val FRAME_stand23: Int = 23

        public val FRAME_stand24: Int = 24

        public val FRAME_stand25: Int = 25

        public val FRAME_stand26: Int = 26

        public val FRAME_stand27: Int = 27

        public val FRAME_stand28: Int = 28

        public val FRAME_stand29: Int = 29

        public val FRAME_stand30: Int = 30

        public val FRAME_stand31: Int = 31

        public val FRAME_stand32: Int = 32

        public val FRAME_stand33: Int = 33

        public val FRAME_stand34: Int = 34

        public val FRAME_stand35: Int = 35

        public val FRAME_stand36: Int = 36

        public val FRAME_stand37: Int = 37

        public val FRAME_stand38: Int = 38

        public val FRAME_stand39: Int = 39

        public val FRAME_stand40: Int = 40

        public val FRAME_stand41: Int = 41

        public val FRAME_stand42: Int = 42

        public val FRAME_stand43: Int = 43

        public val FRAME_stand44: Int = 44

        public val FRAME_stand45: Int = 45

        public val FRAME_stand46: Int = 46

        public val FRAME_stand47: Int = 47

        public val FRAME_stand48: Int = 48

        public val FRAME_stand49: Int = 49

        public val FRAME_stand50: Int = 50

        public val FRAME_stand51: Int = 51

        public val FRAME_stand52: Int = 52

        public val FRAME_stand53: Int = 53

        public val FRAME_stand54: Int = 54

        public val FRAME_stand55: Int = 55

        public val FRAME_stand56: Int = 56

        public val FRAME_stand57: Int = 57

        public val FRAME_stand58: Int = 58

        public val FRAME_stand59: Int = 59

        public val FRAME_stand60: Int = 60

        public val FRAME_stand61: Int = 61

        public val FRAME_stand62: Int = 62

        public val FRAME_stand63: Int = 63

        public val FRAME_stand64: Int = 64

        public val FRAME_stand65: Int = 65

        public val FRAME_stand66: Int = 66

        public val FRAME_stand67: Int = 67

        public val FRAME_stand68: Int = 68

        public val FRAME_stand69: Int = 69

        public val FRAME_stand70: Int = 70

        public val FRAME_stand71: Int = 71

        public val FRAME_walk01: Int = 72

        public val FRAME_walk02: Int = 73

        public val FRAME_walk03: Int = 74

        public val FRAME_walk04: Int = 75

        public val FRAME_walk05: Int = 76

        public val FRAME_walk06: Int = 77

        public val FRAME_walk07: Int = 78

        public val FRAME_walk08: Int = 79

        public val FRAME_walk09: Int = 80

        public val FRAME_walk10: Int = 81

        public val FRAME_walk11: Int = 82

        public val FRAME_walk12: Int = 83

        public val FRAME_walk13: Int = 84

        public val FRAME_walk14: Int = 85

        public val FRAME_walk15: Int = 86

        public val FRAME_walk16: Int = 87

        public val FRAME_walk17: Int = 88

        public val FRAME_walk18: Int = 89

        public val FRAME_walk19: Int = 90

        public val FRAME_walk20: Int = 91

        public val FRAME_run01: Int = 92

        public val FRAME_run02: Int = 93

        public val FRAME_run03: Int = 94

        public val FRAME_run04: Int = 95

        public val FRAME_run05: Int = 96

        public val FRAME_run06: Int = 97

        public val FRAME_run07: Int = 98

        public val FRAME_run08: Int = 99

        public val FRAME_pain101: Int = 100

        public val FRAME_pain102: Int = 101

        public val FRAME_pain103: Int = 102

        public val FRAME_pain104: Int = 103

        public val FRAME_pain105: Int = 104

        public val FRAME_pain106: Int = 105

        public val FRAME_pain107: Int = 106

        public val FRAME_pain108: Int = 107

        public val FRAME_pain109: Int = 108

        public val FRAME_pain110: Int = 109

        public val FRAME_pain201: Int = 110

        public val FRAME_pain202: Int = 111

        public val FRAME_pain203: Int = 112

        public val FRAME_pain204: Int = 113

        public val FRAME_pain205: Int = 114

        public val FRAME_pain206: Int = 115

        public val FRAME_pain207: Int = 116

        public val FRAME_pain208: Int = 117

        public val FRAME_pain209: Int = 118

        public val FRAME_pain210: Int = 119

        public val FRAME_duck01: Int = 120

        public val FRAME_duck02: Int = 121

        public val FRAME_duck03: Int = 122

        public val FRAME_duck04: Int = 123

        public val FRAME_duck05: Int = 124

        public val FRAME_death101: Int = 125

        public val FRAME_death102: Int = 126

        public val FRAME_death103: Int = 127

        public val FRAME_death104: Int = 128

        public val FRAME_death105: Int = 129

        public val FRAME_death106: Int = 130

        public val FRAME_death107: Int = 131

        public val FRAME_death108: Int = 132

        public val FRAME_death109: Int = 133

        public val FRAME_death110: Int = 134

        public val FRAME_death111: Int = 135

        public val FRAME_death112: Int = 136

        public val FRAME_death113: Int = 137

        public val FRAME_death114: Int = 138

        public val FRAME_death115: Int = 139

        public val FRAME_death116: Int = 140

        public val FRAME_death117: Int = 141

        public val FRAME_death118: Int = 142

        public val FRAME_death119: Int = 143

        public val FRAME_death120: Int = 144

        public val FRAME_death201: Int = 145

        public val FRAME_death202: Int = 146

        public val FRAME_death203: Int = 147

        public val FRAME_death204: Int = 148

        public val FRAME_death205: Int = 149

        public val FRAME_death206: Int = 150

        public val FRAME_death207: Int = 151

        public val FRAME_death208: Int = 152

        public val FRAME_death209: Int = 153

        public val FRAME_death210: Int = 154

        public val FRAME_death211: Int = 155

        public val FRAME_death212: Int = 156

        public val FRAME_death213: Int = 157

        public val FRAME_death214: Int = 158

        public val FRAME_death215: Int = 159

        public val FRAME_death216: Int = 160

        public val FRAME_death217: Int = 161

        public val FRAME_death218: Int = 162

        public val FRAME_death219: Int = 163

        public val FRAME_death220: Int = 164

        public val FRAME_death221: Int = 165

        public val FRAME_death222: Int = 166

        public val FRAME_death223: Int = 167

        public val FRAME_death224: Int = 168

        public val FRAME_death225: Int = 169

        public val FRAME_death301: Int = 170

        public val FRAME_death302: Int = 171

        public val FRAME_death303: Int = 172

        public val FRAME_death304: Int = 173

        public val FRAME_death305: Int = 174

        public val FRAME_death306: Int = 175

        public val FRAME_death307: Int = 176

        public val FRAME_death308: Int = 177

        public val FRAME_death309: Int = 178

        public val FRAME_block01: Int = 179

        public val FRAME_block02: Int = 180

        public val FRAME_block03: Int = 181

        public val FRAME_block04: Int = 182

        public val FRAME_block05: Int = 183

        public val FRAME_attak101: Int = 184

        public val FRAME_attak102: Int = 185

        public val FRAME_attak103: Int = 186

        public val FRAME_attak104: Int = 187

        public val FRAME_attak105: Int = 188

        public val FRAME_attak106: Int = 189

        public val FRAME_attak107: Int = 190

        public val FRAME_attak108: Int = 191

        public val FRAME_attak109: Int = 192

        public val FRAME_attak110: Int = 193

        public val FRAME_attak111: Int = 194

        public val FRAME_attak112: Int = 195

        public val FRAME_attak113: Int = 196

        public val FRAME_attak114: Int = 197

        public val FRAME_attak115: Int = 198

        public val FRAME_attak201: Int = 199

        public val FRAME_attak202: Int = 200

        public val FRAME_attak203: Int = 201

        public val FRAME_attak204: Int = 202

        public val FRAME_attak205: Int = 203

        public val FRAME_attak206: Int = 204

        public val FRAME_attak207: Int = 205

        public val FRAME_attak208: Int = 206

        public val MODEL_SCALE: Float = 1.000000.toFloat()

        var sound_pain1: Int = 0

        var sound_pain2: Int = 0

        var sound_die1: Int = 0

        var sound_die2: Int = 0

        var sound_gunshot: Int = 0

        var sound_weapon_cock: Int = 0

        var sound_punch_swing: Int = 0

        var sound_punch_hit: Int = 0

        var sound_sight: Int = 0

        var sound_search: Int = 0

        var sound_idle: Int = 0

        var infantry_frames_stand = array<mframe_t>(mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null))

        var infantry_move_stand = mmove_t(FRAME_stand50, FRAME_stand71, infantry_frames_stand, null)

        public var infantry_stand: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "infantry_stand"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = infantry_move_stand
                return true
            }
        }

        var infantry_frames_fidget = array<mframe_t>(mframe_t(GameAI.ai_stand, 1, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 1, null), mframe_t(GameAI.ai_stand, 3, null), mframe_t(GameAI.ai_stand, 6, null), mframe_t(GameAI.ai_stand, 3, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 1, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 1, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, -1, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 1, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, -2, null), mframe_t(GameAI.ai_stand, 1, null), mframe_t(GameAI.ai_stand, 1, null), mframe_t(GameAI.ai_stand, 1, null), mframe_t(GameAI.ai_stand, -1, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, -1, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, -1, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 1, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, -1, null), mframe_t(GameAI.ai_stand, -1, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, -3, null), mframe_t(GameAI.ai_stand, -2, null), mframe_t(GameAI.ai_stand, -3, null), mframe_t(GameAI.ai_stand, -3, null), mframe_t(GameAI.ai_stand, -2, null))

        var infantry_move_fidget = mmove_t(FRAME_stand01, FRAME_stand49, infantry_frames_fidget, infantry_stand)

        var infantry_fidget: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "infantry_fidget"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = infantry_move_fidget
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_idle, 1, Defines.ATTN_IDLE, 0)
                return true
            }
        }

        var infantry_frames_walk = array<mframe_t>(mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 6, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 5, null))

        var infantry_move_walk = mmove_t(FRAME_walk03, FRAME_walk14, infantry_frames_walk, null)

        var infantry_walk: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "infantry_walk"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = infantry_move_walk
                return true
            }
        }

        var infantry_frames_run = array<mframe_t>(mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 20, null), mframe_t(GameAI.ai_run, 5, null), mframe_t(GameAI.ai_run, 7, null), mframe_t(GameAI.ai_run, 30, null), mframe_t(GameAI.ai_run, 35, null), mframe_t(GameAI.ai_run, 2, null), mframe_t(GameAI.ai_run, 6, null))

        var infantry_move_run = mmove_t(FRAME_run01, FRAME_run08, infantry_frames_run, null)

        var infantry_run: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "infantry_run"
            }

            public fun think(self: edict_t): Boolean {
                if ((self.monsterinfo.aiflags and Defines.AI_STAND_GROUND) != 0)
                    self.monsterinfo.currentmove = infantry_move_stand
                else
                    self.monsterinfo.currentmove = infantry_move_run
                return true
            }
        }

        var infantry_frames_pain1 = array<mframe_t>(mframe_t(GameAI.ai_move, -3, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 6, null), mframe_t(GameAI.ai_move, 2, null))

        var infantry_move_pain1 = mmove_t(FRAME_pain101, FRAME_pain110, infantry_frames_pain1, infantry_run)

        var infantry_frames_pain2 = array<mframe_t>(mframe_t(GameAI.ai_move, -3, null), mframe_t(GameAI.ai_move, -3, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 5, null), mframe_t(GameAI.ai_move, 2, null))

        var infantry_move_pain2 = mmove_t(FRAME_pain201, FRAME_pain210, infantry_frames_pain2, infantry_run)

        var infantry_pain: EntPainAdapter = object : EntPainAdapter() {
            public fun getID(): String {
                return "infantry_pain"
            }

            public fun pain(self: edict_t, other: edict_t, kick: Float, damage: Int) {

                val n: Int

                if (self.health < (self.max_health / 2))
                    self.s.skinnum = 1

                if (GameBase.level.time < self.pain_debounce_time)
                    return

                self.pain_debounce_time = GameBase.level.time + 3

                if (GameBase.skill.value == 3)
                    return  // no pain anims in nightmare

                n = Lib.rand() % 2
                if (n == 0) {
                    self.monsterinfo.currentmove = infantry_move_pain1
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain1, 1, Defines.ATTN_NORM, 0)
                } else {
                    self.monsterinfo.currentmove = infantry_move_pain2
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain2, 1, Defines.ATTN_NORM, 0)
                }
            }
        }

        var aimangles = array<FloatArray>(floatArray(0.0.toFloat(), 5.0.toFloat(), 0.0.toFloat()).toFloat(), floatArray(10.0.toFloat(), 15.0.toFloat(), 0.0.toFloat()).toFloat(), floatArray(20.0.toFloat(), 25.0.toFloat(), 0.0.toFloat()).toFloat(), floatArray(25.0.toFloat(), 35.0.toFloat(), 0.0.toFloat()).toFloat(), floatArray(30.0.toFloat(), 40.0.toFloat(), 0.0.toFloat()).toFloat(), floatArray(30.0.toFloat(), 45.0.toFloat(), 0.0.toFloat()).toFloat(), floatArray(25.0.toFloat(), 50.0.toFloat(), 0.0.toFloat()).toFloat(), floatArray(20.0.toFloat(), 40.0.toFloat(), 0.0.toFloat()).toFloat(), floatArray(15.0.toFloat(), 35.0.toFloat(), 0.0.toFloat()).toFloat(), floatArray(40.0.toFloat(), 35.0.toFloat(), 0.0.toFloat()).toFloat(), floatArray(70.0.toFloat(), 35.0.toFloat(), 0.0.toFloat()).toFloat(), floatArray(90.0.toFloat(), 35.0.toFloat(), 0.0.toFloat()).toFloat())

        var InfantryMachineGun: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "InfantryMachineGun"
            }

            public fun think(self: edict_t): Boolean {
                val start = floatArray(0.0, 0.0, 0.0)
                val target = floatArray(0.0, 0.0, 0.0)
                val forward = floatArray(0.0, 0.0, 0.0)
                val right = floatArray(0.0, 0.0, 0.0)
                val vec = floatArray(0.0, 0.0, 0.0)
                val flash_number: Int

                if (self.s.frame == FRAME_attak111) {
                    flash_number = Defines.MZ2_INFANTRY_MACHINEGUN_1
                    Math3D.AngleVectors(self.s.angles, forward, right, null)
                    Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start)

                    if (self.enemy != null) {
                        Math3D.VectorMA(self.enemy.s.origin, -0.2.toFloat(), self.enemy.velocity, target)
                        target[2] += self.enemy.viewheight
                        Math3D.VectorSubtract(target, start, forward)
                        Math3D.VectorNormalize(forward)
                    } else {
                        Math3D.AngleVectors(self.s.angles, forward, right, null)
                    }
                } else {
                    flash_number = Defines.MZ2_INFANTRY_MACHINEGUN_2 + (self.s.frame - FRAME_death211)

                    Math3D.AngleVectors(self.s.angles, forward, right, null)
                    Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start)

                    Math3D.VectorSubtract(self.s.angles, aimangles[flash_number - Defines.MZ2_INFANTRY_MACHINEGUN_2], vec)
                    Math3D.AngleVectors(vec, forward, null, null)
                }

                Monster.monster_fire_bullet(self, start, forward, 3, 4, Defines.DEFAULT_BULLET_HSPREAD, Defines.DEFAULT_BULLET_VSPREAD, flash_number)
                return true
            }
        }

        var infantry_sight: EntInteractAdapter = object : EntInteractAdapter() {
            public fun getID(): String {
                return "infantry_sight"
            }

            public fun interact(self: edict_t, other: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_BODY, sound_sight, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        ///

        var infantry_dead: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "infantry_dead"
            }

            public fun think(self: edict_t): Boolean {
                Math3D.VectorSet(self.mins, -16, -16, -24)
                Math3D.VectorSet(self.maxs, 16, 16, -8)
                self.movetype = Defines.MOVETYPE_TOSS
                self.svflags = self.svflags or Defines.SVF_DEADMONSTER
                GameBase.gi.linkentity(self)

                M.M_FlyCheck.think(self)
                return true
            }
        }

        var infantry_frames_death1 = array<mframe_t>(mframe_t(GameAI.ai_move, -4, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, -4, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 9, null), mframe_t(GameAI.ai_move, 9, null), mframe_t(GameAI.ai_move, 5, null), mframe_t(GameAI.ai_move, -3, null), mframe_t(GameAI.ai_move, -3, null))

        var infantry_move_death1 = mmove_t(FRAME_death101, FRAME_death120, infantry_frames_death1, infantry_dead)

        //	Off with his head
        var infantry_frames_death2 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 5, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 4, null), mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -2, InfantryMachineGun), mframe_t(GameAI.ai_move, -2, InfantryMachineGun), mframe_t(GameAI.ai_move, -3, InfantryMachineGun), mframe_t(GameAI.ai_move, -1, InfantryMachineGun), mframe_t(GameAI.ai_move, -2, InfantryMachineGun), mframe_t(GameAI.ai_move, 0, InfantryMachineGun), mframe_t(GameAI.ai_move, 2, InfantryMachineGun), mframe_t(GameAI.ai_move, 2, InfantryMachineGun), mframe_t(GameAI.ai_move, 3, InfantryMachineGun), mframe_t(GameAI.ai_move, -10, InfantryMachineGun), mframe_t(GameAI.ai_move, -7, InfantryMachineGun), mframe_t(GameAI.ai_move, -8, InfantryMachineGun), mframe_t(GameAI.ai_move, -6, null), mframe_t(GameAI.ai_move, 4, null), mframe_t(GameAI.ai_move, 0, null))

        var infantry_move_death2 = mmove_t(FRAME_death201, FRAME_death225, infantry_frames_death2, infantry_dead)

        var infantry_frames_death3 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -6, null), mframe_t(GameAI.ai_move, -11, null), mframe_t(GameAI.ai_move, -3, null), mframe_t(GameAI.ai_move, -11, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var infantry_move_death3 = mmove_t(FRAME_death301, FRAME_death309, infantry_frames_death3, infantry_dead)

        public var infantry_die: EntDieAdapter = object : EntDieAdapter() {
            public fun getID(): String {
                return "infantry_die"
            }

            public fun die(self: edict_t, inflictor: edict_t, attacker: edict_t, damage: Int, point: FloatArray) {

                var n: Int

                //	check for gib
                if (self.health <= self.gib_health) {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("misc/udeath.wav"), 1, Defines.ATTN_NORM, 0)
                    run {
                        n = 0
                        while (n < 2) {
                            GameMisc.ThrowGib(self, "models/objects/gibs/bone/tris.md2", damage, Defines.GIB_ORGANIC)
                            n++
                        }
                    }
                    run {
                        n = 0
                        while (n < 4) {
                            GameMisc.ThrowGib(self, "models/objects/gibs/sm_meat/tris.md2", damage, Defines.GIB_ORGANIC)
                            n++
                        }
                    }
                    GameMisc.ThrowHead(self, "models/objects/gibs/head2/tris.md2", damage, Defines.GIB_ORGANIC)
                    self.deadflag = Defines.DEAD_DEAD
                    return
                }

                if (self.deadflag == Defines.DEAD_DEAD)
                    return

                //	regular death
                self.deadflag = Defines.DEAD_DEAD
                self.takedamage = Defines.DAMAGE_YES

                n = Lib.rand() % 3
                if (n == 0) {
                    self.monsterinfo.currentmove = infantry_move_death1
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_die2, 1, Defines.ATTN_NORM, 0)
                } else if (n == 1) {
                    self.monsterinfo.currentmove = infantry_move_death2
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_die1, 1, Defines.ATTN_NORM, 0)
                } else {
                    self.monsterinfo.currentmove = infantry_move_death3
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_die2, 1, Defines.ATTN_NORM, 0)
                }
            }
        }

        var infantry_duck_down: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "infantry_duck_down"
            }

            public fun think(self: edict_t): Boolean {
                if ((self.monsterinfo.aiflags and Defines.AI_DUCKED) != 0)
                    return true
                self.monsterinfo.aiflags = self.monsterinfo.aiflags or Defines.AI_DUCKED
                self.maxs[2] -= 32
                self.takedamage = Defines.DAMAGE_YES
                self.monsterinfo.pausetime = GameBase.level.time + 1
                GameBase.gi.linkentity(self)
                return true
            }
        }

        var infantry_duck_hold: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "infantry_duck_hold"
            }

            public fun think(self: edict_t): Boolean {
                if (GameBase.level.time >= self.monsterinfo.pausetime)
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags and Defines.AI_HOLD_FRAME.inv()
                else
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags or Defines.AI_HOLD_FRAME
                return true
            }
        }

        var infantry_duck_up: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "infantry_duck_up"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.aiflags = self.monsterinfo.aiflags and Defines.AI_DUCKED.inv()
                self.maxs[2] += 32
                self.takedamage = Defines.DAMAGE_AIM
                GameBase.gi.linkentity(self)
                return true
            }
        }

        var infantry_frames_duck = array<mframe_t>(mframe_t(GameAI.ai_move, -2, infantry_duck_down), mframe_t(GameAI.ai_move, -5, infantry_duck_hold), mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, 4, infantry_duck_up), mframe_t(GameAI.ai_move, 0, null))

        var infantry_move_duck = mmove_t(FRAME_duck01, FRAME_duck05, infantry_frames_duck, infantry_run)

        var infantry_dodge: EntDodgeAdapter = object : EntDodgeAdapter() {
            public fun getID(): String {
                return "infantry_dodge"
            }

            public fun dodge(self: edict_t, attacker: edict_t, eta: Float) {
                if (Lib.random() > 0.25)
                    return

                if (null == self.enemy)
                    self.enemy = attacker

                self.monsterinfo.currentmove = infantry_move_duck
            }
        }

        var infantry_cock_gun: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "infantry_cock_gun"
            }

            public fun think(self: edict_t): Boolean {
                val n: Int

                GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_weapon_cock, 1, Defines.ATTN_NORM, 0)
                n = (Lib.rand() and 15) + 3 + 7
                self.monsterinfo.pausetime = GameBase.level.time + n * Defines.FRAMETIME
                return true
            }
        }

        var infantry_fire: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "infantry_fire"
            }

            public fun think(self: edict_t): Boolean {
                InfantryMachineGun.think(self)

                if (GameBase.level.time >= self.monsterinfo.pausetime)
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags and Defines.AI_HOLD_FRAME.inv()
                else
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags or Defines.AI_HOLD_FRAME
                return true
            }
        }

        var infantry_frames_attack1 = array<mframe_t>(mframe_t(GameAI.ai_charge, 4, null), mframe_t(GameAI.ai_charge, -1, null), mframe_t(GameAI.ai_charge, -1, null), mframe_t(GameAI.ai_charge, 0, infantry_cock_gun), mframe_t(GameAI.ai_charge, -1, null), mframe_t(GameAI.ai_charge, 1, null), mframe_t(GameAI.ai_charge, 1, null), mframe_t(GameAI.ai_charge, 2, null), mframe_t(GameAI.ai_charge, -2, null), mframe_t(GameAI.ai_charge, -3, null), mframe_t(GameAI.ai_charge, 1, infantry_fire), mframe_t(GameAI.ai_charge, 5, null), mframe_t(GameAI.ai_charge, -1, null), mframe_t(GameAI.ai_charge, -2, null), mframe_t(GameAI.ai_charge, -3, null))

        var infantry_move_attack1 = mmove_t(FRAME_attak101, FRAME_attak115, infantry_frames_attack1, infantry_run)

        var infantry_swing: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "infantry_swing"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_punch_swing, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var infantry_smack: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "infantry_smack"
            }

            public fun think(self: edict_t): Boolean {
                val aim = floatArray(0.0, 0.0, 0.0)

                Math3D.VectorSet(aim, Defines.MELEE_DISTANCE, 0, 0)
                if (GameWeapon.fire_hit(self, aim, (5 + (Lib.rand() % 5)), 50))
                    GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_punch_hit, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var infantry_frames_attack2 = array<mframe_t>(mframe_t(GameAI.ai_charge, 3, null), mframe_t(GameAI.ai_charge, 6, null), mframe_t(GameAI.ai_charge, 0, infantry_swing), mframe_t(GameAI.ai_charge, 8, null), mframe_t(GameAI.ai_charge, 5, null), mframe_t(GameAI.ai_charge, 8, infantry_smack), mframe_t(GameAI.ai_charge, 6, null), mframe_t(GameAI.ai_charge, 3, null))

        var infantry_move_attack2 = mmove_t(FRAME_attak201, FRAME_attak208, infantry_frames_attack2, infantry_run)

        var infantry_attack: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "infantry_attack"
            }

            public fun think(self: edict_t): Boolean {
                if (GameUtil.range(self, self.enemy) == Defines.RANGE_MELEE)
                    self.monsterinfo.currentmove = infantry_move_attack2
                else
                    self.monsterinfo.currentmove = infantry_move_attack1
                return true
            }
        }

        /*
     * QUAKED monster_infantry (1 .5 0) (-16 -16 -24) (16 16 32) Ambush
     * Trigger_Spawn Sight
     */
        public fun SP_monster_infantry(self: edict_t) {
            if (GameBase.deathmatch.value != 0) {
                GameUtil.G_FreeEdict(self)
                return
            }

            sound_pain1 = GameBase.gi.soundindex("infantry/infpain1.wav")
            sound_pain2 = GameBase.gi.soundindex("infantry/infpain2.wav")
            sound_die1 = GameBase.gi.soundindex("infantry/infdeth1.wav")
            sound_die2 = GameBase.gi.soundindex("infantry/infdeth2.wav")

            sound_gunshot = GameBase.gi.soundindex("infantry/infatck1.wav")
            sound_weapon_cock = GameBase.gi.soundindex("infantry/infatck3.wav")
            sound_punch_swing = GameBase.gi.soundindex("infantry/infatck2.wav")
            sound_punch_hit = GameBase.gi.soundindex("infantry/melee2.wav")

            sound_sight = GameBase.gi.soundindex("infantry/infsght1.wav")
            sound_search = GameBase.gi.soundindex("infantry/infsrch1.wav")
            sound_idle = GameBase.gi.soundindex("infantry/infidle1.wav")

            self.movetype = Defines.MOVETYPE_STEP
            self.solid = Defines.SOLID_BBOX
            self.s.modelindex = GameBase.gi.modelindex("models/monsters/infantry/tris.md2")
            Math3D.VectorSet(self.mins, -16, -16, -24)
            Math3D.VectorSet(self.maxs, 16, 16, 32)

            self.health = 100
            self.gib_health = -40
            self.mass = 200

            self.pain = infantry_pain
            self.die = infantry_die

            self.monsterinfo.stand = infantry_stand
            self.monsterinfo.walk = infantry_walk
            self.monsterinfo.run = infantry_run
            self.monsterinfo.dodge = infantry_dodge
            self.monsterinfo.attack = infantry_attack
            self.monsterinfo.melee = null
            self.monsterinfo.sight = infantry_sight
            self.monsterinfo.idle = infantry_fidget

            GameBase.gi.linkentity(self)

            self.monsterinfo.currentmove = infantry_move_stand
            self.monsterinfo.scale = MODEL_SCALE

            GameAI.walkmonster_start.think(self)
        }
    }
}