/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package lwjake2.game.monsters

import lwjake2.Defines
import lwjake2.game.EntDieAdapter
import lwjake2.game.EntPainAdapter
import lwjake2.game.EntThinkAdapter
import lwjake2.game.GameAI
import lwjake2.game.GameBase
import lwjake2.game.GameMisc
import lwjake2.game.GameUtil
import lwjake2.game.Monster
import lwjake2.game.edict_t
import lwjake2.game.mframe_t
import lwjake2.game.mmove_t
import lwjake2.game.monsters.M_Flash
import lwjake2.util.Lib
import lwjake2.util.Math3D

public class M_Supertank {
    companion object {

        // This file generated by ModelGen - Do NOT Modify

        public val FRAME_attak1_1: Int = 0

        public val FRAME_attak1_2: Int = 1

        public val FRAME_attak1_3: Int = 2

        public val FRAME_attak1_4: Int = 3

        public val FRAME_attak1_5: Int = 4

        public val FRAME_attak1_6: Int = 5

        public val FRAME_attak1_7: Int = 6

        public val FRAME_attak1_8: Int = 7

        public val FRAME_attak1_9: Int = 8

        public val FRAME_attak1_10: Int = 9

        public val FRAME_attak1_11: Int = 10

        public val FRAME_attak1_12: Int = 11

        public val FRAME_attak1_13: Int = 12

        public val FRAME_attak1_14: Int = 13

        public val FRAME_attak1_15: Int = 14

        public val FRAME_attak1_16: Int = 15

        public val FRAME_attak1_17: Int = 16

        public val FRAME_attak1_18: Int = 17

        public val FRAME_attak1_19: Int = 18

        public val FRAME_attak1_20: Int = 19

        public val FRAME_attak2_1: Int = 20

        public val FRAME_attak2_2: Int = 21

        public val FRAME_attak2_3: Int = 22

        public val FRAME_attak2_4: Int = 23

        public val FRAME_attak2_5: Int = 24

        public val FRAME_attak2_6: Int = 25

        public val FRAME_attak2_7: Int = 26

        public val FRAME_attak2_8: Int = 27

        public val FRAME_attak2_9: Int = 28

        public val FRAME_attak2_10: Int = 29

        public val FRAME_attak2_11: Int = 30

        public val FRAME_attak2_12: Int = 31

        public val FRAME_attak2_13: Int = 32

        public val FRAME_attak2_14: Int = 33

        public val FRAME_attak2_15: Int = 34

        public val FRAME_attak2_16: Int = 35

        public val FRAME_attak2_17: Int = 36

        public val FRAME_attak2_18: Int = 37

        public val FRAME_attak2_19: Int = 38

        public val FRAME_attak2_20: Int = 39

        public val FRAME_attak2_21: Int = 40

        public val FRAME_attak2_22: Int = 41

        public val FRAME_attak2_23: Int = 42

        public val FRAME_attak2_24: Int = 43

        public val FRAME_attak2_25: Int = 44

        public val FRAME_attak2_26: Int = 45

        public val FRAME_attak2_27: Int = 46

        public val FRAME_attak3_1: Int = 47

        public val FRAME_attak3_2: Int = 48

        public val FRAME_attak3_3: Int = 49

        public val FRAME_attak3_4: Int = 50

        public val FRAME_attak3_5: Int = 51

        public val FRAME_attak3_6: Int = 52

        public val FRAME_attak3_7: Int = 53

        public val FRAME_attak3_8: Int = 54

        public val FRAME_attak3_9: Int = 55

        public val FRAME_attak3_10: Int = 56

        public val FRAME_attak3_11: Int = 57

        public val FRAME_attak3_12: Int = 58

        public val FRAME_attak3_13: Int = 59

        public val FRAME_attak3_14: Int = 60

        public val FRAME_attak3_15: Int = 61

        public val FRAME_attak3_16: Int = 62

        public val FRAME_attak3_17: Int = 63

        public val FRAME_attak3_18: Int = 64

        public val FRAME_attak3_19: Int = 65

        public val FRAME_attak3_20: Int = 66

        public val FRAME_attak3_21: Int = 67

        public val FRAME_attak3_22: Int = 68

        public val FRAME_attak3_23: Int = 69

        public val FRAME_attak3_24: Int = 70

        public val FRAME_attak3_25: Int = 71

        public val FRAME_attak3_26: Int = 72

        public val FRAME_attak3_27: Int = 73

        public val FRAME_attak4_1: Int = 74

        public val FRAME_attak4_2: Int = 75

        public val FRAME_attak4_3: Int = 76

        public val FRAME_attak4_4: Int = 77

        public val FRAME_attak4_5: Int = 78

        public val FRAME_attak4_6: Int = 79

        public val FRAME_backwd_1: Int = 80

        public val FRAME_backwd_2: Int = 81

        public val FRAME_backwd_3: Int = 82

        public val FRAME_backwd_4: Int = 83

        public val FRAME_backwd_5: Int = 84

        public val FRAME_backwd_6: Int = 85

        public val FRAME_backwd_7: Int = 86

        public val FRAME_backwd_8: Int = 87

        public val FRAME_backwd_9: Int = 88

        public val FRAME_backwd_10: Int = 89

        public val FRAME_backwd_11: Int = 90

        public val FRAME_backwd_12: Int = 91

        public val FRAME_backwd_13: Int = 92

        public val FRAME_backwd_14: Int = 93

        public val FRAME_backwd_15: Int = 94

        public val FRAME_backwd_16: Int = 95

        public val FRAME_backwd_17: Int = 96

        public val FRAME_backwd_18: Int = 97

        public val FRAME_death_1: Int = 98

        public val FRAME_death_2: Int = 99

        public val FRAME_death_3: Int = 100

        public val FRAME_death_4: Int = 101

        public val FRAME_death_5: Int = 102

        public val FRAME_death_6: Int = 103

        public val FRAME_death_7: Int = 104

        public val FRAME_death_8: Int = 105

        public val FRAME_death_9: Int = 106

        public val FRAME_death_10: Int = 107

        public val FRAME_death_11: Int = 108

        public val FRAME_death_12: Int = 109

        public val FRAME_death_13: Int = 110

        public val FRAME_death_14: Int = 111

        public val FRAME_death_15: Int = 112

        public val FRAME_death_16: Int = 113

        public val FRAME_death_17: Int = 114

        public val FRAME_death_18: Int = 115

        public val FRAME_death_19: Int = 116

        public val FRAME_death_20: Int = 117

        public val FRAME_death_21: Int = 118

        public val FRAME_death_22: Int = 119

        public val FRAME_death_23: Int = 120

        public val FRAME_death_24: Int = 121

        public val FRAME_death_31: Int = 122

        public val FRAME_death_32: Int = 123

        public val FRAME_death_33: Int = 124

        public val FRAME_death_45: Int = 125

        public val FRAME_death_46: Int = 126

        public val FRAME_death_47: Int = 127

        public val FRAME_forwrd_1: Int = 128

        public val FRAME_forwrd_2: Int = 129

        public val FRAME_forwrd_3: Int = 130

        public val FRAME_forwrd_4: Int = 131

        public val FRAME_forwrd_5: Int = 132

        public val FRAME_forwrd_6: Int = 133

        public val FRAME_forwrd_7: Int = 134

        public val FRAME_forwrd_8: Int = 135

        public val FRAME_forwrd_9: Int = 136

        public val FRAME_forwrd_10: Int = 137

        public val FRAME_forwrd_11: Int = 138

        public val FRAME_forwrd_12: Int = 139

        public val FRAME_forwrd_13: Int = 140

        public val FRAME_forwrd_14: Int = 141

        public val FRAME_forwrd_15: Int = 142

        public val FRAME_forwrd_16: Int = 143

        public val FRAME_forwrd_17: Int = 144

        public val FRAME_forwrd_18: Int = 145

        public val FRAME_left_1: Int = 146

        public val FRAME_left_2: Int = 147

        public val FRAME_left_3: Int = 148

        public val FRAME_left_4: Int = 149

        public val FRAME_left_5: Int = 150

        public val FRAME_left_6: Int = 151

        public val FRAME_left_7: Int = 152

        public val FRAME_left_8: Int = 153

        public val FRAME_left_9: Int = 154

        public val FRAME_left_10: Int = 155

        public val FRAME_left_11: Int = 156

        public val FRAME_left_12: Int = 157

        public val FRAME_left_13: Int = 158

        public val FRAME_left_14: Int = 159

        public val FRAME_left_15: Int = 160

        public val FRAME_left_16: Int = 161

        public val FRAME_left_17: Int = 162

        public val FRAME_left_18: Int = 163

        public val FRAME_pain1_1: Int = 164

        public val FRAME_pain1_2: Int = 165

        public val FRAME_pain1_3: Int = 166

        public val FRAME_pain1_4: Int = 167

        public val FRAME_pain2_5: Int = 168

        public val FRAME_pain2_6: Int = 169

        public val FRAME_pain2_7: Int = 170

        public val FRAME_pain2_8: Int = 171

        public val FRAME_pain3_9: Int = 172

        public val FRAME_pain3_10: Int = 173

        public val FRAME_pain3_11: Int = 174

        public val FRAME_pain3_12: Int = 175

        public val FRAME_right_1: Int = 176

        public val FRAME_right_2: Int = 177

        public val FRAME_right_3: Int = 178

        public val FRAME_right_4: Int = 179

        public val FRAME_right_5: Int = 180

        public val FRAME_right_6: Int = 181

        public val FRAME_right_7: Int = 182

        public val FRAME_right_8: Int = 183

        public val FRAME_right_9: Int = 184

        public val FRAME_right_10: Int = 185

        public val FRAME_right_11: Int = 186

        public val FRAME_right_12: Int = 187

        public val FRAME_right_13: Int = 188

        public val FRAME_right_14: Int = 189

        public val FRAME_right_15: Int = 190

        public val FRAME_right_16: Int = 191

        public val FRAME_right_17: Int = 192

        public val FRAME_right_18: Int = 193

        public val FRAME_stand_1: Int = 194

        public val FRAME_stand_2: Int = 195

        public val FRAME_stand_3: Int = 196

        public val FRAME_stand_4: Int = 197

        public val FRAME_stand_5: Int = 198

        public val FRAME_stand_6: Int = 199

        public val FRAME_stand_7: Int = 200

        public val FRAME_stand_8: Int = 201

        public val FRAME_stand_9: Int = 202

        public val FRAME_stand_10: Int = 203

        public val FRAME_stand_11: Int = 204

        public val FRAME_stand_12: Int = 205

        public val FRAME_stand_13: Int = 206

        public val FRAME_stand_14: Int = 207

        public val FRAME_stand_15: Int = 208

        public val FRAME_stand_16: Int = 209

        public val FRAME_stand_17: Int = 210

        public val FRAME_stand_18: Int = 211

        public val FRAME_stand_19: Int = 212

        public val FRAME_stand_20: Int = 213

        public val FRAME_stand_21: Int = 214

        public val FRAME_stand_22: Int = 215

        public val FRAME_stand_23: Int = 216

        public val FRAME_stand_24: Int = 217

        public val FRAME_stand_25: Int = 218

        public val FRAME_stand_26: Int = 219

        public val FRAME_stand_27: Int = 220

        public val FRAME_stand_28: Int = 221

        public val FRAME_stand_29: Int = 222

        public val FRAME_stand_30: Int = 223

        public val FRAME_stand_31: Int = 224

        public val FRAME_stand_32: Int = 225

        public val FRAME_stand_33: Int = 226

        public val FRAME_stand_34: Int = 227

        public val FRAME_stand_35: Int = 228

        public val FRAME_stand_36: Int = 229

        public val FRAME_stand_37: Int = 230

        public val FRAME_stand_38: Int = 231

        public val FRAME_stand_39: Int = 232

        public val FRAME_stand_40: Int = 233

        public val FRAME_stand_41: Int = 234

        public val FRAME_stand_42: Int = 235

        public val FRAME_stand_43: Int = 236

        public val FRAME_stand_44: Int = 237

        public val FRAME_stand_45: Int = 238

        public val FRAME_stand_46: Int = 239

        public val FRAME_stand_47: Int = 240

        public val FRAME_stand_48: Int = 241

        public val FRAME_stand_49: Int = 242

        public val FRAME_stand_50: Int = 243

        public val FRAME_stand_51: Int = 244

        public val FRAME_stand_52: Int = 245

        public val FRAME_stand_53: Int = 246

        public val FRAME_stand_54: Int = 247

        public val FRAME_stand_55: Int = 248

        public val FRAME_stand_56: Int = 249

        public val FRAME_stand_57: Int = 250

        public val FRAME_stand_58: Int = 251

        public val FRAME_stand_59: Int = 252

        public val FRAME_stand_60: Int = 253

        public val MODEL_SCALE: Float = 1.000000.toFloat()

        var sound_pain1: Int = 0

        var sound_pain2: Int = 0

        var sound_pain3: Int = 0

        var sound_death: Int = 0

        var sound_search1: Int = 0

        var sound_search2: Int = 0

        var tread_sound: Int = 0

        var TreadSound: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "TreadSound"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, tread_sound, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var supertank_search: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "supertank_search"
            }

            public fun think(self: edict_t): Boolean {
                if (Lib.random() < 0.5)
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_search1, 1, Defines.ATTN_NORM, 0)
                else
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_search2, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        //
        // stand
        //

        var supertank_frames_stand = array<mframe_t>(mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null))

        var supertank_move_stand = mmove_t(FRAME_stand_1, FRAME_stand_60, supertank_frames_stand, null)

        var supertank_stand: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "supertank_stand"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = supertank_move_stand
                return true
            }
        }

        var supertank_frames_run = array<mframe_t>(mframe_t(GameAI.ai_run, 12, TreadSound), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, 12, null))

        var supertank_move_run = mmove_t(FRAME_forwrd_1, FRAME_forwrd_18, supertank_frames_run, null)

        //
        // walk
        //

        var supertank_frames_forward = array<mframe_t>(mframe_t(GameAI.ai_walk, 4, TreadSound), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null))

        var supertank_move_forward = mmove_t(FRAME_forwrd_1, FRAME_forwrd_18, supertank_frames_forward, null)

        var supertank_forward: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "supertank_forward"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = supertank_move_forward
                return true
            }
        }

        var supertank_walk: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "supertank_walk"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = supertank_move_forward
                return true
            }
        }

        var supertank_run: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "supertank_run"
            }

            public fun think(self: edict_t): Boolean {
                if ((self.monsterinfo.aiflags and Defines.AI_STAND_GROUND) != 0)
                    self.monsterinfo.currentmove = supertank_move_stand
                else
                    self.monsterinfo.currentmove = supertank_move_run
                return true
            }
        }

        //
        // death
        //
        var supertank_dead: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "supertank_dead"
            }

            public fun think(self: edict_t): Boolean {
                Math3D.VectorSet(self.mins, -60, -60, 0)
                Math3D.VectorSet(self.maxs, 60, 60, 72)
                self.movetype = Defines.MOVETYPE_TOSS
                self.svflags = self.svflags or Defines.SVF_DEADMONSTER
                self.nextthink = 0
                GameBase.gi.linkentity(self)
                return true
            }
        }

        var supertankRocket: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "supertankRocket"
            }

            public fun think(self: edict_t): Boolean {
                val forward = floatArray(0.0, 0.0, 0.0)
                val right = floatArray(0.0, 0.0, 0.0)
                val start = floatArray(0.0, 0.0, 0.0)
                val dir = floatArray(0.0, 0.0, 0.0)
                val vec = floatArray(0.0, 0.0, 0.0)
                val flash_number: Int

                if (self.s.frame == FRAME_attak2_8)
                    flash_number = Defines.MZ2_SUPERTANK_ROCKET_1
                else if (self.s.frame == FRAME_attak2_11)
                    flash_number = Defines.MZ2_SUPERTANK_ROCKET_2
                else
                // (self.s.frame == FRAME_attak2_14)
                    flash_number = Defines.MZ2_SUPERTANK_ROCKET_3

                Math3D.AngleVectors(self.s.angles, forward, right, null)
                Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start)

                Math3D.VectorCopy(self.enemy.s.origin, vec)
                vec[2] += self.enemy.viewheight
                Math3D.VectorSubtract(vec, start, dir)
                Math3D.VectorNormalize(dir)

                Monster.monster_fire_rocket(self, start, dir, 50, 500, flash_number)
                return true
            }
        }

        var supertankMachineGun: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "supertankMachineGun"
            }

            public fun think(self: edict_t): Boolean {
                val dir = floatArray(0.0, 0.0, 0.0)
                val vec = floatArray(0.0, 0.0, 0.0)
                val start = floatArray(0.0, 0.0, 0.0)
                val forward = floatArray(0.0, 0.0, 0.0)
                val right = floatArray(0.0, 0.0, 0.0)
                val flash_number: Int

                flash_number = Defines.MZ2_SUPERTANK_MACHINEGUN_1 + (self.s.frame - FRAME_attak1_1)

                //FIXME!!!
                dir[0] = 0
                dir[1] = self.s.angles[1]
                dir[2] = 0

                Math3D.AngleVectors(dir, forward, right, null)
                Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start)

                if (self.enemy != null) {
                    Math3D.VectorCopy(self.enemy.s.origin, vec)
                    Math3D.VectorMA(vec, 0, self.enemy.velocity, vec)
                    vec[2] += self.enemy.viewheight
                    Math3D.VectorSubtract(vec, start, forward)
                    Math3D.VectorNormalize(forward)
                }

                Monster.monster_fire_bullet(self, start, forward, 6, 4, Defines.DEFAULT_BULLET_HSPREAD, Defines.DEFAULT_BULLET_VSPREAD, flash_number)
                return true
            }
        }

        var supertank_attack: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "supertank_attack"
            }

            public fun think(self: edict_t): Boolean {
                val vec = floatArray(0.0, 0.0, 0.0)
                val range: Float
                //float r;

                Math3D.VectorSubtract(self.enemy.s.origin, self.s.origin, vec)
                range = Math3D.VectorLength(vec)

                //r = random();

                // Attack 1 == Chaingun
                // Attack 2 == Rocket Launcher

                if (range <= 160) {
                    self.monsterinfo.currentmove = supertank_move_attack1
                } else {
                    // fire rockets more often at distance
                    if (Lib.random() < 0.3)
                        self.monsterinfo.currentmove = supertank_move_attack1
                    else
                        self.monsterinfo.currentmove = supertank_move_attack2
                }
                return true
            }
        }

        var supertank_frames_turn_right = array<mframe_t>(mframe_t(GameAI.ai_move, 0, TreadSound), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var supertank_move_turn_right = mmove_t(FRAME_right_1, FRAME_right_18, supertank_frames_turn_right, supertank_run)

        var supertank_frames_turn_left = array<mframe_t>(mframe_t(GameAI.ai_move, 0, TreadSound), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var supertank_move_turn_left = mmove_t(FRAME_left_1, FRAME_left_18, supertank_frames_turn_left, supertank_run)

        var supertank_frames_pain3 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var supertank_move_pain3 = mmove_t(FRAME_pain3_9, FRAME_pain3_12, supertank_frames_pain3, supertank_run)

        var supertank_frames_pain2 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var supertank_move_pain2 = mmove_t(FRAME_pain2_5, FRAME_pain2_8, supertank_frames_pain2, supertank_run)

        var supertank_frames_pain1 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var supertank_move_pain1 = mmove_t(FRAME_pain1_1, FRAME_pain1_4, supertank_frames_pain1, supertank_run)

        var supertank_frames_death1 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, M_Supertank.BossExplode))

        var supertank_move_death = mmove_t(FRAME_death_1, FRAME_death_24, supertank_frames_death1, supertank_dead)

        var supertank_frames_backward = array<mframe_t>(mframe_t(GameAI.ai_walk, 0, TreadSound), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null))

        var supertank_move_backward = mmove_t(FRAME_backwd_1, FRAME_backwd_18, supertank_frames_backward, null)

        var supertank_frames_attack4 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var supertank_move_attack4 = mmove_t(FRAME_attak4_1, FRAME_attak4_6, supertank_frames_attack4, supertank_run)

        var supertank_frames_attack3 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var supertank_move_attack3 = mmove_t(FRAME_attak3_1, FRAME_attak3_27, supertank_frames_attack3, supertank_run)

        var supertank_frames_attack2 = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, supertankRocket), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, supertankRocket), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, supertankRocket), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var supertank_move_attack2 = mmove_t(FRAME_attak2_1, FRAME_attak2_27, supertank_frames_attack2, supertank_run)

        var supertank_reattack1: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "supertank_reattack1"
            }

            public fun think(self: edict_t): Boolean {
                if (GameUtil.visible(self, self.enemy))
                    if (Lib.random() < 0.9)
                        self.monsterinfo.currentmove = supertank_move_attack1
                    else
                        self.monsterinfo.currentmove = supertank_move_end_attack1
                else
                    self.monsterinfo.currentmove = supertank_move_end_attack1
                return true
            }
        }

        var supertank_frames_attack1 = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, supertankMachineGun), mframe_t(GameAI.ai_charge, 0, supertankMachineGun), mframe_t(GameAI.ai_charge, 0, supertankMachineGun), mframe_t(GameAI.ai_charge, 0, supertankMachineGun), mframe_t(GameAI.ai_charge, 0, supertankMachineGun), mframe_t(GameAI.ai_charge, 0, supertankMachineGun))

        var supertank_move_attack1 = mmove_t(FRAME_attak1_1, FRAME_attak1_6, supertank_frames_attack1, supertank_reattack1)

        var supertank_frames_end_attack1 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var supertank_move_end_attack1 = mmove_t(FRAME_attak1_7, FRAME_attak1_20, supertank_frames_end_attack1, supertank_run)

        var supertank_pain: EntPainAdapter = object : EntPainAdapter() {
            public fun getID(): String {
                return "supertank_pain"
            }

            public fun pain(self: edict_t, other: edict_t, kick: Float, damage: Int) {
                if (self.health < (self.max_health / 2))
                    self.s.skinnum = 1

                if (GameBase.level.time < self.pain_debounce_time)
                    return

                // Lessen the chance of him going into his pain frames
                if (damage <= 25)
                    if (Lib.random() < 0.2)
                        return

                // Don't go into pain if he's firing his rockets
                if (GameBase.skill.value >= 2)
                    if ((self.s.frame >= FRAME_attak2_1) && (self.s.frame <= FRAME_attak2_14))
                        return

                self.pain_debounce_time = GameBase.level.time + 3

                if (GameBase.skill.value == 3)
                    return  // no pain anims in nightmare

                if (damage <= 10) {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain1, 1, Defines.ATTN_NORM, 0)
                    self.monsterinfo.currentmove = supertank_move_pain1
                } else if (damage <= 25) {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain3, 1, Defines.ATTN_NORM, 0)
                    self.monsterinfo.currentmove = supertank_move_pain2
                } else {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain2, 1, Defines.ATTN_NORM, 0)
                    self.monsterinfo.currentmove = supertank_move_pain3
                }
            }
        }

        var supertank_die: EntDieAdapter = object : EntDieAdapter() {
            public fun getID(): String {
                return "supertank_die"
            }

            public fun die(self: edict_t, inflictor: edict_t, attacker: edict_t, damage: Int, point: FloatArray) {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_death, 1, Defines.ATTN_NORM, 0)
                self.deadflag = Defines.DEAD_DEAD
                self.takedamage = Defines.DAMAGE_NO
                self.count = 0
                self.monsterinfo.currentmove = supertank_move_death
            }
        }

        //
        // monster_supertank
        //

        /*
     * QUAKED monster_supertank (1 .5 0) (-64 -64 0) (64 64 72) Ambush
     * Trigger_Spawn Sight
     */
        public var SP_monster_supertank: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "SP_monster_supertank"
            }

            public fun think(self: edict_t): Boolean {
                if (GameBase.deathmatch.value != 0) {
                    GameUtil.G_FreeEdict(self)
                    return true
                }

                sound_pain1 = GameBase.gi.soundindex("bosstank/btkpain1.wav")
                sound_pain2 = GameBase.gi.soundindex("bosstank/btkpain2.wav")
                sound_pain3 = GameBase.gi.soundindex("bosstank/btkpain3.wav")
                sound_death = GameBase.gi.soundindex("bosstank/btkdeth1.wav")
                sound_search1 = GameBase.gi.soundindex("bosstank/btkunqv1.wav")
                sound_search2 = GameBase.gi.soundindex("bosstank/btkunqv2.wav")

                //	self.s.sound = gi.soundindex ("bosstank/btkengn1.wav");
                tread_sound = GameBase.gi.soundindex("bosstank/btkengn1.wav")

                self.movetype = Defines.MOVETYPE_STEP
                self.solid = Defines.SOLID_BBOX
                self.s.modelindex = GameBase.gi.modelindex("models/monsters/boss1/tris.md2")
                Math3D.VectorSet(self.mins, -64, -64, 0)
                Math3D.VectorSet(self.maxs, 64, 64, 112)

                self.health = 1500
                self.gib_health = -500
                self.mass = 800

                self.pain = supertank_pain
                self.die = supertank_die
                self.monsterinfo.stand = supertank_stand
                self.monsterinfo.walk = supertank_walk
                self.monsterinfo.run = supertank_run
                self.monsterinfo.dodge = null
                self.monsterinfo.attack = supertank_attack
                self.monsterinfo.search = supertank_search
                self.monsterinfo.melee = null
                self.monsterinfo.sight = null

                GameBase.gi.linkentity(self)

                self.monsterinfo.currentmove = supertank_move_stand
                self.monsterinfo.scale = MODEL_SCALE

                GameAI.walkmonster_start.think(self)
                return true
            }
        }

        /** Common Boss explode animation.  */

        public var BossExplode: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "BossExplode"
            }

            public fun think(self: edict_t): Boolean {
                val org = floatArray(0.0, 0.0, 0.0)

                var n: Int

                self.think = BossExplode
                Math3D.VectorCopy(self.s.origin, org)
                org[2] += 24 + (Lib.rand() and 15)
                when (self.count++) {
                    0 -> {
                        org[0] -= 24
                        org[1] -= 24
                    }
                    1 -> {
                        org[0] += 24
                        org[1] += 24
                    }
                    2 -> {
                        org[0] += 24
                        org[1] -= 24
                    }
                    3 -> {
                        org[0] -= 24
                        org[1] += 24
                    }
                    4 -> {
                        org[0] -= 48
                        org[1] -= 48
                    }
                    5 -> {
                        org[0] += 48
                        org[1] += 48
                    }
                    6 -> {
                        org[0] -= 48
                        org[1] += 48
                    }
                    7 -> {
                        org[0] += 48
                        org[1] -= 48
                    }
                    8 -> {
                        self.s.sound = 0
                        run {
                            n = 0
                            while (n < 4) {
                                GameMisc.ThrowGib(self, "models/objects/gibs/sm_meat/tris.md2", 500, Defines.GIB_ORGANIC)
                                n++
                            }
                        }
                        run {
                            n = 0
                            while (n < 8) {
                                GameMisc.ThrowGib(self, "models/objects/gibs/sm_metal/tris.md2", 500, Defines.GIB_METALLIC)
                                n++
                            }
                        }
                        GameMisc.ThrowGib(self, "models/objects/gibs/chest/tris.md2", 500, Defines.GIB_ORGANIC)
                        GameMisc.ThrowHead(self, "models/objects/gibs/gear/tris.md2", 500, Defines.GIB_METALLIC)
                        self.deadflag = Defines.DEAD_DEAD
                        return true
                    }
                }

                GameBase.gi.WriteByte(Defines.svc_temp_entity)
                GameBase.gi.WriteByte(Defines.TE_EXPLOSION1)
                GameBase.gi.WritePosition(org)
                GameBase.gi.multicast(self.s.origin, Defines.MULTICAST_PVS)

                self.nextthink = GameBase.level.time + 0.1.toFloat()
                return true
            }
        }
    }

}