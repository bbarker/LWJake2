/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package lwjake2.game.monsters

import lwjake2.Defines
import lwjake2.game.EntDieAdapter
import lwjake2.game.EntInteractAdapter
import lwjake2.game.EntPainAdapter
import lwjake2.game.EntThinkAdapter
import lwjake2.game.GameAI
import lwjake2.game.GameBase
import lwjake2.game.GameMisc
import lwjake2.game.GameUtil
import lwjake2.game.GameWeapon
import lwjake2.game.edict_t
import lwjake2.game.mframe_t
import lwjake2.game.mmove_t
import lwjake2.util.Lib
import lwjake2.util.Math3D

public class M_Flipper {
    companion object {

        //	This file generated by ModelGen - Do NOT Modify

        public val FRAME_flpbit01: Int = 0

        public val FRAME_flpbit02: Int = 1

        public val FRAME_flpbit03: Int = 2

        public val FRAME_flpbit04: Int = 3

        public val FRAME_flpbit05: Int = 4

        public val FRAME_flpbit06: Int = 5

        public val FRAME_flpbit07: Int = 6

        public val FRAME_flpbit08: Int = 7

        public val FRAME_flpbit09: Int = 8

        public val FRAME_flpbit10: Int = 9

        public val FRAME_flpbit11: Int = 10

        public val FRAME_flpbit12: Int = 11

        public val FRAME_flpbit13: Int = 12

        public val FRAME_flpbit14: Int = 13

        public val FRAME_flpbit15: Int = 14

        public val FRAME_flpbit16: Int = 15

        public val FRAME_flpbit17: Int = 16

        public val FRAME_flpbit18: Int = 17

        public val FRAME_flpbit19: Int = 18

        public val FRAME_flpbit20: Int = 19

        public val FRAME_flptal01: Int = 20

        public val FRAME_flptal02: Int = 21

        public val FRAME_flptal03: Int = 22

        public val FRAME_flptal04: Int = 23

        public val FRAME_flptal05: Int = 24

        public val FRAME_flptal06: Int = 25

        public val FRAME_flptal07: Int = 26

        public val FRAME_flptal08: Int = 27

        public val FRAME_flptal09: Int = 28

        public val FRAME_flptal10: Int = 29

        public val FRAME_flptal11: Int = 30

        public val FRAME_flptal12: Int = 31

        public val FRAME_flptal13: Int = 32

        public val FRAME_flptal14: Int = 33

        public val FRAME_flptal15: Int = 34

        public val FRAME_flptal16: Int = 35

        public val FRAME_flptal17: Int = 36

        public val FRAME_flptal18: Int = 37

        public val FRAME_flptal19: Int = 38

        public val FRAME_flptal20: Int = 39

        public val FRAME_flptal21: Int = 40

        public val FRAME_flphor01: Int = 41

        public val FRAME_flphor02: Int = 42

        public val FRAME_flphor03: Int = 43

        public val FRAME_flphor04: Int = 44

        public val FRAME_flphor05: Int = 45

        public val FRAME_flphor06: Int = 46

        public val FRAME_flphor07: Int = 47

        public val FRAME_flphor08: Int = 48

        public val FRAME_flphor09: Int = 49

        public val FRAME_flphor10: Int = 50

        public val FRAME_flphor11: Int = 51

        public val FRAME_flphor12: Int = 52

        public val FRAME_flphor13: Int = 53

        public val FRAME_flphor14: Int = 54

        public val FRAME_flphor15: Int = 55

        public val FRAME_flphor16: Int = 56

        public val FRAME_flphor17: Int = 57

        public val FRAME_flphor18: Int = 58

        public val FRAME_flphor19: Int = 59

        public val FRAME_flphor20: Int = 60

        public val FRAME_flphor21: Int = 61

        public val FRAME_flphor22: Int = 62

        public val FRAME_flphor23: Int = 63

        public val FRAME_flphor24: Int = 64

        public val FRAME_flpver01: Int = 65

        public val FRAME_flpver02: Int = 66

        public val FRAME_flpver03: Int = 67

        public val FRAME_flpver04: Int = 68

        public val FRAME_flpver05: Int = 69

        public val FRAME_flpver06: Int = 70

        public val FRAME_flpver07: Int = 71

        public val FRAME_flpver08: Int = 72

        public val FRAME_flpver09: Int = 73

        public val FRAME_flpver10: Int = 74

        public val FRAME_flpver11: Int = 75

        public val FRAME_flpver12: Int = 76

        public val FRAME_flpver13: Int = 77

        public val FRAME_flpver14: Int = 78

        public val FRAME_flpver15: Int = 79

        public val FRAME_flpver16: Int = 80

        public val FRAME_flpver17: Int = 81

        public val FRAME_flpver18: Int = 82

        public val FRAME_flpver19: Int = 83

        public val FRAME_flpver20: Int = 84

        public val FRAME_flpver21: Int = 85

        public val FRAME_flpver22: Int = 86

        public val FRAME_flpver23: Int = 87

        public val FRAME_flpver24: Int = 88

        public val FRAME_flpver25: Int = 89

        public val FRAME_flpver26: Int = 90

        public val FRAME_flpver27: Int = 91

        public val FRAME_flpver28: Int = 92

        public val FRAME_flpver29: Int = 93

        public val FRAME_flppn101: Int = 94

        public val FRAME_flppn102: Int = 95

        public val FRAME_flppn103: Int = 96

        public val FRAME_flppn104: Int = 97

        public val FRAME_flppn105: Int = 98

        public val FRAME_flppn201: Int = 99

        public val FRAME_flppn202: Int = 100

        public val FRAME_flppn203: Int = 101

        public val FRAME_flppn204: Int = 102

        public val FRAME_flppn205: Int = 103

        public val FRAME_flpdth01: Int = 104

        public val FRAME_flpdth02: Int = 105

        public val FRAME_flpdth03: Int = 106

        public val FRAME_flpdth04: Int = 107

        public val FRAME_flpdth05: Int = 108

        public val FRAME_flpdth06: Int = 109

        public val FRAME_flpdth07: Int = 110

        public val FRAME_flpdth08: Int = 111

        public val FRAME_flpdth09: Int = 112

        public val FRAME_flpdth10: Int = 113

        public val FRAME_flpdth11: Int = 114

        public val FRAME_flpdth12: Int = 115

        public val FRAME_flpdth13: Int = 116

        public val FRAME_flpdth14: Int = 117

        public val FRAME_flpdth15: Int = 118

        public val FRAME_flpdth16: Int = 119

        public val FRAME_flpdth17: Int = 120

        public val FRAME_flpdth18: Int = 121

        public val FRAME_flpdth19: Int = 122

        public val FRAME_flpdth20: Int = 123

        public val FRAME_flpdth21: Int = 124

        public val FRAME_flpdth22: Int = 125

        public val FRAME_flpdth23: Int = 126

        public val FRAME_flpdth24: Int = 127

        public val FRAME_flpdth25: Int = 128

        public val FRAME_flpdth26: Int = 129

        public val FRAME_flpdth27: Int = 130

        public val FRAME_flpdth28: Int = 131

        public val FRAME_flpdth29: Int = 132

        public val FRAME_flpdth30: Int = 133

        public val FRAME_flpdth31: Int = 134

        public val FRAME_flpdth32: Int = 135

        public val FRAME_flpdth33: Int = 136

        public val FRAME_flpdth34: Int = 137

        public val FRAME_flpdth35: Int = 138

        public val FRAME_flpdth36: Int = 139

        public val FRAME_flpdth37: Int = 140

        public val FRAME_flpdth38: Int = 141

        public val FRAME_flpdth39: Int = 142

        public val FRAME_flpdth40: Int = 143

        public val FRAME_flpdth41: Int = 144

        public val FRAME_flpdth42: Int = 145

        public val FRAME_flpdth43: Int = 146

        public val FRAME_flpdth44: Int = 147

        public val FRAME_flpdth45: Int = 148

        public val FRAME_flpdth46: Int = 149

        public val FRAME_flpdth47: Int = 150

        public val FRAME_flpdth48: Int = 151

        public val FRAME_flpdth49: Int = 152

        public val FRAME_flpdth50: Int = 153

        public val FRAME_flpdth51: Int = 154

        public val FRAME_flpdth52: Int = 155

        public val FRAME_flpdth53: Int = 156

        public val FRAME_flpdth54: Int = 157

        public val FRAME_flpdth55: Int = 158

        public val FRAME_flpdth56: Int = 159

        public val MODEL_SCALE: Float = 1.000000.toFloat()

        var sound_chomp: Int = 0

        var sound_attack: Int = 0

        var sound_pain1: Int = 0

        var sound_pain2: Int = 0

        var sound_death: Int = 0

        var sound_idle: Int = 0

        var sound_search: Int = 0

        var sound_sight: Int = 0

        var flipper_frames_stand = array<mframe_t>(mframe_t(GameAI.ai_stand, 0, null))

        var flipper_move_stand = mmove_t(FRAME_flphor01, FRAME_flphor01, flipper_frames_stand, null)

        var flipper_stand: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flipper_stand"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = flipper_move_stand
                return true
            }
        }

        public val FLIPPER_RUN_SPEED: Int = 24

        var flipper_frames_run = array<mframe_t>(mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), // 6
                mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), // 10

                mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), // 20

                mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null), mframe_t(GameAI.ai_run, FLIPPER_RUN_SPEED, null) // 29
        )

        var flipper_move_run_loop = mmove_t(FRAME_flpver06, FRAME_flpver29, flipper_frames_run, null)

        var flipper_run_loop: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flipper_run_loop"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = flipper_move_run_loop
                return true
            }
        }

        var flipper_frames_run_start = array<mframe_t>(mframe_t(GameAI.ai_run, 8, null), mframe_t(GameAI.ai_run, 8, null), mframe_t(GameAI.ai_run, 8, null), mframe_t(GameAI.ai_run, 8, null), mframe_t(GameAI.ai_run, 8, null), mframe_t(GameAI.ai_run, 8, null))

        var flipper_move_run_start = mmove_t(FRAME_flpver01, FRAME_flpver06, flipper_frames_run_start, flipper_run_loop)

        var flipper_run: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flipper_run"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = flipper_move_run_start
                return true
            }
        }

        /* Standard Swimming */
        var flipper_frames_walk = array<mframe_t>(mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null))

        var flipper_move_walk = mmove_t(FRAME_flphor01, FRAME_flphor24, flipper_frames_walk, null)

        var flipper_walk: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flipper_walk"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = flipper_move_walk
                return true
            }
        }

        var flipper_frames_start_run = array<mframe_t>(mframe_t(GameAI.ai_run, 8, null), mframe_t(GameAI.ai_run, 8, null), mframe_t(GameAI.ai_run, 8, null), mframe_t(GameAI.ai_run, 8, null), mframe_t(GameAI.ai_run, 8, flipper_run))

        var flipper_move_start_run = mmove_t(FRAME_flphor01, FRAME_flphor05, flipper_frames_start_run, null)

        var flipper_start_run: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flipper_start_run"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = flipper_move_start_run
                return true
            }
        }

        var flipper_frames_pain2 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var flipper_move_pain2 = mmove_t(FRAME_flppn101, FRAME_flppn105, flipper_frames_pain2, flipper_run)

        var flipper_frames_pain1 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var flipper_move_pain1 = mmove_t(FRAME_flppn201, FRAME_flppn205, flipper_frames_pain1, flipper_run)

        var flipper_bite: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flipper_bite"
            }

            public fun think(self: edict_t): Boolean {
                val aim = floatArray(0.0, 0.0, 0.0)

                Math3D.VectorSet(aim, Defines.MELEE_DISTANCE, 0, 0)
                GameWeapon.fire_hit(self, aim, 5, 0)
                return true
            }
        }

        var flipper_preattack: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flipper_preattack"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_chomp, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var flipper_frames_attack = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, flipper_preattack), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, flipper_bite), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, flipper_bite), mframe_t(GameAI.ai_charge, 0, null))

        var flipper_move_attack = mmove_t(FRAME_flpbit01, FRAME_flpbit20, flipper_frames_attack, flipper_run)

        var flipper_melee: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flipper_melee"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = flipper_move_attack
                return true
            }
        }

        var flipper_pain: EntPainAdapter = object : EntPainAdapter() {
            public fun getID(): String {
                return "flipper_pain"
            }

            public fun pain(self: edict_t, other: edict_t, kick: Float, damage: Int) {
                val n: Int

                if (self.health < (self.max_health / 2))
                    self.s.skinnum = 1

                if (GameBase.level.time < self.pain_debounce_time)
                    return

                self.pain_debounce_time = GameBase.level.time + 3

                if (GameBase.skill.value == 3)
                    return  // no pain anims in nightmare

                n = (Lib.rand() + 1) % 2
                if (n == 0) {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain1, 1, Defines.ATTN_NORM, 0)
                    self.monsterinfo.currentmove = flipper_move_pain1
                } else {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain2, 1, Defines.ATTN_NORM, 0)
                    self.monsterinfo.currentmove = flipper_move_pain2
                }
                return
            }
        }

        var flipper_dead: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flipper_dead"
            }

            public fun think(self: edict_t): Boolean {
                Math3D.VectorSet(self.mins, -16, -16, -24)
                Math3D.VectorSet(self.maxs, 16, 16, -8)
                self.movetype = Defines.MOVETYPE_TOSS
                self.svflags = self.svflags or Defines.SVF_DEADMONSTER
                self.nextthink = 0
                GameBase.gi.linkentity(self)
                return true
            }
        }

        var flipper_frames_death = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var flipper_move_death = mmove_t(FRAME_flpdth01, FRAME_flpdth56, flipper_frames_death, flipper_dead)

        var flipper_sight: EntInteractAdapter = object : EntInteractAdapter() {
            public fun getID(): String {
                return "flipper_sight"
            }

            public fun interact(self: edict_t, other: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_sight, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var flipper_die: EntDieAdapter = object : EntDieAdapter() {
            public fun getID(): String {
                return "flipper_die"
            }

            public fun die(self: edict_t, inflictor: edict_t, attacker: edict_t, damage: Int, point: FloatArray) {
                var n: Int

                //	check for gib
                if (self.health <= self.gib_health) {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("misc/udeath.wav"), 1, Defines.ATTN_NORM, 0)
                    run {
                        n = 0
                        while (n < 2) {
                            GameMisc.ThrowGib(self, "models/objects/gibs/bone/tris.md2", damage, Defines.GIB_ORGANIC)
                            n++
                        }
                    }
                    run {
                        n = 0
                        while (n < 2) {
                            GameMisc.ThrowGib(self, "models/objects/gibs/sm_meat/tris.md2", damage, Defines.GIB_ORGANIC)
                            n++
                        }
                    }
                    GameMisc.ThrowHead(self, "models/objects/gibs/sm_meat/tris.md2", damage, Defines.GIB_ORGANIC)
                    self.deadflag = Defines.DEAD_DEAD
                    return
                }

                if (self.deadflag == Defines.DEAD_DEAD)
                    return

                //	regular death
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_death, 1, Defines.ATTN_NORM, 0)
                self.deadflag = Defines.DEAD_DEAD
                self.takedamage = Defines.DAMAGE_YES
                self.monsterinfo.currentmove = flipper_move_death
            }
        }

        /*
     * QUAKED monster_flipper (1 .5 0) (-16 -16 -24) (16 16 32) Ambush
     * Trigger_Spawn Sight
     */
        public fun SP_monster_flipper(self: edict_t) {
            if (GameBase.deathmatch.value != 0) {
                GameUtil.G_FreeEdict(self)
                return
            }

            sound_pain1 = GameBase.gi.soundindex("flipper/flppain1.wav")
            sound_pain2 = GameBase.gi.soundindex("flipper/flppain2.wav")
            sound_death = GameBase.gi.soundindex("flipper/flpdeth1.wav")
            sound_chomp = GameBase.gi.soundindex("flipper/flpatck1.wav")
            sound_attack = GameBase.gi.soundindex("flipper/flpatck2.wav")
            sound_idle = GameBase.gi.soundindex("flipper/flpidle1.wav")
            sound_search = GameBase.gi.soundindex("flipper/flpsrch1.wav")
            sound_sight = GameBase.gi.soundindex("flipper/flpsght1.wav")

            self.movetype = Defines.MOVETYPE_STEP
            self.solid = Defines.SOLID_BBOX
            self.s.modelindex = GameBase.gi.modelindex("models/monsters/flipper/tris.md2")
            Math3D.VectorSet(self.mins, -16, -16, 0)
            Math3D.VectorSet(self.maxs, 16, 16, 32)

            self.health = 50
            self.gib_health = -30
            self.mass = 100

            self.pain = flipper_pain
            self.die = flipper_die

            self.monsterinfo.stand = flipper_stand
            self.monsterinfo.walk = flipper_walk
            self.monsterinfo.run = flipper_start_run
            self.monsterinfo.melee = flipper_melee
            self.monsterinfo.sight = flipper_sight

            GameBase.gi.linkentity(self)

            self.monsterinfo.currentmove = flipper_move_stand
            self.monsterinfo.scale = MODEL_SCALE

            GameAI.swimmonster_start.think(self)
        }
    }
}