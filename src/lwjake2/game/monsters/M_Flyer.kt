/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package lwjake2.game.monsters

import lwjake2.Defines
import lwjake2.game.EntDieAdapter
import lwjake2.game.EntInteractAdapter
import lwjake2.game.EntPainAdapter
import lwjake2.game.EntThinkAdapter
import lwjake2.game.GameAI
import lwjake2.game.GameBase
import lwjake2.game.GameMisc
import lwjake2.game.GameUtil
import lwjake2.game.GameWeapon
import lwjake2.game.Monster
import lwjake2.game.edict_t
import lwjake2.game.mframe_t
import lwjake2.game.mmove_t
import lwjake2.game.monsters.M_Flash
import lwjake2.util.Lib
import lwjake2.util.Math3D

public class M_Flyer {
    companion object {
        //	This file generated by ModelGen - Do NOT Modify

        public val ACTION_nothing: Int = 0

        public val ACTION_attack1: Int = 1

        public val ACTION_attack2: Int = 2

        public val ACTION_run: Int = 3

        public val ACTION_walk: Int = 4

        public val FRAME_start01: Int = 0

        public val FRAME_start02: Int = 1

        public val FRAME_start03: Int = 2

        public val FRAME_start04: Int = 3

        public val FRAME_start05: Int = 4

        public val FRAME_start06: Int = 5

        public val FRAME_stop01: Int = 6

        public val FRAME_stop02: Int = 7

        public val FRAME_stop03: Int = 8

        public val FRAME_stop04: Int = 9

        public val FRAME_stop05: Int = 10

        public val FRAME_stop06: Int = 11

        public val FRAME_stop07: Int = 12

        public val FRAME_stand01: Int = 13

        public val FRAME_stand02: Int = 14

        public val FRAME_stand03: Int = 15

        public val FRAME_stand04: Int = 16

        public val FRAME_stand05: Int = 17

        public val FRAME_stand06: Int = 18

        public val FRAME_stand07: Int = 19

        public val FRAME_stand08: Int = 20

        public val FRAME_stand09: Int = 21

        public val FRAME_stand10: Int = 22

        public val FRAME_stand11: Int = 23

        public val FRAME_stand12: Int = 24

        public val FRAME_stand13: Int = 25

        public val FRAME_stand14: Int = 26

        public val FRAME_stand15: Int = 27

        public val FRAME_stand16: Int = 28

        public val FRAME_stand17: Int = 29

        public val FRAME_stand18: Int = 30

        public val FRAME_stand19: Int = 31

        public val FRAME_stand20: Int = 32

        public val FRAME_stand21: Int = 33

        public val FRAME_stand22: Int = 34

        public val FRAME_stand23: Int = 35

        public val FRAME_stand24: Int = 36

        public val FRAME_stand25: Int = 37

        public val FRAME_stand26: Int = 38

        public val FRAME_stand27: Int = 39

        public val FRAME_stand28: Int = 40

        public val FRAME_stand29: Int = 41

        public val FRAME_stand30: Int = 42

        public val FRAME_stand31: Int = 43

        public val FRAME_stand32: Int = 44

        public val FRAME_stand33: Int = 45

        public val FRAME_stand34: Int = 46

        public val FRAME_stand35: Int = 47

        public val FRAME_stand36: Int = 48

        public val FRAME_stand37: Int = 49

        public val FRAME_stand38: Int = 50

        public val FRAME_stand39: Int = 51

        public val FRAME_stand40: Int = 52

        public val FRAME_stand41: Int = 53

        public val FRAME_stand42: Int = 54

        public val FRAME_stand43: Int = 55

        public val FRAME_stand44: Int = 56

        public val FRAME_stand45: Int = 57

        public val FRAME_attak101: Int = 58

        public val FRAME_attak102: Int = 59

        public val FRAME_attak103: Int = 60

        public val FRAME_attak104: Int = 61

        public val FRAME_attak105: Int = 62

        public val FRAME_attak106: Int = 63

        public val FRAME_attak107: Int = 64

        public val FRAME_attak108: Int = 65

        public val FRAME_attak109: Int = 66

        public val FRAME_attak110: Int = 67

        public val FRAME_attak111: Int = 68

        public val FRAME_attak112: Int = 69

        public val FRAME_attak113: Int = 70

        public val FRAME_attak114: Int = 71

        public val FRAME_attak115: Int = 72

        public val FRAME_attak116: Int = 73

        public val FRAME_attak117: Int = 74

        public val FRAME_attak118: Int = 75

        public val FRAME_attak119: Int = 76

        public val FRAME_attak120: Int = 77

        public val FRAME_attak121: Int = 78

        public val FRAME_attak201: Int = 79

        public val FRAME_attak202: Int = 80

        public val FRAME_attak203: Int = 81

        public val FRAME_attak204: Int = 82

        public val FRAME_attak205: Int = 83

        public val FRAME_attak206: Int = 84

        public val FRAME_attak207: Int = 85

        public val FRAME_attak208: Int = 86

        public val FRAME_attak209: Int = 87

        public val FRAME_attak210: Int = 88

        public val FRAME_attak211: Int = 89

        public val FRAME_attak212: Int = 90

        public val FRAME_attak213: Int = 91

        public val FRAME_attak214: Int = 92

        public val FRAME_attak215: Int = 93

        public val FRAME_attak216: Int = 94

        public val FRAME_attak217: Int = 95

        public val FRAME_bankl01: Int = 96

        public val FRAME_bankl02: Int = 97

        public val FRAME_bankl03: Int = 98

        public val FRAME_bankl04: Int = 99

        public val FRAME_bankl05: Int = 100

        public val FRAME_bankl06: Int = 101

        public val FRAME_bankl07: Int = 102

        public val FRAME_bankr01: Int = 103

        public val FRAME_bankr02: Int = 104

        public val FRAME_bankr03: Int = 105

        public val FRAME_bankr04: Int = 106

        public val FRAME_bankr05: Int = 107

        public val FRAME_bankr06: Int = 108

        public val FRAME_bankr07: Int = 109

        public val FRAME_rollf01: Int = 110

        public val FRAME_rollf02: Int = 111

        public val FRAME_rollf03: Int = 112

        public val FRAME_rollf04: Int = 113

        public val FRAME_rollf05: Int = 114

        public val FRAME_rollf06: Int = 115

        public val FRAME_rollf07: Int = 116

        public val FRAME_rollf08: Int = 117

        public val FRAME_rollf09: Int = 118

        public val FRAME_rollr01: Int = 119

        public val FRAME_rollr02: Int = 120

        public val FRAME_rollr03: Int = 121

        public val FRAME_rollr04: Int = 122

        public val FRAME_rollr05: Int = 123

        public val FRAME_rollr06: Int = 124

        public val FRAME_rollr07: Int = 125

        public val FRAME_rollr08: Int = 126

        public val FRAME_rollr09: Int = 127

        public val FRAME_defens01: Int = 128

        public val FRAME_defens02: Int = 129

        public val FRAME_defens03: Int = 130

        public val FRAME_defens04: Int = 131

        public val FRAME_defens05: Int = 132

        public val FRAME_defens06: Int = 133

        public val FRAME_pain101: Int = 134

        public val FRAME_pain102: Int = 135

        public val FRAME_pain103: Int = 136

        public val FRAME_pain104: Int = 137

        public val FRAME_pain105: Int = 138

        public val FRAME_pain106: Int = 139

        public val FRAME_pain107: Int = 140

        public val FRAME_pain108: Int = 141

        public val FRAME_pain109: Int = 142

        public val FRAME_pain201: Int = 143

        public val FRAME_pain202: Int = 144

        public val FRAME_pain203: Int = 145

        public val FRAME_pain204: Int = 146

        public val FRAME_pain301: Int = 147

        public val FRAME_pain302: Int = 148

        public val FRAME_pain303: Int = 149

        public val FRAME_pain304: Int = 150

        public val MODEL_SCALE: Float = 1.000000.toFloat()

        var nextmove: Int = 0 // Used for start/stop frames

        var sound_sight: Int = 0

        var sound_idle: Int = 0

        var sound_pain1: Int = 0

        var sound_pain2: Int = 0

        var sound_slash: Int = 0

        var sound_sproing: Int = 0

        var sound_die: Int = 0

        public var flyer_sight: EntInteractAdapter = object : EntInteractAdapter() {
            public fun getID(): String {
                return "flyer_sight"
            }

            public fun interact(self: edict_t, other: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_sight, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var flyer_idle: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_idle"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_idle, 1, Defines.ATTN_IDLE, 0)
                return true
            }
        }

        var flyer_pop_blades: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_pop_blades"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_sproing, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var flyer_frames_stand = array<mframe_t>(mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null))

        var flyer_move_stand = mmove_t(FRAME_stand01, FRAME_stand45, flyer_frames_stand, null)

        var flyer_frames_walk = array<mframe_t>(mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null))

        var flyer_move_walk = mmove_t(FRAME_stand01, FRAME_stand45, flyer_frames_walk, null)

        var flyer_frames_run = array<mframe_t>(mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 10, null))

        var flyer_move_run = mmove_t(FRAME_stand01, FRAME_stand45, flyer_frames_run, null)

        var flyer_run: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_run"
            }

            public fun think(self: edict_t): Boolean {
                if ((self.monsterinfo.aiflags and Defines.AI_STAND_GROUND) != 0)
                    self.monsterinfo.currentmove = flyer_move_stand
                else
                    self.monsterinfo.currentmove = flyer_move_run
                return true
            }
        }

        var flyer_walk: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_walk"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = flyer_move_walk
                return true
            }
        }

        var flyer_stand: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_stand"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = flyer_move_stand
                return true
            }
        }

        var flyer_nextmove: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_nextmove"
            }

            public fun think(self: edict_t): Boolean {
                if (nextmove == ACTION_attack1)
                    self.monsterinfo.currentmove = flyer_move_start_melee
                else if (nextmove == ACTION_attack2)
                    self.monsterinfo.currentmove = flyer_move_attack2
                else if (nextmove == ACTION_run)
                    self.monsterinfo.currentmove = flyer_move_run
                return true
            }
        }

        var flyer_frames_start = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, flyer_nextmove))

        var flyer_move_start = mmove_t(FRAME_start01, FRAME_start06, flyer_frames_start, null)

        var flyer_frames_stop = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, flyer_nextmove))

        var flyer_move_stop = mmove_t(FRAME_stop01, FRAME_stop07, flyer_frames_stop, null)

        var flyer_stop: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_stop"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = flyer_move_stop
                return true
            }
        }

        var flyer_start: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_start"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = flyer_move_start
                return true
            }
        }

        var flyer_frames_rollright = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var flyer_move_rollright = mmove_t(FRAME_rollr01, FRAME_rollr09, flyer_frames_rollright, null)

        var flyer_frames_rollleft = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var flyer_move_rollleft = mmove_t(FRAME_rollf01, FRAME_rollf09, flyer_frames_rollleft, null)

        var flyer_frames_pain3 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var flyer_move_pain3 = mmove_t(FRAME_pain301, FRAME_pain304, flyer_frames_pain3, flyer_run)

        var flyer_frames_pain2 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var flyer_move_pain2 = mmove_t(FRAME_pain201, FRAME_pain204, flyer_frames_pain2, flyer_run)

        var flyer_frames_pain1 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var flyer_move_pain1 = mmove_t(FRAME_pain101, FRAME_pain109, flyer_frames_pain1, flyer_run)

        var flyer_frames_defense = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), // Hold this frame
                mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var flyer_move_defense = mmove_t(FRAME_defens01, FRAME_defens06, flyer_frames_defense, null)

        var flyer_frames_bankright = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var flyer_move_bankright = mmove_t(FRAME_bankr01, FRAME_bankr07, flyer_frames_bankright, null)

        var flyer_frames_bankleft = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var flyer_move_bankleft = mmove_t(FRAME_bankl01, FRAME_bankl07, flyer_frames_bankleft, null)

        var flyer_fireleft: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_fireleft"
            }

            public fun think(self: edict_t): Boolean {
                flyer_fire(self, Defines.MZ2_FLYER_BLASTER_1)
                return true
            }
        }

        var flyer_fireright: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_fireright"
            }

            public fun think(self: edict_t): Boolean {
                flyer_fire(self, Defines.MZ2_FLYER_BLASTER_2)
                return true
            }
        }

        var flyer_frames_attack2 = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, -10, flyer_fireleft), // left gun
                mframe_t(GameAI.ai_charge, -10, flyer_fireright), // right gun
                mframe_t(GameAI.ai_charge, -10, flyer_fireleft), // left gun
                mframe_t(GameAI.ai_charge, -10, flyer_fireright), // right gun
                mframe_t(GameAI.ai_charge, -10, flyer_fireleft), // left gun
                mframe_t(GameAI.ai_charge, -10, flyer_fireright), // right gun
                mframe_t(GameAI.ai_charge, -10, flyer_fireleft), // left gun
                mframe_t(GameAI.ai_charge, -10, flyer_fireright), // right gun
                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null))

        var flyer_move_attack2 = mmove_t(FRAME_attak201, FRAME_attak217, flyer_frames_attack2, flyer_run)

        var flyer_slash_left: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_slash_left"
            }

            public fun think(self: edict_t): Boolean {
                val aim = floatArray(0.0, 0.0, 0.0)

                Math3D.VectorSet(aim, Defines.MELEE_DISTANCE, self.mins[0], 0)
                GameWeapon.fire_hit(self, aim, 5, 0)
                GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_slash, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var flyer_slash_right: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_slash_right"
            }

            public fun think(self: edict_t): Boolean {
                val aim = floatArray(0.0, 0.0, 0.0)

                Math3D.VectorSet(aim, Defines.MELEE_DISTANCE, self.maxs[0], 0)
                GameWeapon.fire_hit(self, aim, 5, 0)
                GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_slash, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var flyer_loop_melee: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_loop_melee"
            }

            public fun think(self: edict_t): Boolean {
                /*
             * if (random() <= 0.5) self.monsterinfo.currentmove =
             * flyer_move_attack1; else
             */
                self.monsterinfo.currentmove = flyer_move_loop_melee
                return true
            }
        }

        var flyer_frames_start_melee = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, flyer_pop_blades), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null))

        var flyer_move_start_melee = mmove_t(FRAME_attak101, FRAME_attak106, flyer_frames_start_melee, flyer_loop_melee)

        var flyer_frames_end_melee = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null))

        var flyer_move_end_melee = mmove_t(FRAME_attak119, FRAME_attak121, flyer_frames_end_melee, flyer_run)

        var flyer_frames_loop_melee = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), // Loop Start
                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, flyer_slash_left), // Left Wing Strike
                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, flyer_slash_right), // Right Wing Strike
                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null) // Loop Ends
        )

        var flyer_check_melee: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_check_melee"
            }

            public fun think(self: edict_t): Boolean {
                if (GameUtil.range(self, self.enemy) == Defines.RANGE_MELEE)
                    if (Lib.random() <= 0.8)
                        self.monsterinfo.currentmove = flyer_move_loop_melee
                    else
                        self.monsterinfo.currentmove = flyer_move_end_melee
                else
                    self.monsterinfo.currentmove = flyer_move_end_melee
                return true
            }
        }

        var flyer_move_loop_melee = mmove_t(FRAME_attak107, FRAME_attak118, flyer_frames_loop_melee, flyer_check_melee)

        var flyer_attack: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_attack"
            }

            public fun think(self: edict_t): Boolean {
                /*
             * if (random() <= 0.5) self.monsterinfo.currentmove =
             * flyer_move_attack1; else
             */
                self.monsterinfo.currentmove = flyer_move_attack2

                return true
            }
        }

        var flyer_setstart: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_setstart"
            }

            public fun think(self: edict_t): Boolean {
                nextmove = ACTION_run
                self.monsterinfo.currentmove = flyer_move_start
                return true
            }
        }

        var flyer_melee: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "flyer_melee"
            }

            public fun think(self: edict_t): Boolean {
                //			flyer.nextmove = ACTION_attack1;
                //	 self.monsterinfo.currentmove = flyer_move_stop;
                self.monsterinfo.currentmove = flyer_move_start_melee
                return true
            }
        }

        var flyer_pain: EntPainAdapter = object : EntPainAdapter() {
            public fun getID(): String {
                return "flyer_pain"
            }

            public fun pain(self: edict_t, other: edict_t, kick: Float, damage: Int) {
                val n: Int

                if (self.health < (self.max_health / 2))
                    self.s.skinnum = 1

                if (GameBase.level.time < self.pain_debounce_time)
                    return

                self.pain_debounce_time = GameBase.level.time + 3
                if (GameBase.skill.value == 3)
                    return  // no pain anims in nightmare

                n = Lib.rand() % 3
                if (n == 0) {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain1, 1, Defines.ATTN_NORM, 0)
                    self.monsterinfo.currentmove = flyer_move_pain1
                } else if (n == 1) {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain2, 1, Defines.ATTN_NORM, 0)
                    self.monsterinfo.currentmove = flyer_move_pain2
                } else {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain1, 1, Defines.ATTN_NORM, 0)
                    self.monsterinfo.currentmove = flyer_move_pain3
                }

            }
        }

        var flyer_die: EntDieAdapter = object : EntDieAdapter() {
            public fun getID(): String {
                return "flyer_die"
            }

            public fun die(self: edict_t, inflictor: edict_t, attacker: edict_t, damage: Int, point: FloatArray) {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_die, 1, Defines.ATTN_NORM, 0)
                GameMisc.BecomeExplosion1(self)
            }
        }

        fun flyer_fire(self: edict_t, flash_number: Int) {
            val start = floatArray(0.0, 0.0, 0.0)

            val forward = floatArray(0.0, 0.0, 0.0)
            val right = floatArray(0.0, 0.0, 0.0)
            val end = floatArray(0.0, 0.0, 0.0)
            val dir = floatArray(0.0, 0.0, 0.0)
            val effect: Int

            if ((self.s.frame == FRAME_attak204) || (self.s.frame == FRAME_attak207) || (self.s.frame == FRAME_attak210))
                effect = Defines.EF_HYPERBLASTER
            else
                effect = 0
            Math3D.AngleVectors(self.s.angles, forward, right, null)
            Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start)

            Math3D.VectorCopy(self.enemy.s.origin, end)
            end[2] += self.enemy.viewheight
            Math3D.VectorSubtract(end, start, dir)

            Monster.monster_fire_blaster(self, start, dir, 1, 1000, flash_number, effect)
        }

        /*
     * QUAKED monster_flyer (1 .5 0) (-16 -16 -24) (16 16 32) Ambush
     * Trigger_Spawn Sight
     */
        public fun SP_monster_flyer(self: edict_t) {
            if (GameBase.deathmatch.value != 0) {
                GameUtil.G_FreeEdict(self)
                return
            }

            // fix a map bug in jail5.bsp
            if (GameBase.level.mapname.equalsIgnoreCase("jail5") && (self.s.origin[2] == -104)) {
                self.targetname = self.target
                self.target = null
            }

            sound_sight = GameBase.gi.soundindex("flyer/flysght1.wav")
            sound_idle = GameBase.gi.soundindex("flyer/flysrch1.wav")
            sound_pain1 = GameBase.gi.soundindex("flyer/flypain1.wav")
            sound_pain2 = GameBase.gi.soundindex("flyer/flypain2.wav")
            sound_slash = GameBase.gi.soundindex("flyer/flyatck2.wav")
            sound_sproing = GameBase.gi.soundindex("flyer/flyatck1.wav")
            sound_die = GameBase.gi.soundindex("flyer/flydeth1.wav")

            GameBase.gi.soundindex("flyer/flyatck3.wav")

            self.s.modelindex = GameBase.gi.modelindex("models/monsters/flyer/tris.md2")
            Math3D.VectorSet(self.mins, -16, -16, -24)
            Math3D.VectorSet(self.maxs, 16, 16, 32)
            self.movetype = Defines.MOVETYPE_STEP
            self.solid = Defines.SOLID_BBOX

            self.s.sound = GameBase.gi.soundindex("flyer/flyidle1.wav")

            self.health = 50
            self.mass = 50

            self.pain = flyer_pain
            self.die = flyer_die

            self.monsterinfo.stand = flyer_stand
            self.monsterinfo.walk = flyer_walk
            self.monsterinfo.run = flyer_run
            self.monsterinfo.attack = flyer_attack
            self.monsterinfo.melee = flyer_melee
            self.monsterinfo.sight = flyer_sight
            self.monsterinfo.idle = flyer_idle

            GameBase.gi.linkentity(self)

            self.monsterinfo.currentmove = flyer_move_stand
            self.monsterinfo.scale = MODEL_SCALE

            GameAI.flymonster_start.think(self)
        }
    }
}