/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package lwjake2.game.monsters

import lwjake2.Defines
import lwjake2.client.M
import lwjake2.game.EntDieAdapter
import lwjake2.game.EntInteractAdapter
import lwjake2.game.EntPainAdapter
import lwjake2.game.EntThinkAdapter
import lwjake2.game.EntTouchAdapter
import lwjake2.game.GameAI
import lwjake2.game.GameBase
import lwjake2.game.GameCombat
import lwjake2.game.GameMisc
import lwjake2.game.GameUtil
import lwjake2.game.GameWeapon
import lwjake2.game.cplane_t
import lwjake2.game.csurface_t
import lwjake2.game.edict_t
import lwjake2.game.mframe_t
import lwjake2.game.mmove_t
import lwjake2.util.Lib
import lwjake2.util.Math3D

public class M_Mutant {
    companion object {

        //	This file generated by ModelGen - Do NOT Modify

        public val FRAME_attack01: Int = 0

        public val FRAME_attack02: Int = 1

        public val FRAME_attack03: Int = 2

        public val FRAME_attack04: Int = 3

        public val FRAME_attack05: Int = 4

        public val FRAME_attack06: Int = 5

        public val FRAME_attack07: Int = 6

        public val FRAME_attack08: Int = 7

        public val FRAME_attack09: Int = 8

        public val FRAME_attack10: Int = 9

        public val FRAME_attack11: Int = 10

        public val FRAME_attack12: Int = 11

        public val FRAME_attack13: Int = 12

        public val FRAME_attack14: Int = 13

        public val FRAME_attack15: Int = 14

        public val FRAME_death101: Int = 15

        public val FRAME_death102: Int = 16

        public val FRAME_death103: Int = 17

        public val FRAME_death104: Int = 18

        public val FRAME_death105: Int = 19

        public val FRAME_death106: Int = 20

        public val FRAME_death107: Int = 21

        public val FRAME_death108: Int = 22

        public val FRAME_death109: Int = 23

        public val FRAME_death201: Int = 24

        public val FRAME_death202: Int = 25

        public val FRAME_death203: Int = 26

        public val FRAME_death204: Int = 27

        public val FRAME_death205: Int = 28

        public val FRAME_death206: Int = 29

        public val FRAME_death207: Int = 30

        public val FRAME_death208: Int = 31

        public val FRAME_death209: Int = 32

        public val FRAME_death210: Int = 33

        public val FRAME_pain101: Int = 34

        public val FRAME_pain102: Int = 35

        public val FRAME_pain103: Int = 36

        public val FRAME_pain104: Int = 37

        public val FRAME_pain105: Int = 38

        public val FRAME_pain201: Int = 39

        public val FRAME_pain202: Int = 40

        public val FRAME_pain203: Int = 41

        public val FRAME_pain204: Int = 42

        public val FRAME_pain205: Int = 43

        public val FRAME_pain206: Int = 44

        public val FRAME_pain301: Int = 45

        public val FRAME_pain302: Int = 46

        public val FRAME_pain303: Int = 47

        public val FRAME_pain304: Int = 48

        public val FRAME_pain305: Int = 49

        public val FRAME_pain306: Int = 50

        public val FRAME_pain307: Int = 51

        public val FRAME_pain308: Int = 52

        public val FRAME_pain309: Int = 53

        public val FRAME_pain310: Int = 54

        public val FRAME_pain311: Int = 55

        public val FRAME_run03: Int = 56

        public val FRAME_run04: Int = 57

        public val FRAME_run05: Int = 58

        public val FRAME_run06: Int = 59

        public val FRAME_run07: Int = 60

        public val FRAME_run08: Int = 61

        public val FRAME_stand101: Int = 62

        public val FRAME_stand102: Int = 63

        public val FRAME_stand103: Int = 64

        public val FRAME_stand104: Int = 65

        public val FRAME_stand105: Int = 66

        public val FRAME_stand106: Int = 67

        public val FRAME_stand107: Int = 68

        public val FRAME_stand108: Int = 69

        public val FRAME_stand109: Int = 70

        public val FRAME_stand110: Int = 71

        public val FRAME_stand111: Int = 72

        public val FRAME_stand112: Int = 73

        public val FRAME_stand113: Int = 74

        public val FRAME_stand114: Int = 75

        public val FRAME_stand115: Int = 76

        public val FRAME_stand116: Int = 77

        public val FRAME_stand117: Int = 78

        public val FRAME_stand118: Int = 79

        public val FRAME_stand119: Int = 80

        public val FRAME_stand120: Int = 81

        public val FRAME_stand121: Int = 82

        public val FRAME_stand122: Int = 83

        public val FRAME_stand123: Int = 84

        public val FRAME_stand124: Int = 85

        public val FRAME_stand125: Int = 86

        public val FRAME_stand126: Int = 87

        public val FRAME_stand127: Int = 88

        public val FRAME_stand128: Int = 89

        public val FRAME_stand129: Int = 90

        public val FRAME_stand130: Int = 91

        public val FRAME_stand131: Int = 92

        public val FRAME_stand132: Int = 93

        public val FRAME_stand133: Int = 94

        public val FRAME_stand134: Int = 95

        public val FRAME_stand135: Int = 96

        public val FRAME_stand136: Int = 97

        public val FRAME_stand137: Int = 98

        public val FRAME_stand138: Int = 99

        public val FRAME_stand139: Int = 100

        public val FRAME_stand140: Int = 101

        public val FRAME_stand141: Int = 102

        public val FRAME_stand142: Int = 103

        public val FRAME_stand143: Int = 104

        public val FRAME_stand144: Int = 105

        public val FRAME_stand145: Int = 106

        public val FRAME_stand146: Int = 107

        public val FRAME_stand147: Int = 108

        public val FRAME_stand148: Int = 109

        public val FRAME_stand149: Int = 110

        public val FRAME_stand150: Int = 111

        public val FRAME_stand151: Int = 112

        public val FRAME_stand152: Int = 113

        public val FRAME_stand153: Int = 114

        public val FRAME_stand154: Int = 115

        public val FRAME_stand155: Int = 116

        public val FRAME_stand156: Int = 117

        public val FRAME_stand157: Int = 118

        public val FRAME_stand158: Int = 119

        public val FRAME_stand159: Int = 120

        public val FRAME_stand160: Int = 121

        public val FRAME_stand161: Int = 122

        public val FRAME_stand162: Int = 123

        public val FRAME_stand163: Int = 124

        public val FRAME_stand164: Int = 125

        public val FRAME_walk01: Int = 126

        public val FRAME_walk02: Int = 127

        public val FRAME_walk03: Int = 128

        public val FRAME_walk04: Int = 129

        public val FRAME_walk05: Int = 130

        public val FRAME_walk06: Int = 131

        public val FRAME_walk07: Int = 132

        public val FRAME_walk08: Int = 133

        public val FRAME_walk09: Int = 134

        public val FRAME_walk10: Int = 135

        public val FRAME_walk11: Int = 136

        public val FRAME_walk12: Int = 137

        public val FRAME_walk13: Int = 138

        public val FRAME_walk14: Int = 139

        public val FRAME_walk15: Int = 140

        public val FRAME_walk16: Int = 141

        public val FRAME_walk17: Int = 142

        public val FRAME_walk18: Int = 143

        public val FRAME_walk19: Int = 144

        public val FRAME_walk20: Int = 145

        public val FRAME_walk21: Int = 146

        public val FRAME_walk22: Int = 147

        public val FRAME_walk23: Int = 148

        public val MODEL_SCALE: Float = 1.000000.toFloat()

        var sound_swing: Int = 0

        var sound_hit: Int = 0

        var sound_hit2: Int = 0

        var sound_death: Int = 0

        var sound_idle: Int = 0

        var sound_pain1: Int = 0

        var sound_pain2: Int = 0

        var sound_sight: Int = 0

        var sound_search: Int = 0

        var sound_step1: Int = 0

        var sound_step2: Int = 0

        var sound_step3: Int = 0

        var sound_thud: Int = 0

        //
        //	SOUNDS
        //
        var mutant_step: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_step"
            }

            public fun think(self: edict_t): Boolean {
                val n: Int
                n = (Lib.rand() + 1) % 3
                if (n == 0)
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_step1, 1, Defines.ATTN_NORM, 0)
                else if (n == 1)
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_step2, 1, Defines.ATTN_NORM, 0)
                else
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_step3, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var mutant_sight: EntInteractAdapter = object : EntInteractAdapter() {
            public fun getID(): String {
                return "mutant_sight"
            }

            public fun interact(self: edict_t, other: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_sight, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var mutant_search: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_search"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_search, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var mutant_swing: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_swing"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_swing, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        //
        //	STAND
        //

        var mutant_frames_stand = array<mframe_t>(mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), // 10)

                mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), // 20)

                mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), // 30)

                mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), // 40)

                mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), // 50)

                mframe_t(GameAI.ai_stand, 0, null))

        var mutant_move_stand = mmove_t(FRAME_stand101, FRAME_stand151, mutant_frames_stand, null)

        var mutant_stand: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_stand"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = mutant_move_stand
                return true
            }
        }

        //
        //	IDLE
        //

        var mutant_idle_loop: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_idle_loop"
            }

            public fun think(self: edict_t): Boolean {
                if (Lib.random() < 0.75)
                    self.monsterinfo.nextframe = FRAME_stand155
                return true
            }
        }

        var mutant_frames_idle = array<mframe_t>(mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), // scratch loop start
                mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, mutant_idle_loop), // scratch loop end
                mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null))

        var mutant_move_idle = mmove_t(FRAME_stand152, FRAME_stand164, mutant_frames_idle, mutant_stand)

        var mutant_idle: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_idle"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = mutant_move_idle
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_idle, 1, Defines.ATTN_IDLE, 0)
                return true
            }
        }

        //
        //	WALK
        //

        var mutant_frames_walk = array<mframe_t>(mframe_t(GameAI.ai_walk, 3, null), mframe_t(GameAI.ai_walk, 1, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 10, null), mframe_t(GameAI.ai_walk, 13, null), mframe_t(GameAI.ai_walk, 10, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 6, null), mframe_t(GameAI.ai_walk, 16, null), mframe_t(GameAI.ai_walk, 15, null), mframe_t(GameAI.ai_walk, 6, null))

        var mutant_move_walk = mmove_t(FRAME_walk05, FRAME_walk16, mutant_frames_walk, null)

        var mutant_walk_loop: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_walk_loop"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = mutant_move_walk
                return true
            }
        }

        var mutant_frames_start_walk = array<mframe_t>(mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, -2, null), mframe_t(GameAI.ai_walk, 1, null))

        var mutant_move_start_walk = mmove_t(FRAME_walk01, FRAME_walk04, mutant_frames_start_walk, mutant_walk_loop)

        var mutant_walk: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_walk"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = mutant_move_start_walk
                return true
            }
        }

        //
        //	RUN
        //

        var mutant_frames_run = array<mframe_t>(mframe_t(GameAI.ai_run, 40, null), mframe_t(GameAI.ai_run, 40, mutant_step), mframe_t(GameAI.ai_run, 24, null), mframe_t(GameAI.ai_run, 5, mutant_step), mframe_t(GameAI.ai_run, 17, null), mframe_t(GameAI.ai_run, 10, null))

        var mutant_move_run = mmove_t(FRAME_run03, FRAME_run08, mutant_frames_run, null)

        var mutant_run: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_run"
            }

            public fun think(self: edict_t): Boolean {
                if ((self.monsterinfo.aiflags and Defines.AI_STAND_GROUND) != 0)
                    self.monsterinfo.currentmove = mutant_move_stand
                else
                    self.monsterinfo.currentmove = mutant_move_run

                return true
            }
        }

        //
        //	MELEE
        //

        var mutant_hit_left: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_hit_left"
            }

            public fun think(self: edict_t): Boolean {
                val aim = floatArray(0.0, 0.0, 0.0)

                Math3D.VectorSet(aim, Defines.MELEE_DISTANCE, self.mins[0], 8)
                if (GameWeapon.fire_hit(self, aim, (10 + (Lib.rand() % 5)), 100))
                    GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_hit, 1, Defines.ATTN_NORM, 0)
                else
                    GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_swing, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var mutant_hit_right: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_hit_right"
            }

            public fun think(self: edict_t): Boolean {
                val aim = floatArray(0.0, 0.0, 0.0)

                Math3D.VectorSet(aim, Defines.MELEE_DISTANCE, self.maxs[0], 8)
                if (GameWeapon.fire_hit(self, aim, (10 + (Lib.rand() % 5)), 100))
                    GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_hit2, 1, Defines.ATTN_NORM, 0)
                else
                    GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_swing, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var mutant_check_refire: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_check_refire"
            }

            public fun think(self: edict_t): Boolean {
                if (null == self.enemy || !self.enemy.inuse || self.enemy.health <= 0)
                    return true

                if (((GameBase.skill.value == 3) && (Lib.random() < 0.5)) || (GameUtil.range(self, self.enemy) == Defines.RANGE_MELEE))
                    self.monsterinfo.nextframe = FRAME_attack09
                return true
            }
        }

        var mutant_frames_attack = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, mutant_hit_left), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, mutant_hit_right), mframe_t(GameAI.ai_charge, 0, mutant_check_refire))

        var mutant_move_attack = mmove_t(FRAME_attack09, FRAME_attack15, mutant_frames_attack, mutant_run)

        var mutant_melee: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_melee"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = mutant_move_attack
                return true
            }
        }

        //
        //	ATTACK
        //

        var mutant_jump_touch: EntTouchAdapter = object : EntTouchAdapter() {
            public fun getID(): String {
                return "mutant_jump_touch"
            }

            public fun touch(self: edict_t, other: edict_t, plane: cplane_t, surf: csurface_t) {
                if (self.health <= 0) {
                    self.touch = null
                    return
                }

                if (other.takedamage != 0) {
                    if (Math3D.VectorLength(self.velocity) > 400) {
                        val point = floatArray(0.0, 0.0, 0.0)
                        val normal = floatArray(0.0, 0.0, 0.0)
                        val damage: Int

                        Math3D.VectorCopy(self.velocity, normal)
                        Math3D.VectorNormalize(normal)
                        Math3D.VectorMA(self.s.origin, self.maxs[0], normal, point)
                        damage = (40 + 10 * Lib.random()) as Int
                        GameCombat.T_Damage(other, self, self, self.velocity, point, normal, damage, damage, 0, Defines.MOD_UNKNOWN)
                    }
                }

                if (!M.M_CheckBottom(self)) {
                    if (self.groundentity != null) {
                        self.monsterinfo.nextframe = FRAME_attack02
                        self.touch = null
                    }
                    return
                }

                self.touch = null
            }
        }

        var mutant_jump_takeoff: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_jump_takeoff"
            }

            public fun think(self: edict_t): Boolean {

                val forward = floatArray(0.0, 0.0, 0.0)

                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_sight, 1, Defines.ATTN_NORM, 0)
                Math3D.AngleVectors(self.s.angles, forward, null, null)
                self.s.origin[2] += 1
                Math3D.VectorScale(forward, 600, self.velocity)
                self.velocity[2] = 250
                self.groundentity = null
                self.monsterinfo.aiflags = self.monsterinfo.aiflags or Defines.AI_DUCKED
                self.monsterinfo.attack_finished = GameBase.level.time + 3
                self.touch = mutant_jump_touch
                return true
            }
        }

        var mutant_check_landing: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_check_landing"
            }

            public fun think(self: edict_t): Boolean {
                if (self.groundentity != null) {
                    GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_thud, 1, Defines.ATTN_NORM, 0)
                    self.monsterinfo.attack_finished = 0
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags and Defines.AI_DUCKED.inv()
                    return true
                }

                if (GameBase.level.time > self.monsterinfo.attack_finished)
                    self.monsterinfo.nextframe = FRAME_attack02
                else
                    self.monsterinfo.nextframe = FRAME_attack05
                return true
            }
        }

        var mutant_frames_jump = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 17, null), mframe_t(GameAI.ai_charge, 15, mutant_jump_takeoff), mframe_t(GameAI.ai_charge, 15, null), mframe_t(GameAI.ai_charge, 15, mutant_check_landing), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 3, null), mframe_t(GameAI.ai_charge, 0, null))

        var mutant_move_jump = mmove_t(FRAME_attack01, FRAME_attack08, mutant_frames_jump, mutant_run)

        var mutant_jump: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_jump"
            }

            public fun think(self: edict_t): Boolean {

                self.monsterinfo.currentmove = mutant_move_jump
                return true
            }
        }

        //
        //	CHECKATTACK
        //
        var mutant_check_melee: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_check_melee"
            }

            public fun think(self: edict_t): Boolean {
                if (GameUtil.range(self, self.enemy) == Defines.RANGE_MELEE)
                    return true
                return false

            }
        }

        var mutant_check_jump: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_check_jump"
            }

            public fun think(self: edict_t): Boolean {

                val v = floatArray(0.0, 0.0, 0.0)
                val distance: Float

                if (self.absmin[2] > (self.enemy.absmin[2] + 0.75 * self.enemy.size[2]))
                    return false

                if (self.absmax[2] < (self.enemy.absmin[2] + 0.25 * self.enemy.size[2]))
                    return false

                v[0] = self.s.origin[0] - self.enemy.s.origin[0]
                v[1] = self.s.origin[1] - self.enemy.s.origin[1]
                v[2] = 0
                distance = Math3D.VectorLength(v)

                if (distance < 100)
                    return false
                if (distance > 100) {
                    if (Lib.random() < 0.9)
                        return false
                }

                return true
            }
        }

        var mutant_checkattack: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_checkattack"
            }

            public fun think(self: edict_t): Boolean {

                if (null == self.enemy || self.enemy.health <= 0)
                    return false

                if (mutant_check_melee.think(self)) {
                    self.monsterinfo.attack_state = Defines.AS_MELEE
                    return true
                }

                if (mutant_check_jump.think(self)) {
                    self.monsterinfo.attack_state = Defines.AS_MISSILE
                    // FIXME play a jump sound here
                    return true
                }

                return false
            }
        }

        //
        //	PAIN
        //

        var mutant_frames_pain1 = array<mframe_t>(mframe_t(GameAI.ai_move, 4, null), mframe_t(GameAI.ai_move, -3, null), mframe_t(GameAI.ai_move, -8, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 5, null))

        var mutant_move_pain1 = mmove_t(FRAME_pain101, FRAME_pain105, mutant_frames_pain1, mutant_run)

        var mutant_frames_pain2 = array<mframe_t>(mframe_t(GameAI.ai_move, -24, null), mframe_t(GameAI.ai_move, 11, null), mframe_t(GameAI.ai_move, 5, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, 6, null), mframe_t(GameAI.ai_move, 4, null))

        var mutant_move_pain2 = mmove_t(FRAME_pain201, FRAME_pain206, mutant_frames_pain2, mutant_run)

        var mutant_frames_pain3 = array<mframe_t>(mframe_t(GameAI.ai_move, -22, null), mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 6, null), mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 1, null))

        var mutant_move_pain3 = mmove_t(FRAME_pain301, FRAME_pain311, mutant_frames_pain3, mutant_run)

        var mutant_pain: EntPainAdapter = object : EntPainAdapter() {
            public fun getID(): String {
                return "mutant_pain"
            }

            public fun pain(self: edict_t, other: edict_t, kick: Float, damage: Int) {
                val r: Float

                if (self.health < (self.max_health / 2))
                    self.s.skinnum = 1

                if (GameBase.level.time < self.pain_debounce_time)
                    return

                self.pain_debounce_time = GameBase.level.time + 3

                if (GameBase.skill.value == 3)
                    return  // no pain anims in nightmare

                r = Lib.random()
                if (r < 0.33) {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain1, 1, Defines.ATTN_NORM, 0)
                    self.monsterinfo.currentmove = mutant_move_pain1
                } else if (r < 0.66) {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain2, 1, Defines.ATTN_NORM, 0)
                    self.monsterinfo.currentmove = mutant_move_pain2
                } else {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain1, 1, Defines.ATTN_NORM, 0)
                    self.monsterinfo.currentmove = mutant_move_pain3
                }
            }
        }

        //
        //	DEATH
        //
        var mutant_dead: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "mutant_dead"
            }

            public fun think(self: edict_t): Boolean {
                Math3D.VectorSet(self.mins, -16, -16, -24)
                Math3D.VectorSet(self.maxs, 16, 16, -8)
                self.movetype = Defines.MOVETYPE_TOSS
                self.svflags = self.svflags or Defines.SVF_DEADMONSTER
                GameBase.gi.linkentity(self)

                M.M_FlyCheck.think(self)
                return true
            }
        }

        var mutant_frames_death1 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var mutant_move_death1 = mmove_t(FRAME_death101, FRAME_death109, mutant_frames_death1, mutant_dead)

        var mutant_frames_death2 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var mutant_move_death2 = mmove_t(FRAME_death201, FRAME_death210, mutant_frames_death2, mutant_dead)

        var mutant_die: EntDieAdapter = object : EntDieAdapter() {
            public fun getID(): String {
                return "mutant_die"
            }

            public fun die(self: edict_t, inflictor: edict_t, attacker: edict_t, damage: Int, point: FloatArray) {
                var n: Int

                if (self.health <= self.gib_health) {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("misc/udeath.wav"), 1, Defines.ATTN_NORM, 0)
                    run {
                        n = 0
                        while (n < 2) {
                            GameMisc.ThrowGib(self, "models/objects/gibs/bone/tris.md2", damage, Defines.GIB_ORGANIC)
                            n++
                        }
                    }
                    run {
                        n = 0
                        while (n < 4) {
                            GameMisc.ThrowGib(self, "models/objects/gibs/sm_meat/tris.md2", damage, Defines.GIB_ORGANIC)
                            n++
                        }
                    }
                    GameMisc.ThrowHead(self, "models/objects/gibs/head2/tris.md2", damage, Defines.GIB_ORGANIC)
                    self.deadflag = Defines.DEAD_DEAD
                    return
                }

                if (self.deadflag == Defines.DEAD_DEAD)
                    return

                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_death, 1, Defines.ATTN_NORM, 0)
                self.deadflag = Defines.DEAD_DEAD
                self.takedamage = Defines.DAMAGE_YES
                self.s.skinnum = 1

                if (Lib.random() < 0.5)
                    self.monsterinfo.currentmove = mutant_move_death1
                else
                    self.monsterinfo.currentmove = mutant_move_death2
            }
        }

        //
        //	SPAWN
        //

        /*
     * QUAKED monster_mutant (1 .5 0) (-32 -32 -24) (32 32 32) Ambush
     * Trigger_Spawn Sight
     */
        public var SP_monster_mutant: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "SP_monster_mutant"
            }

            public fun think(self: edict_t): Boolean {
                if (GameBase.deathmatch.value != 0) {
                    GameUtil.G_FreeEdict(self)
                    return false
                }

                sound_swing = GameBase.gi.soundindex("mutant/mutatck1.wav")
                sound_hit = GameBase.gi.soundindex("mutant/mutatck2.wav")
                sound_hit2 = GameBase.gi.soundindex("mutant/mutatck3.wav")
                sound_death = GameBase.gi.soundindex("mutant/mutdeth1.wav")
                sound_idle = GameBase.gi.soundindex("mutant/mutidle1.wav")
                sound_pain1 = GameBase.gi.soundindex("mutant/mutpain1.wav")
                sound_pain2 = GameBase.gi.soundindex("mutant/mutpain2.wav")
                sound_sight = GameBase.gi.soundindex("mutant/mutsght1.wav")
                sound_search = GameBase.gi.soundindex("mutant/mutsrch1.wav")
                sound_step1 = GameBase.gi.soundindex("mutant/step1.wav")
                sound_step2 = GameBase.gi.soundindex("mutant/step2.wav")
                sound_step3 = GameBase.gi.soundindex("mutant/step3.wav")
                sound_thud = GameBase.gi.soundindex("mutant/thud1.wav")

                self.movetype = Defines.MOVETYPE_STEP
                self.solid = Defines.SOLID_BBOX
                self.s.modelindex = GameBase.gi.modelindex("models/monsters/mutant/tris.md2")
                Math3D.VectorSet(self.mins, -32, -32, -24)
                Math3D.VectorSet(self.maxs, 32, 32, 48)

                self.health = 300
                self.gib_health = -120
                self.mass = 300

                self.pain = mutant_pain
                self.die = mutant_die

                self.monsterinfo.stand = mutant_stand
                self.monsterinfo.walk = mutant_walk
                self.monsterinfo.run = mutant_run
                self.monsterinfo.dodge = null
                self.monsterinfo.attack = mutant_jump
                self.monsterinfo.melee = mutant_melee
                self.monsterinfo.sight = mutant_sight
                self.monsterinfo.search = mutant_search
                self.monsterinfo.idle = mutant_idle
                self.monsterinfo.checkattack = mutant_checkattack

                GameBase.gi.linkentity(self)

                self.monsterinfo.currentmove = mutant_move_stand

                self.monsterinfo.scale = MODEL_SCALE
                GameAI.walkmonster_start.think(self)
                return true
            }
        }
    }
}