/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package lwjake2.game.monsters

import lwjake2.Defines
import lwjake2.game.EntDieAdapter
import lwjake2.game.EntDodgeAdapter
import lwjake2.game.EntInteractAdapter
import lwjake2.game.EntPainAdapter
import lwjake2.game.EntThinkAdapter
import lwjake2.game.GameAI
import lwjake2.game.GameBase
import lwjake2.game.GameMisc
import lwjake2.game.GameUtil
import lwjake2.game.Monster
import lwjake2.game.edict_t
import lwjake2.game.mframe_t
import lwjake2.game.mmove_t
import lwjake2.game.monsters.M_Flash
import lwjake2.util.Lib
import lwjake2.util.Math3D

public class M_Gunner {
    companion object {
        //	This file generated by ModelGen - Do NOT Modify

        public val FRAME_stand01: Int = 0

        public val FRAME_stand02: Int = 1

        public val FRAME_stand03: Int = 2

        public val FRAME_stand04: Int = 3

        public val FRAME_stand05: Int = 4

        public val FRAME_stand06: Int = 5

        public val FRAME_stand07: Int = 6

        public val FRAME_stand08: Int = 7

        public val FRAME_stand09: Int = 8

        public val FRAME_stand10: Int = 9

        public val FRAME_stand11: Int = 10

        public val FRAME_stand12: Int = 11

        public val FRAME_stand13: Int = 12

        public val FRAME_stand14: Int = 13

        public val FRAME_stand15: Int = 14

        public val FRAME_stand16: Int = 15

        public val FRAME_stand17: Int = 16

        public val FRAME_stand18: Int = 17

        public val FRAME_stand19: Int = 18

        public val FRAME_stand20: Int = 19

        public val FRAME_stand21: Int = 20

        public val FRAME_stand22: Int = 21

        public val FRAME_stand23: Int = 22

        public val FRAME_stand24: Int = 23

        public val FRAME_stand25: Int = 24

        public val FRAME_stand26: Int = 25

        public val FRAME_stand27: Int = 26

        public val FRAME_stand28: Int = 27

        public val FRAME_stand29: Int = 28

        public val FRAME_stand30: Int = 29

        public val FRAME_stand31: Int = 30

        public val FRAME_stand32: Int = 31

        public val FRAME_stand33: Int = 32

        public val FRAME_stand34: Int = 33

        public val FRAME_stand35: Int = 34

        public val FRAME_stand36: Int = 35

        public val FRAME_stand37: Int = 36

        public val FRAME_stand38: Int = 37

        public val FRAME_stand39: Int = 38

        public val FRAME_stand40: Int = 39

        public val FRAME_stand41: Int = 40

        public val FRAME_stand42: Int = 41

        public val FRAME_stand43: Int = 42

        public val FRAME_stand44: Int = 43

        public val FRAME_stand45: Int = 44

        public val FRAME_stand46: Int = 45

        public val FRAME_stand47: Int = 46

        public val FRAME_stand48: Int = 47

        public val FRAME_stand49: Int = 48

        public val FRAME_stand50: Int = 49

        public val FRAME_stand51: Int = 50

        public val FRAME_stand52: Int = 51

        public val FRAME_stand53: Int = 52

        public val FRAME_stand54: Int = 53

        public val FRAME_stand55: Int = 54

        public val FRAME_stand56: Int = 55

        public val FRAME_stand57: Int = 56

        public val FRAME_stand58: Int = 57

        public val FRAME_stand59: Int = 58

        public val FRAME_stand60: Int = 59

        public val FRAME_stand61: Int = 60

        public val FRAME_stand62: Int = 61

        public val FRAME_stand63: Int = 62

        public val FRAME_stand64: Int = 63

        public val FRAME_stand65: Int = 64

        public val FRAME_stand66: Int = 65

        public val FRAME_stand67: Int = 66

        public val FRAME_stand68: Int = 67

        public val FRAME_stand69: Int = 68

        public val FRAME_stand70: Int = 69

        public val FRAME_walk01: Int = 70

        public val FRAME_walk02: Int = 71

        public val FRAME_walk03: Int = 72

        public val FRAME_walk04: Int = 73

        public val FRAME_walk05: Int = 74

        public val FRAME_walk06: Int = 75

        public val FRAME_walk07: Int = 76

        public val FRAME_walk08: Int = 77

        public val FRAME_walk09: Int = 78

        public val FRAME_walk10: Int = 79

        public val FRAME_walk11: Int = 80

        public val FRAME_walk12: Int = 81

        public val FRAME_walk13: Int = 82

        public val FRAME_walk14: Int = 83

        public val FRAME_walk15: Int = 84

        public val FRAME_walk16: Int = 85

        public val FRAME_walk17: Int = 86

        public val FRAME_walk18: Int = 87

        public val FRAME_walk19: Int = 88

        public val FRAME_walk20: Int = 89

        public val FRAME_walk21: Int = 90

        public val FRAME_walk22: Int = 91

        public val FRAME_walk23: Int = 92

        public val FRAME_walk24: Int = 93

        public val FRAME_run01: Int = 94

        public val FRAME_run02: Int = 95

        public val FRAME_run03: Int = 96

        public val FRAME_run04: Int = 97

        public val FRAME_run05: Int = 98

        public val FRAME_run06: Int = 99

        public val FRAME_run07: Int = 100

        public val FRAME_run08: Int = 101

        public val FRAME_runs01: Int = 102

        public val FRAME_runs02: Int = 103

        public val FRAME_runs03: Int = 104

        public val FRAME_runs04: Int = 105

        public val FRAME_runs05: Int = 106

        public val FRAME_runs06: Int = 107

        public val FRAME_attak101: Int = 108

        public val FRAME_attak102: Int = 109

        public val FRAME_attak103: Int = 110

        public val FRAME_attak104: Int = 111

        public val FRAME_attak105: Int = 112

        public val FRAME_attak106: Int = 113

        public val FRAME_attak107: Int = 114

        public val FRAME_attak108: Int = 115

        public val FRAME_attak109: Int = 116

        public val FRAME_attak110: Int = 117

        public val FRAME_attak111: Int = 118

        public val FRAME_attak112: Int = 119

        public val FRAME_attak113: Int = 120

        public val FRAME_attak114: Int = 121

        public val FRAME_attak115: Int = 122

        public val FRAME_attak116: Int = 123

        public val FRAME_attak117: Int = 124

        public val FRAME_attak118: Int = 125

        public val FRAME_attak119: Int = 126

        public val FRAME_attak120: Int = 127

        public val FRAME_attak121: Int = 128

        public val FRAME_attak201: Int = 129

        public val FRAME_attak202: Int = 130

        public val FRAME_attak203: Int = 131

        public val FRAME_attak204: Int = 132

        public val FRAME_attak205: Int = 133

        public val FRAME_attak206: Int = 134

        public val FRAME_attak207: Int = 135

        public val FRAME_attak208: Int = 136

        public val FRAME_attak209: Int = 137

        public val FRAME_attak210: Int = 138

        public val FRAME_attak211: Int = 139

        public val FRAME_attak212: Int = 140

        public val FRAME_attak213: Int = 141

        public val FRAME_attak214: Int = 142

        public val FRAME_attak215: Int = 143

        public val FRAME_attak216: Int = 144

        public val FRAME_attak217: Int = 145

        public val FRAME_attak218: Int = 146

        public val FRAME_attak219: Int = 147

        public val FRAME_attak220: Int = 148

        public val FRAME_attak221: Int = 149

        public val FRAME_attak222: Int = 150

        public val FRAME_attak223: Int = 151

        public val FRAME_attak224: Int = 152

        public val FRAME_attak225: Int = 153

        public val FRAME_attak226: Int = 154

        public val FRAME_attak227: Int = 155

        public val FRAME_attak228: Int = 156

        public val FRAME_attak229: Int = 157

        public val FRAME_attak230: Int = 158

        public val FRAME_pain101: Int = 159

        public val FRAME_pain102: Int = 160

        public val FRAME_pain103: Int = 161

        public val FRAME_pain104: Int = 162

        public val FRAME_pain105: Int = 163

        public val FRAME_pain106: Int = 164

        public val FRAME_pain107: Int = 165

        public val FRAME_pain108: Int = 166

        public val FRAME_pain109: Int = 167

        public val FRAME_pain110: Int = 168

        public val FRAME_pain111: Int = 169

        public val FRAME_pain112: Int = 170

        public val FRAME_pain113: Int = 171

        public val FRAME_pain114: Int = 172

        public val FRAME_pain115: Int = 173

        public val FRAME_pain116: Int = 174

        public val FRAME_pain117: Int = 175

        public val FRAME_pain118: Int = 176

        public val FRAME_pain201: Int = 177

        public val FRAME_pain202: Int = 178

        public val FRAME_pain203: Int = 179

        public val FRAME_pain204: Int = 180

        public val FRAME_pain205: Int = 181

        public val FRAME_pain206: Int = 182

        public val FRAME_pain207: Int = 183

        public val FRAME_pain208: Int = 184

        public val FRAME_pain301: Int = 185

        public val FRAME_pain302: Int = 186

        public val FRAME_pain303: Int = 187

        public val FRAME_pain304: Int = 188

        public val FRAME_pain305: Int = 189

        public val FRAME_death01: Int = 190

        public val FRAME_death02: Int = 191

        public val FRAME_death03: Int = 192

        public val FRAME_death04: Int = 193

        public val FRAME_death05: Int = 194

        public val FRAME_death06: Int = 195

        public val FRAME_death07: Int = 196

        public val FRAME_death08: Int = 197

        public val FRAME_death09: Int = 198

        public val FRAME_death10: Int = 199

        public val FRAME_death11: Int = 200

        public val FRAME_duck01: Int = 201

        public val FRAME_duck02: Int = 202

        public val FRAME_duck03: Int = 203

        public val FRAME_duck04: Int = 204

        public val FRAME_duck05: Int = 205

        public val FRAME_duck06: Int = 206

        public val FRAME_duck07: Int = 207

        public val FRAME_duck08: Int = 208

        public val MODEL_SCALE: Float = 1.150000.toFloat()

        var sound_pain: Int = 0

        var sound_pain2: Int = 0

        var sound_death: Int = 0

        var sound_idle: Int = 0

        var sound_open: Int = 0

        var sound_search: Int = 0

        var sound_sight: Int = 0

        var gunner_idlesound: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "gunner_idlesound"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_idle, 1, Defines.ATTN_IDLE, 0)
                return true
            }
        }

        var gunner_sight: EntInteractAdapter = object : EntInteractAdapter() {
            public fun getID(): String {
                return "gunner_sight"
            }

            public fun interact(self: edict_t, other: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_sight, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var gunner_search: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "gunner_search"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_search, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var gunner_frames_fidget = array<mframe_t>(mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, gunner_idlesound), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null))

        var gunner_stand: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "gunner_stand"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = gunner_move_stand
                return true
            }
        }

        var gunner_move_fidget = mmove_t(FRAME_stand31, FRAME_stand70, gunner_frames_fidget, gunner_stand)

        var gunner_fidget: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "gunner_fidget"
            }

            public fun think(self: edict_t): Boolean {
                if ((self.monsterinfo.aiflags and Defines.AI_STAND_GROUND) != 0)
                    return true
                if (Lib.random() <= 0.05)
                    self.monsterinfo.currentmove = gunner_move_fidget
                return true
            }
        }

        var gunner_frames_stand = array<mframe_t>(mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, gunner_fidget), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, gunner_fidget), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, gunner_fidget))

        var gunner_move_stand = mmove_t(FRAME_stand01, FRAME_stand30, gunner_frames_stand, null)

        var gunner_frames_walk = array<mframe_t>(mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 3, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 7, null), mframe_t(GameAI.ai_walk, 2, null), mframe_t(GameAI.ai_walk, 6, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 2, null), mframe_t(GameAI.ai_walk, 7, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 7, null), mframe_t(GameAI.ai_walk, 4, null))

        var gunner_move_walk = mmove_t(FRAME_walk07, FRAME_walk19, gunner_frames_walk, null)

        var gunner_walk: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "gunner_walk"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = gunner_move_walk
                return true
            }
        }

        var gunner_frames_run = array<mframe_t>(mframe_t(GameAI.ai_run, 26, null), mframe_t(GameAI.ai_run, 9, null), mframe_t(GameAI.ai_run, 9, null), mframe_t(GameAI.ai_run, 9, null), mframe_t(GameAI.ai_run, 15, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 13, null), mframe_t(GameAI.ai_run, 6, null))

        var gunner_move_run = mmove_t(FRAME_run01, FRAME_run08, gunner_frames_run, null)

        var gunner_run: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "gunner_run"
            }

            public fun think(self: edict_t): Boolean {
                if ((self.monsterinfo.aiflags and Defines.AI_STAND_GROUND) != 0)
                    self.monsterinfo.currentmove = gunner_move_stand
                else
                    self.monsterinfo.currentmove = gunner_move_run
                return true
            }
        }

        var gunner_frames_runandshoot = array<mframe_t>(mframe_t(GameAI.ai_run, 32, null), mframe_t(GameAI.ai_run, 15, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 18, null), mframe_t(GameAI.ai_run, 8, null), mframe_t(GameAI.ai_run, 20, null))

        var gunner_move_runandshoot = mmove_t(FRAME_runs01, FRAME_runs06, gunner_frames_runandshoot, null)

        var gunner_runandshoot: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "gunner_runandshoot"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = gunner_move_runandshoot
                return true
            }
        }

        var gunner_frames_pain3 = array<mframe_t>(mframe_t(GameAI.ai_move, -3, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 1, null))

        var gunner_move_pain3 = mmove_t(FRAME_pain301, FRAME_pain305, gunner_frames_pain3, gunner_run)

        var gunner_frames_pain2 = array<mframe_t>(mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, 11, null), mframe_t(GameAI.ai_move, 6, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, -7, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, -7, null))

        var gunner_move_pain2 = mmove_t(FRAME_pain201, FRAME_pain208, gunner_frames_pain2, gunner_run)

        var gunner_frames_pain1 = array<mframe_t>(mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var gunner_move_pain1 = mmove_t(FRAME_pain101, FRAME_pain118, gunner_frames_pain1, gunner_run)

        var gunner_pain: EntPainAdapter = object : EntPainAdapter() {
            public fun getID(): String {
                return "gunner_pain"
            }

            public fun pain(self: edict_t, other: edict_t, kick: Float, damage: Int) {
                if (self.health < (self.max_health / 2))
                    self.s.skinnum = 1

                if (GameBase.level.time < self.pain_debounce_time)
                    return

                self.pain_debounce_time = GameBase.level.time + 3

                if ((Lib.rand() and 1) != 0)
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain, 1, Defines.ATTN_NORM, 0)
                else
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain2, 1, Defines.ATTN_NORM, 0)

                if (GameBase.skill.value == 3)
                    return  // no pain anims in nightmare

                if (damage <= 10)
                    self.monsterinfo.currentmove = gunner_move_pain3
                else if (damage <= 25)
                    self.monsterinfo.currentmove = gunner_move_pain2
                else
                    self.monsterinfo.currentmove = gunner_move_pain1

            }
        }

        var gunner_dead: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "gunner_dead"
            }

            public fun think(self: edict_t): Boolean {
                Math3D.VectorSet(self.mins, -16, -16, -24)
                Math3D.VectorSet(self.maxs, 16, 16, -8)
                self.movetype = Defines.MOVETYPE_TOSS
                self.svflags = self.svflags or Defines.SVF_DEADMONSTER
                self.nextthink = 0
                GameBase.gi.linkentity(self)
                return true
            }
        }

        var gunner_frames_death = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -7, null), mframe_t(GameAI.ai_move, -3, null), mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, 8, null), mframe_t(GameAI.ai_move, 6, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var gunner_move_death = mmove_t(FRAME_death01, FRAME_death11, gunner_frames_death, gunner_dead)

        var gunner_die: EntDieAdapter = object : EntDieAdapter() {
            public fun getID(): String {
                return "gunner_die"
            }

            public fun die(self: edict_t, inflictor: edict_t, attacker: edict_t, damage: Int, point: FloatArray) {
                var n: Int

                //	check for gib
                if (self.health <= self.gib_health) {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("misc/udeath.wav"), 1, Defines.ATTN_NORM, 0)
                    run {
                        n = 0
                        while (n < 2) {
                            GameMisc.ThrowGib(self, "models/objects/gibs/bone/tris.md2", damage, Defines.GIB_ORGANIC)
                            n++
                        }
                    }
                    run {
                        n = 0
                        while (n < 4) {
                            GameMisc.ThrowGib(self, "models/objects/gibs/sm_meat/tris.md2", damage, Defines.GIB_ORGANIC)
                            n++
                        }
                    }
                    GameMisc.ThrowHead(self, "models/objects/gibs/head2/tris.md2", damage, Defines.GIB_ORGANIC)
                    self.deadflag = Defines.DEAD_DEAD
                    return
                }

                if (self.deadflag == Defines.DEAD_DEAD)
                    return

                //	regular death
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_death, 1, Defines.ATTN_NORM, 0)
                self.deadflag = Defines.DEAD_DEAD
                self.takedamage = Defines.DAMAGE_YES
                self.monsterinfo.currentmove = gunner_move_death
            }
        }

        var gunner_duck_down: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "gunner_duck_down"
            }

            public fun think(self: edict_t): Boolean {
                if ((self.monsterinfo.aiflags and Defines.AI_DUCKED) != 0)
                    return true
                self.monsterinfo.aiflags = self.monsterinfo.aiflags or Defines.AI_DUCKED
                if (GameBase.skill.value >= 2) {
                    if (Lib.random() > 0.5)
                        GunnerGrenade.think(self)
                }

                self.maxs[2] -= 32
                self.takedamage = Defines.DAMAGE_YES
                self.monsterinfo.pausetime = GameBase.level.time + 1
                GameBase.gi.linkentity(self)
                return true
            }
        }

        var gunner_duck_hold: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "gunner_duck_hold"
            }

            public fun think(self: edict_t): Boolean {
                if (GameBase.level.time >= self.monsterinfo.pausetime)
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags and Defines.AI_HOLD_FRAME.inv()
                else
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags or Defines.AI_HOLD_FRAME
                return true
            }
        }

        var gunner_duck_up: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "gunner_duck_up"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.aiflags = self.monsterinfo.aiflags and Defines.AI_DUCKED.inv()
                self.maxs[2] += 32
                self.takedamage = Defines.DAMAGE_AIM
                GameBase.gi.linkentity(self)
                return true
            }
        }

        var gunner_frames_duck = array<mframe_t>(mframe_t(GameAI.ai_move, 1, gunner_duck_down), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 1, gunner_duck_hold), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, 0, gunner_duck_up), mframe_t(GameAI.ai_move, -1, null))

        var gunner_move_duck = mmove_t(FRAME_duck01, FRAME_duck08, gunner_frames_duck, gunner_run)

        var gunner_dodge: EntDodgeAdapter = object : EntDodgeAdapter() {
            public fun getID(): String {
                return "gunner_dodge"
            }

            public fun dodge(self: edict_t, attacker: edict_t, eta: Float) {
                if (Lib.random() > 0.25)
                    return

                if (self.enemy == null)
                    self.enemy = attacker

                self.monsterinfo.currentmove = gunner_move_duck
            }
        }

        var gunner_opengun: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "gunner_opengun"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_open, 1, Defines.ATTN_IDLE, 0)
                return true
            }
        }

        var GunnerFire: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "GunnerFire"
            }

            public fun think(self: edict_t): Boolean {
                val start = floatArray(0.0, 0.0, 0.0)
                val forward = floatArray(0.0, 0.0, 0.0)
                val right = floatArray(0.0, 0.0, 0.0)
                val target = floatArray(0.0, 0.0, 0.0)
                val aim = floatArray(0.0, 0.0, 0.0)
                val flash_number: Int

                flash_number = Defines.MZ2_GUNNER_MACHINEGUN_1 + (self.s.frame - FRAME_attak216)

                Math3D.AngleVectors(self.s.angles, forward, right, null)
                Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start)

                // project enemy back a bit and target there
                Math3D.VectorCopy(self.enemy.s.origin, target)
                Math3D.VectorMA(target, -0.2.toFloat(), self.enemy.velocity, target)
                target[2] += self.enemy.viewheight

                Math3D.VectorSubtract(target, start, aim)
                Math3D.VectorNormalize(aim)
                Monster.monster_fire_bullet(self, start, aim, 3, 4, Defines.DEFAULT_BULLET_HSPREAD, Defines.DEFAULT_BULLET_VSPREAD, flash_number)

                return true
            }
        }

        var GunnerGrenade: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "GunnerGrenade"
            }

            public fun think(self: edict_t): Boolean {
                val start = floatArray(0.0, 0.0, 0.0)
                val forward = floatArray(0.0, 0.0, 0.0)
                val right = floatArray(0.0, 0.0, 0.0)
                val aim = floatArray(0.0, 0.0, 0.0)
                val flash_number: Int

                if (self.s.frame == FRAME_attak105)
                    flash_number = Defines.MZ2_GUNNER_GRENADE_1
                else if (self.s.frame == FRAME_attak108)
                    flash_number = Defines.MZ2_GUNNER_GRENADE_2
                else if (self.s.frame == FRAME_attak111)
                    flash_number = Defines.MZ2_GUNNER_GRENADE_3
                else
                // (self.s.frame == FRAME_attak114)
                    flash_number = Defines.MZ2_GUNNER_GRENADE_4

                Math3D.AngleVectors(self.s.angles, forward, right, null)
                Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start)

                //FIXME : do a spread -225 -75 75 225 degrees around forward
                Math3D.VectorCopy(forward, aim)

                Monster.monster_fire_grenade(self, start, aim, 50, 600, flash_number)
                return true
            }
        }

        var gunner_attack: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "gunner_attack"
            }

            public fun think(self: edict_t): Boolean {
                if (GameUtil.range(self, self.enemy) == Defines.RANGE_MELEE) {
                    self.monsterinfo.currentmove = gunner_move_attack_chain
                } else {
                    if (Lib.random() <= 0.5)
                        self.monsterinfo.currentmove = gunner_move_attack_grenade
                    else
                        self.monsterinfo.currentmove = gunner_move_attack_chain
                }
                return true
            }
        }

        var gunner_fire_chain: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "gunner_fire_chain"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = gunner_move_fire_chain
                return true
            }
        }

        var gunner_frames_attack_chain = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, gunner_opengun), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null))

        var gunner_move_attack_chain = mmove_t(FRAME_attak209, FRAME_attak215, gunner_frames_attack_chain, gunner_fire_chain)

        var gunner_frames_fire_chain = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, GunnerFire), mframe_t(GameAI.ai_charge, 0, GunnerFire), mframe_t(GameAI.ai_charge, 0, GunnerFire), mframe_t(GameAI.ai_charge, 0, GunnerFire), mframe_t(GameAI.ai_charge, 0, GunnerFire), mframe_t(GameAI.ai_charge, 0, GunnerFire), mframe_t(GameAI.ai_charge, 0, GunnerFire), mframe_t(GameAI.ai_charge, 0, GunnerFire))

        var gunner_refire_chain: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "gunner_refire_chain"
            }

            public fun think(self: edict_t): Boolean {
                if (self.enemy.health > 0)
                    if (GameUtil.visible(self, self.enemy))
                        if (Lib.random() <= 0.5) {
                            self.monsterinfo.currentmove = gunner_move_fire_chain
                            return true
                        }
                self.monsterinfo.currentmove = gunner_move_endfire_chain
                return true
            }
        }

        var gunner_move_fire_chain = mmove_t(FRAME_attak216, FRAME_attak223, gunner_frames_fire_chain, gunner_refire_chain)

        var gunner_frames_endfire_chain = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null))

        var gunner_move_endfire_chain = mmove_t(FRAME_attak224, FRAME_attak230, gunner_frames_endfire_chain, gunner_run)

        var gunner_frames_attack_grenade = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, GunnerGrenade), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, GunnerGrenade), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, GunnerGrenade), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, GunnerGrenade), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null))

        var gunner_move_attack_grenade = mmove_t(FRAME_attak101, FRAME_attak121, gunner_frames_attack_grenade, gunner_run)

        /*
     * QUAKED monster_gunner (1 .5 0) (-16 -16 -24) (16 16 32) Ambush
     * Trigger_Spawn Sight
     */
        public fun SP_monster_gunner(self: edict_t) {
            if (GameBase.deathmatch.value != 0) {
                GameUtil.G_FreeEdict(self)
                return
            }

            sound_death = GameBase.gi.soundindex("gunner/death1.wav")
            sound_pain = GameBase.gi.soundindex("gunner/gunpain2.wav")
            sound_pain2 = GameBase.gi.soundindex("gunner/gunpain1.wav")
            sound_idle = GameBase.gi.soundindex("gunner/gunidle1.wav")
            sound_open = GameBase.gi.soundindex("gunner/gunatck1.wav")
            sound_search = GameBase.gi.soundindex("gunner/gunsrch1.wav")
            sound_sight = GameBase.gi.soundindex("gunner/sight1.wav")

            GameBase.gi.soundindex("gunner/gunatck2.wav")
            GameBase.gi.soundindex("gunner/gunatck3.wav")

            self.movetype = Defines.MOVETYPE_STEP
            self.solid = Defines.SOLID_BBOX
            self.s.modelindex = GameBase.gi.modelindex("models/monsters/gunner/tris.md2")
            Math3D.VectorSet(self.mins, -16, -16, -24)
            Math3D.VectorSet(self.maxs, 16, 16, 32)

            self.health = 175
            self.gib_health = -70
            self.mass = 200

            self.pain = gunner_pain
            self.die = gunner_die

            self.monsterinfo.stand = gunner_stand
            self.monsterinfo.walk = gunner_walk
            self.monsterinfo.run = gunner_run
            self.monsterinfo.dodge = gunner_dodge
            self.monsterinfo.attack = gunner_attack
            self.monsterinfo.melee = null
            self.monsterinfo.sight = gunner_sight
            self.monsterinfo.search = gunner_search

            GameBase.gi.linkentity(self)

            self.monsterinfo.currentmove = gunner_move_stand
            self.monsterinfo.scale = MODEL_SCALE

            GameAI.walkmonster_start.think(self)
        }
    }
}