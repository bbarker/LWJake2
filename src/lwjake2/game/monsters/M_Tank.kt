/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package lwjake2.game.monsters

import lwjake2.Defines
import lwjake2.game.EntDieAdapter
import lwjake2.game.EntInteractAdapter
import lwjake2.game.EntPainAdapter
import lwjake2.game.EntThinkAdapter
import lwjake2.game.GameAI
import lwjake2.game.GameBase
import lwjake2.game.GameMisc
import lwjake2.game.GameUtil
import lwjake2.game.Monster
import lwjake2.game.edict_t
import lwjake2.game.mframe_t
import lwjake2.game.mmove_t
import lwjake2.game.monsters.M_Flash
import lwjake2.util.Lib
import lwjake2.util.Math3D

public class M_Tank {
    companion object {
        // G:\quake2\baseq2\models/monsters/tank

        // This file generated by qdata - Do NOT Modify

        public val FRAME_stand01: Int = 0

        public val FRAME_stand02: Int = 1

        public val FRAME_stand03: Int = 2

        public val FRAME_stand04: Int = 3

        public val FRAME_stand05: Int = 4

        public val FRAME_stand06: Int = 5

        public val FRAME_stand07: Int = 6

        public val FRAME_stand08: Int = 7

        public val FRAME_stand09: Int = 8

        public val FRAME_stand10: Int = 9

        public val FRAME_stand11: Int = 10

        public val FRAME_stand12: Int = 11

        public val FRAME_stand13: Int = 12

        public val FRAME_stand14: Int = 13

        public val FRAME_stand15: Int = 14

        public val FRAME_stand16: Int = 15

        public val FRAME_stand17: Int = 16

        public val FRAME_stand18: Int = 17

        public val FRAME_stand19: Int = 18

        public val FRAME_stand20: Int = 19

        public val FRAME_stand21: Int = 20

        public val FRAME_stand22: Int = 21

        public val FRAME_stand23: Int = 22

        public val FRAME_stand24: Int = 23

        public val FRAME_stand25: Int = 24

        public val FRAME_stand26: Int = 25

        public val FRAME_stand27: Int = 26

        public val FRAME_stand28: Int = 27

        public val FRAME_stand29: Int = 28

        public val FRAME_stand30: Int = 29

        public val FRAME_walk01: Int = 30

        public val FRAME_walk02: Int = 31

        public val FRAME_walk03: Int = 32

        public val FRAME_walk04: Int = 33

        public val FRAME_walk05: Int = 34

        public val FRAME_walk06: Int = 35

        public val FRAME_walk07: Int = 36

        public val FRAME_walk08: Int = 37

        public val FRAME_walk09: Int = 38

        public val FRAME_walk10: Int = 39

        public val FRAME_walk11: Int = 40

        public val FRAME_walk12: Int = 41

        public val FRAME_walk13: Int = 42

        public val FRAME_walk14: Int = 43

        public val FRAME_walk15: Int = 44

        public val FRAME_walk16: Int = 45

        public val FRAME_walk17: Int = 46

        public val FRAME_walk18: Int = 47

        public val FRAME_walk19: Int = 48

        public val FRAME_walk20: Int = 49

        public val FRAME_walk21: Int = 50

        public val FRAME_walk22: Int = 51

        public val FRAME_walk23: Int = 52

        public val FRAME_walk24: Int = 53

        public val FRAME_walk25: Int = 54

        public val FRAME_attak101: Int = 55

        public val FRAME_attak102: Int = 56

        public val FRAME_attak103: Int = 57

        public val FRAME_attak104: Int = 58

        public val FRAME_attak105: Int = 59

        public val FRAME_attak106: Int = 60

        public val FRAME_attak107: Int = 61

        public val FRAME_attak108: Int = 62

        public val FRAME_attak109: Int = 63

        public val FRAME_attak110: Int = 64

        public val FRAME_attak111: Int = 65

        public val FRAME_attak112: Int = 66

        public val FRAME_attak113: Int = 67

        public val FRAME_attak114: Int = 68

        public val FRAME_attak115: Int = 69

        public val FRAME_attak116: Int = 70

        public val FRAME_attak117: Int = 71

        public val FRAME_attak118: Int = 72

        public val FRAME_attak119: Int = 73

        public val FRAME_attak120: Int = 74

        public val FRAME_attak121: Int = 75

        public val FRAME_attak122: Int = 76

        public val FRAME_attak201: Int = 77

        public val FRAME_attak202: Int = 78

        public val FRAME_attak203: Int = 79

        public val FRAME_attak204: Int = 80

        public val FRAME_attak205: Int = 81

        public val FRAME_attak206: Int = 82

        public val FRAME_attak207: Int = 83

        public val FRAME_attak208: Int = 84

        public val FRAME_attak209: Int = 85

        public val FRAME_attak210: Int = 86

        public val FRAME_attak211: Int = 87

        public val FRAME_attak212: Int = 88

        public val FRAME_attak213: Int = 89

        public val FRAME_attak214: Int = 90

        public val FRAME_attak215: Int = 91

        public val FRAME_attak216: Int = 92

        public val FRAME_attak217: Int = 93

        public val FRAME_attak218: Int = 94

        public val FRAME_attak219: Int = 95

        public val FRAME_attak220: Int = 96

        public val FRAME_attak221: Int = 97

        public val FRAME_attak222: Int = 98

        public val FRAME_attak223: Int = 99

        public val FRAME_attak224: Int = 100

        public val FRAME_attak225: Int = 101

        public val FRAME_attak226: Int = 102

        public val FRAME_attak227: Int = 103

        public val FRAME_attak228: Int = 104

        public val FRAME_attak229: Int = 105

        public val FRAME_attak230: Int = 106

        public val FRAME_attak231: Int = 107

        public val FRAME_attak232: Int = 108

        public val FRAME_attak233: Int = 109

        public val FRAME_attak234: Int = 110

        public val FRAME_attak235: Int = 111

        public val FRAME_attak236: Int = 112

        public val FRAME_attak237: Int = 113

        public val FRAME_attak238: Int = 114

        public val FRAME_attak301: Int = 115

        public val FRAME_attak302: Int = 116

        public val FRAME_attak303: Int = 117

        public val FRAME_attak304: Int = 118

        public val FRAME_attak305: Int = 119

        public val FRAME_attak306: Int = 120

        public val FRAME_attak307: Int = 121

        public val FRAME_attak308: Int = 122

        public val FRAME_attak309: Int = 123

        public val FRAME_attak310: Int = 124

        public val FRAME_attak311: Int = 125

        public val FRAME_attak312: Int = 126

        public val FRAME_attak313: Int = 127

        public val FRAME_attak314: Int = 128

        public val FRAME_attak315: Int = 129

        public val FRAME_attak316: Int = 130

        public val FRAME_attak317: Int = 131

        public val FRAME_attak318: Int = 132

        public val FRAME_attak319: Int = 133

        public val FRAME_attak320: Int = 134

        public val FRAME_attak321: Int = 135

        public val FRAME_attak322: Int = 136

        public val FRAME_attak323: Int = 137

        public val FRAME_attak324: Int = 138

        public val FRAME_attak325: Int = 139

        public val FRAME_attak326: Int = 140

        public val FRAME_attak327: Int = 141

        public val FRAME_attak328: Int = 142

        public val FRAME_attak329: Int = 143

        public val FRAME_attak330: Int = 144

        public val FRAME_attak331: Int = 145

        public val FRAME_attak332: Int = 146

        public val FRAME_attak333: Int = 147

        public val FRAME_attak334: Int = 148

        public val FRAME_attak335: Int = 149

        public val FRAME_attak336: Int = 150

        public val FRAME_attak337: Int = 151

        public val FRAME_attak338: Int = 152

        public val FRAME_attak339: Int = 153

        public val FRAME_attak340: Int = 154

        public val FRAME_attak341: Int = 155

        public val FRAME_attak342: Int = 156

        public val FRAME_attak343: Int = 157

        public val FRAME_attak344: Int = 158

        public val FRAME_attak345: Int = 159

        public val FRAME_attak346: Int = 160

        public val FRAME_attak347: Int = 161

        public val FRAME_attak348: Int = 162

        public val FRAME_attak349: Int = 163

        public val FRAME_attak350: Int = 164

        public val FRAME_attak351: Int = 165

        public val FRAME_attak352: Int = 166

        public val FRAME_attak353: Int = 167

        public val FRAME_attak401: Int = 168

        public val FRAME_attak402: Int = 169

        public val FRAME_attak403: Int = 170

        public val FRAME_attak404: Int = 171

        public val FRAME_attak405: Int = 172

        public val FRAME_attak406: Int = 173

        public val FRAME_attak407: Int = 174

        public val FRAME_attak408: Int = 175

        public val FRAME_attak409: Int = 176

        public val FRAME_attak410: Int = 177

        public val FRAME_attak411: Int = 178

        public val FRAME_attak412: Int = 179

        public val FRAME_attak413: Int = 180

        public val FRAME_attak414: Int = 181

        public val FRAME_attak415: Int = 182

        public val FRAME_attak416: Int = 183

        public val FRAME_attak417: Int = 184

        public val FRAME_attak418: Int = 185

        public val FRAME_attak419: Int = 186

        public val FRAME_attak420: Int = 187

        public val FRAME_attak421: Int = 188

        public val FRAME_attak422: Int = 189

        public val FRAME_attak423: Int = 190

        public val FRAME_attak424: Int = 191

        public val FRAME_attak425: Int = 192

        public val FRAME_attak426: Int = 193

        public val FRAME_attak427: Int = 194

        public val FRAME_attak428: Int = 195

        public val FRAME_attak429: Int = 196

        public val FRAME_pain101: Int = 197

        public val FRAME_pain102: Int = 198

        public val FRAME_pain103: Int = 199

        public val FRAME_pain104: Int = 200

        public val FRAME_pain201: Int = 201

        public val FRAME_pain202: Int = 202

        public val FRAME_pain203: Int = 203

        public val FRAME_pain204: Int = 204

        public val FRAME_pain205: Int = 205

        public val FRAME_pain301: Int = 206

        public val FRAME_pain302: Int = 207

        public val FRAME_pain303: Int = 208

        public val FRAME_pain304: Int = 209

        public val FRAME_pain305: Int = 210

        public val FRAME_pain306: Int = 211

        public val FRAME_pain307: Int = 212

        public val FRAME_pain308: Int = 213

        public val FRAME_pain309: Int = 214

        public val FRAME_pain310: Int = 215

        public val FRAME_pain311: Int = 216

        public val FRAME_pain312: Int = 217

        public val FRAME_pain313: Int = 218

        public val FRAME_pain314: Int = 219

        public val FRAME_pain315: Int = 220

        public val FRAME_pain316: Int = 221

        public val FRAME_death101: Int = 222

        public val FRAME_death102: Int = 223

        public val FRAME_death103: Int = 224

        public val FRAME_death104: Int = 225

        public val FRAME_death105: Int = 226

        public val FRAME_death106: Int = 227

        public val FRAME_death107: Int = 228

        public val FRAME_death108: Int = 229

        public val FRAME_death109: Int = 230

        public val FRAME_death110: Int = 231

        public val FRAME_death111: Int = 232

        public val FRAME_death112: Int = 233

        public val FRAME_death113: Int = 234

        public val FRAME_death114: Int = 235

        public val FRAME_death115: Int = 236

        public val FRAME_death116: Int = 237

        public val FRAME_death117: Int = 238

        public val FRAME_death118: Int = 239

        public val FRAME_death119: Int = 240

        public val FRAME_death120: Int = 241

        public val FRAME_death121: Int = 242

        public val FRAME_death122: Int = 243

        public val FRAME_death123: Int = 244

        public val FRAME_death124: Int = 245

        public val FRAME_death125: Int = 246

        public val FRAME_death126: Int = 247

        public val FRAME_death127: Int = 248

        public val FRAME_death128: Int = 249

        public val FRAME_death129: Int = 250

        public val FRAME_death130: Int = 251

        public val FRAME_death131: Int = 252

        public val FRAME_death132: Int = 253

        public val FRAME_recln101: Int = 254

        public val FRAME_recln102: Int = 255

        public val FRAME_recln103: Int = 256

        public val FRAME_recln104: Int = 257

        public val FRAME_recln105: Int = 258

        public val FRAME_recln106: Int = 259

        public val FRAME_recln107: Int = 260

        public val FRAME_recln108: Int = 261

        public val FRAME_recln109: Int = 262

        public val FRAME_recln110: Int = 263

        public val FRAME_recln111: Int = 264

        public val FRAME_recln112: Int = 265

        public val FRAME_recln113: Int = 266

        public val FRAME_recln114: Int = 267

        public val FRAME_recln115: Int = 268

        public val FRAME_recln116: Int = 269

        public val FRAME_recln117: Int = 270

        public val FRAME_recln118: Int = 271

        public val FRAME_recln119: Int = 272

        public val FRAME_recln120: Int = 273

        public val FRAME_recln121: Int = 274

        public val FRAME_recln122: Int = 275

        public val FRAME_recln123: Int = 276

        public val FRAME_recln124: Int = 277

        public val FRAME_recln125: Int = 278

        public val FRAME_recln126: Int = 279

        public val FRAME_recln127: Int = 280

        public val FRAME_recln128: Int = 281

        public val FRAME_recln129: Int = 282

        public val FRAME_recln130: Int = 283

        public val FRAME_recln131: Int = 284

        public val FRAME_recln132: Int = 285

        public val FRAME_recln133: Int = 286

        public val FRAME_recln134: Int = 287

        public val FRAME_recln135: Int = 288

        public val FRAME_recln136: Int = 289

        public val FRAME_recln137: Int = 290

        public val FRAME_recln138: Int = 291

        public val FRAME_recln139: Int = 292

        public val FRAME_recln140: Int = 293

        public val MODEL_SCALE: Float = 1.000000.toFloat()

        var sound_thud: Int = 0

        var sound_pain: Int = 0

        var sound_idle: Int = 0

        var sound_die: Int = 0

        var sound_step: Int = 0

        var sound_sight: Int = 0

        var sound_windup: Int = 0

        var sound_strike: Int = 0

        //
        // misc
        //

        var tank_sight: EntInteractAdapter = object : EntInteractAdapter() {
            public fun getID(): String {
                return "tank_sight"
            }

            public fun interact(self: edict_t, other: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_sight, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var tank_footstep: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "tank_footstep"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_BODY, sound_step, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var tank_thud: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "tank_thud"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_BODY, sound_thud, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var tank_windup: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "tank_windup"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_windup, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        var tank_idle: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "tank_idle"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_idle, 1, Defines.ATTN_IDLE, 0)
                return true
            }
        }

        //
        // stand
        //

        var tank_frames_stand = array<mframe_t>(mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null))

        var tank_move_stand = mmove_t(FRAME_stand01, FRAME_stand30, tank_frames_stand, null)

        var tank_stand: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "tank_stand"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = tank_move_stand
                return true
            }
        }

        //
        // walk
        //
        var tank_run: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "tank_run"
            }

            public fun think(self: edict_t): Boolean {
                if (self.enemy != null && self.enemy.client != null)
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags or Defines.AI_BRUTAL
                else
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags and Defines.AI_BRUTAL.inv()

                if ((self.monsterinfo.aiflags and Defines.AI_STAND_GROUND) != 0) {
                    self.monsterinfo.currentmove = tank_move_stand
                    return true
                }

                if (self.monsterinfo.currentmove == tank_move_walk || self.monsterinfo.currentmove == tank_move_start_run) {
                    self.monsterinfo.currentmove = tank_move_run
                } else {
                    self.monsterinfo.currentmove = tank_move_start_run
                }
                return true
            }
        }

        var tank_walk: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "tank_walk"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = tank_move_walk
                return true
            }
        }

        var tank_frames_start_walk = array<mframe_t>(mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 6, null), mframe_t(GameAI.ai_walk, 6, null), mframe_t(GameAI.ai_walk, 11, tank_footstep))

        var tank_move_start_walk = mmove_t(FRAME_walk01, FRAME_walk04, tank_frames_start_walk, tank_walk)

        var tank_frames_walk = array<mframe_t>(mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 3, null), mframe_t(GameAI.ai_walk, 2, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, tank_footstep), mframe_t(GameAI.ai_walk, 3, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 7, null), mframe_t(GameAI.ai_walk, 7, null), mframe_t(GameAI.ai_walk, 6, null), mframe_t(GameAI.ai_walk, 6, tank_footstep))

        var tank_move_walk = mmove_t(FRAME_walk05, FRAME_walk20, tank_frames_walk, null)

        var tank_frames_stop_walk = array<mframe_t>(mframe_t(GameAI.ai_walk, 3, null), mframe_t(GameAI.ai_walk, 3, null), mframe_t(GameAI.ai_walk, 2, null), mframe_t(GameAI.ai_walk, 2, null), mframe_t(GameAI.ai_walk, 4, tank_footstep))

        var tank_move_stop_walk = mmove_t(FRAME_walk21, FRAME_walk25, tank_frames_stop_walk, tank_stand)

        //
        // run
        //

        var tank_frames_start_run = array<mframe_t>(mframe_t(GameAI.ai_run, 0, null), mframe_t(GameAI.ai_run, 6, null), mframe_t(GameAI.ai_run, 6, null), mframe_t(GameAI.ai_run, 11, tank_footstep))

        var tank_move_start_run = mmove_t(FRAME_walk01, FRAME_walk04, tank_frames_start_run, tank_run)

        var tank_frames_run = array<mframe_t>(mframe_t(GameAI.ai_run, 4, null), mframe_t(GameAI.ai_run, 5, null), mframe_t(GameAI.ai_run, 3, null), mframe_t(GameAI.ai_run, 2, null), mframe_t(GameAI.ai_run, 5, null), mframe_t(GameAI.ai_run, 5, null), mframe_t(GameAI.ai_run, 4, null), mframe_t(GameAI.ai_run, 4, tank_footstep), mframe_t(GameAI.ai_run, 3, null), mframe_t(GameAI.ai_run, 5, null), mframe_t(GameAI.ai_run, 4, null), mframe_t(GameAI.ai_run, 5, null), mframe_t(GameAI.ai_run, 7, null), mframe_t(GameAI.ai_run, 7, null), mframe_t(GameAI.ai_run, 6, null), mframe_t(GameAI.ai_run, 6, tank_footstep))

        var tank_move_run = mmove_t(FRAME_walk05, FRAME_walk20, tank_frames_run, null)

        var tank_frames_stop_run = array<mframe_t>(mframe_t(GameAI.ai_run, 3, null), mframe_t(GameAI.ai_run, 3, null), mframe_t(GameAI.ai_run, 2, null), mframe_t(GameAI.ai_run, 2, null), mframe_t(GameAI.ai_run, 4, tank_footstep))

        var tank_move_stop_run = mmove_t(FRAME_walk21, FRAME_walk25, tank_frames_stop_run, tank_walk)

        //
        // pain
        //

        var tank_frames_pain1 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var tank_move_pain1 = mmove_t(FRAME_pain101, FRAME_pain104, tank_frames_pain1, tank_run)

        var tank_frames_pain2 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var tank_move_pain2 = mmove_t(FRAME_pain201, FRAME_pain205, tank_frames_pain2, tank_run)

        var tank_frames_pain3 = array<mframe_t>(mframe_t(GameAI.ai_move, -7, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, tank_footstep))

        var tank_move_pain3 = mmove_t(FRAME_pain301, FRAME_pain316, tank_frames_pain3, tank_run)

        var tank_pain: EntPainAdapter = object : EntPainAdapter() {
            public fun getID(): String {
                return "tank_pain"
            }

            public fun pain(self: edict_t, other: edict_t, kick: Float, damage: Int) {
                if (self.health < (self.max_health / 2))
                    self.s.skinnum = self.s.skinnum or 1

                if (damage <= 10)
                    return

                if (GameBase.level.time < self.pain_debounce_time)
                    return

                if (damage <= 30)
                    if (Lib.random() > 0.2)
                        return

                // If hard or nightmare, don't go into pain while attacking
                if (GameBase.skill.value >= 2) {
                    if ((self.s.frame >= FRAME_attak301) && (self.s.frame <= FRAME_attak330))
                        return
                    if ((self.s.frame >= FRAME_attak101) && (self.s.frame <= FRAME_attak116))
                        return
                }

                self.pain_debounce_time = GameBase.level.time + 3
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain, 1, Defines.ATTN_NORM, 0)

                if (GameBase.skill.value == 3)
                    return  // no pain anims in nightmare

                if (damage <= 30)
                    self.monsterinfo.currentmove = tank_move_pain1
                else if (damage <= 60)
                    self.monsterinfo.currentmove = tank_move_pain2
                else
                    self.monsterinfo.currentmove = tank_move_pain3
            }
        }

        //
        // attacks
        //

        var TankBlaster: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "TankBlaster"
            }

            public fun think(self: edict_t): Boolean {
                val forward = floatArray(0.0, 0.0, 0.0)
                val right = floatArray(0.0, 0.0, 0.0)
                val start = floatArray(0.0, 0.0, 0.0)
                val end = floatArray(0.0, 0.0, 0.0)
                val dir = floatArray(0.0, 0.0, 0.0)
                val flash_number: Int

                if (self.s.frame == FRAME_attak110)
                    flash_number = Defines.MZ2_TANK_BLASTER_1
                else if (self.s.frame == FRAME_attak113)
                    flash_number = Defines.MZ2_TANK_BLASTER_2
                else
                // (self.s.frame == FRAME_attak116)
                    flash_number = Defines.MZ2_TANK_BLASTER_3

                Math3D.AngleVectors(self.s.angles, forward, right, null)
                Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start)

                Math3D.VectorCopy(self.enemy.s.origin, end)
                end[2] += self.enemy.viewheight
                Math3D.VectorSubtract(end, start, dir)

                Monster.monster_fire_blaster(self, start, dir, 30, 800, flash_number, Defines.EF_BLASTER)

                return true
            }
        }

        var TankStrike: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "TankStrike"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_strike, 1, Defines.ATTN_NORM, 0)

                return true
            }
        }

        var TankRocket: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "TankRocket"
            }

            public fun think(self: edict_t): Boolean {
                val forward = floatArray(0.0, 0.0, 0.0)
                val right = floatArray(0.0, 0.0, 0.0)
                val start = floatArray(0.0, 0.0, 0.0)
                val dir = floatArray(0.0, 0.0, 0.0)
                val vec = floatArray(0.0, 0.0, 0.0)
                val flash_number: Int

                if (self.s.frame == FRAME_attak324)
                    flash_number = Defines.MZ2_TANK_ROCKET_1
                else if (self.s.frame == FRAME_attak327)
                    flash_number = Defines.MZ2_TANK_ROCKET_2
                else
                // (self.s.frame == FRAME_attak330)
                    flash_number = Defines.MZ2_TANK_ROCKET_3

                Math3D.AngleVectors(self.s.angles, forward, right, null)
                Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start)

                Math3D.VectorCopy(self.enemy.s.origin, vec)
                vec[2] += self.enemy.viewheight
                Math3D.VectorSubtract(vec, start, dir)
                Math3D.VectorNormalize(dir)

                Monster.monster_fire_rocket(self, start, dir, 50, 550, flash_number)
                return true
            }
        }

        var TankMachineGun: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "TankMachineGun"
            }

            public fun think(self: edict_t): Boolean {

                val dir = floatArray(0.0, 0.0, 0.0)
                val vec = floatArray(0.0, 0.0, 0.0)
                val start = floatArray(0.0, 0.0, 0.0)
                val forward = floatArray(0.0, 0.0, 0.0)
                val right = floatArray(0.0, 0.0, 0.0)
                val flash_number: Int

                flash_number = Defines.MZ2_TANK_MACHINEGUN_1 + (self.s.frame - FRAME_attak406)

                Math3D.AngleVectors(self.s.angles, forward, right, null)
                Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_number], forward, right, start)

                if (self.enemy != null) {
                    Math3D.VectorCopy(self.enemy.s.origin, vec)
                    vec[2] += self.enemy.viewheight
                    Math3D.VectorSubtract(vec, start, vec)
                    Math3D.vectoangles(vec, vec)
                    dir[0] = vec[0]
                } else {
                    dir[0] = 0
                }
                if (self.s.frame <= FRAME_attak415)
                    dir[1] = self.s.angles[1] - 8 * (self.s.frame - FRAME_attak411)
                else
                    dir[1] = self.s.angles[1] + 8 * (self.s.frame - FRAME_attak419)
                dir[2] = 0

                Math3D.AngleVectors(dir, forward, null, null)

                Monster.monster_fire_bullet(self, start, forward, 20, 4, Defines.DEFAULT_BULLET_HSPREAD, Defines.DEFAULT_BULLET_VSPREAD, flash_number)

                return true
            }
        }

        var tank_reattack_blaster: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "tank_reattack_blaster"
            }

            public fun think(self: edict_t): Boolean {
                if (GameBase.skill.value >= 2)
                    if (GameUtil.visible(self, self.enemy))
                        if (self.enemy.health > 0)
                            if (Lib.random() <= 0.6) {
                                self.monsterinfo.currentmove = tank_move_reattack_blast
                                return true
                            }
                self.monsterinfo.currentmove = tank_move_attack_post_blast
                return true
            }
        }

        var tank_frames_attack_blast = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, -1, null), mframe_t(GameAI.ai_charge, -2, null), mframe_t(GameAI.ai_charge, -1, null), mframe_t(GameAI.ai_charge, -1, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, TankBlaster), // 10
                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, TankBlaster), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, TankBlaster) // 16
        )

        var tank_move_attack_blast = mmove_t(FRAME_attak101, FRAME_attak116, tank_frames_attack_blast, tank_reattack_blaster)

        var tank_frames_reattack_blast = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, TankBlaster), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, TankBlaster) // 16)
        )

        var tank_move_reattack_blast = mmove_t(FRAME_attak111, FRAME_attak116, tank_frames_reattack_blast, tank_reattack_blaster)

        var tank_frames_attack_post_blast = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), // 17)
                mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, -2, tank_footstep) // 22
        )

        var tank_move_attack_post_blast = mmove_t(FRAME_attak117, FRAME_attak122, tank_frames_attack_post_blast, tank_run)

        var tank_poststrike: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "tank_poststrike"
            }

            public fun think(self: edict_t): Boolean {
                self.enemy = null
                tank_run.think(self)
                return true
            }
        }

        var tank_doattack_rocket: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "tank_doattack_rocket"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = tank_move_attack_fire_rocket
                return true
            }
        }

        var tank_refire_rocket: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "tank_refire_rocket"
            }

            public fun think(self: edict_t): Boolean {
                // Only on hard or nightmare
                if (GameBase.skill.value >= 2)
                    if (self.enemy.health > 0)
                        if (GameUtil.visible(self, self.enemy))
                            if (Lib.random() <= 0.4) {
                                self.monsterinfo.currentmove = tank_move_attack_fire_rocket
                                return true
                            }
                self.monsterinfo.currentmove = tank_move_attack_post_rocket
                return true
            }
        }

        var tank_frames_attack_strike = array<mframe_t>(mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 6, null), mframe_t(GameAI.ai_move, 7, null), mframe_t(GameAI.ai_move, 9, tank_footstep), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 2, tank_footstep), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, 0, tank_windup), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, TankStrike), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, -3, null), mframe_t(GameAI.ai_move, -10, null), mframe_t(GameAI.ai_move, -10, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, -3, null), mframe_t(GameAI.ai_move, -2, tank_footstep))

        var tank_move_attack_strike = mmove_t(FRAME_attak201, FRAME_attak238, tank_frames_attack_strike, tank_poststrike)

        var tank_frames_attack_pre_rocket = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), // 10)

                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 1, null), mframe_t(GameAI.ai_charge, 2, null), mframe_t(GameAI.ai_charge, 7, null), mframe_t(GameAI.ai_charge, 7, null), mframe_t(GameAI.ai_charge, 7, tank_footstep), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), // 20)

                mframe_t(GameAI.ai_charge, -3, null))

        var tank_move_attack_pre_rocket = mmove_t(FRAME_attak301, FRAME_attak321, tank_frames_attack_pre_rocket, tank_doattack_rocket)

        var tank_frames_attack_fire_rocket = array<mframe_t>(mframe_t(GameAI.ai_charge, -3, null), // Loop Start 22 )
                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, TankRocket), // 24)
                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, TankRocket), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, -1, TankRocket) // 30 Loop End
        )

        var tank_move_attack_fire_rocket = mmove_t(FRAME_attak322, FRAME_attak330, tank_frames_attack_fire_rocket, tank_refire_rocket)

        var tank_frames_attack_post_rocket = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), // 31)
                mframe_t(GameAI.ai_charge, -1, null), mframe_t(GameAI.ai_charge, -1, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 2, null), mframe_t(GameAI.ai_charge, 3, null), mframe_t(GameAI.ai_charge, 4, null), mframe_t(GameAI.ai_charge, 2, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), // 40)

                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, -9, null), mframe_t(GameAI.ai_charge, -8, null), mframe_t(GameAI.ai_charge, -7, null), mframe_t(GameAI.ai_charge, -1, null), mframe_t(GameAI.ai_charge, -1, tank_footstep), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), // 50)

                mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null))

        var tank_move_attack_post_rocket = mmove_t(FRAME_attak331, FRAME_attak353, tank_frames_attack_post_rocket, tank_run)

        var tank_frames_attack_chain = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(null, 0, TankMachineGun), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null))

        var tank_move_attack_chain = mmove_t(FRAME_attak401, FRAME_attak429, tank_frames_attack_chain, tank_run)

        var tank_attack: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "tank_attack"
            }

            public fun think(self: edict_t): Boolean {
                val vec = floatArray(0.0, 0.0, 0.0)
                val range: Float
                val r: Float

                if (self.enemy.health < 0) {
                    self.monsterinfo.currentmove = tank_move_attack_strike
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags and Defines.AI_BRUTAL.inv()
                    return true
                }

                Math3D.VectorSubtract(self.enemy.s.origin, self.s.origin, vec)
                range = Math3D.VectorLength(vec)

                r = Lib.random()

                if (range <= 125) {
                    if (r < 0.4)
                        self.monsterinfo.currentmove = tank_move_attack_chain
                    else
                        self.monsterinfo.currentmove = tank_move_attack_blast
                } else if (range <= 250) {
                    if (r < 0.5)
                        self.monsterinfo.currentmove = tank_move_attack_chain
                    else
                        self.monsterinfo.currentmove = tank_move_attack_blast
                } else {
                    if (r < 0.33)
                        self.monsterinfo.currentmove = tank_move_attack_chain
                    else if (r < 0.66) {
                        self.monsterinfo.currentmove = tank_move_attack_pre_rocket
                        self.pain_debounce_time = GameBase.level.time + 5.0.toFloat() // no
                        // pain
                        // for
                        // a
                        // while
                    } else
                        self.monsterinfo.currentmove = tank_move_attack_blast
                }
                return true
            }
        }

        //
        // death
        //
        var tank_dead: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "tank_dead"
            }

            public fun think(self: edict_t): Boolean {
                Math3D.VectorSet(self.mins, -16, -16, -16)
                Math3D.VectorSet(self.maxs, 16, 16, -0)
                self.movetype = Defines.MOVETYPE_TOSS
                self.svflags = self.svflags or Defines.SVF_DEADMONSTER
                self.nextthink = 0
                GameBase.gi.linkentity(self)
                return true
            }
        }

        var tank_frames_death1 = array<mframe_t>(mframe_t(GameAI.ai_move, -7, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, 6, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -3, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -4, null), mframe_t(GameAI.ai_move, -6, null), mframe_t(GameAI.ai_move, -4, null), mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, -7, null), mframe_t(GameAI.ai_move, -15, tank_thud), mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var tank_move_death = mmove_t(FRAME_death101, FRAME_death132, tank_frames_death1, tank_dead)

        var tank_die: EntDieAdapter = object : EntDieAdapter() {
            public fun getID(): String {
                return "tank_die"
            }

            public fun die(self: edict_t, inflictor: edict_t, attacker: edict_t, damage: Int, point: FloatArray) {
                var n: Int

                // check for gib
                if (self.health <= self.gib_health) {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("misc/udeath.wav"), 1, Defines.ATTN_NORM, 0)
                    run {
                        n = 0
                        while (n < 1 /* 4 */) {
                            GameMisc.ThrowGib(self, "models/objects/gibs/sm_meat/tris.md2", damage, Defines.GIB_ORGANIC)
                            n++
                        }
                    }
                    run {
                        n = 0
                        while (n < 4) {
                            GameMisc.ThrowGib(self, "models/objects/gibs/sm_metal/tris.md2", damage, Defines.GIB_METALLIC)
                            n++
                        }
                    }
                    GameMisc.ThrowGib(self, "models/objects/gibs/chest/tris.md2", damage, Defines.GIB_ORGANIC)
                    GameMisc.ThrowHead(self, "models/objects/gibs/gear/tris.md2", damage, Defines.GIB_METALLIC)
                    self.deadflag = Defines.DEAD_DEAD
                    return
                }

                if (self.deadflag == Defines.DEAD_DEAD)
                    return

                // regular death
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_die, 1, Defines.ATTN_NORM, 0)
                self.deadflag = Defines.DEAD_DEAD
                self.takedamage = Defines.DAMAGE_YES

                self.monsterinfo.currentmove = tank_move_death

            }
        }

        //
        // monster_tank
        //

        /*
     * QUAKED monster_tank (1 .5 0) (-32 -32 -16) (32 32 72) Ambush
     * Trigger_Spawn Sight
     */
        /*
     * QUAKED monster_tank_commander (1 .5 0) (-32 -32 -16) (32 32 72) Ambush
     * Trigger_Spawn Sight
     */
        public var SP_monster_tank: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "SP_monster_tank"
            }

            public fun think(self: edict_t): Boolean {
                if (GameBase.deathmatch.value != 0) {
                    GameUtil.G_FreeEdict(self)
                    return true
                }

                self.s.modelindex = GameBase.gi.modelindex("models/monsters/tank/tris.md2")
                Math3D.VectorSet(self.mins, -32, -32, -16)
                Math3D.VectorSet(self.maxs, 32, 32, 72)
                self.movetype = Defines.MOVETYPE_STEP
                self.solid = Defines.SOLID_BBOX

                sound_pain = GameBase.gi.soundindex("tank/tnkpain2.wav")
                sound_thud = GameBase.gi.soundindex("tank/tnkdeth2.wav")
                sound_idle = GameBase.gi.soundindex("tank/tnkidle1.wav")
                sound_die = GameBase.gi.soundindex("tank/death.wav")
                sound_step = GameBase.gi.soundindex("tank/step.wav")
                sound_windup = GameBase.gi.soundindex("tank/tnkatck4.wav")
                sound_strike = GameBase.gi.soundindex("tank/tnkatck5.wav")
                sound_sight = GameBase.gi.soundindex("tank/sight1.wav")

                GameBase.gi.soundindex("tank/tnkatck1.wav")
                GameBase.gi.soundindex("tank/tnkatk2a.wav")
                GameBase.gi.soundindex("tank/tnkatk2b.wav")
                GameBase.gi.soundindex("tank/tnkatk2c.wav")
                GameBase.gi.soundindex("tank/tnkatk2d.wav")
                GameBase.gi.soundindex("tank/tnkatk2e.wav")
                GameBase.gi.soundindex("tank/tnkatck3.wav")

                if (Lib.strcmp(self.classname, "monster_tank_commander") == 0) {
                    self.health = 1000
                    self.gib_health = -225
                } else {
                    self.health = 750
                    self.gib_health = -200
                }

                self.mass = 500

                self.pain = tank_pain
                self.die = tank_die
                self.monsterinfo.stand = tank_stand
                self.monsterinfo.walk = tank_walk
                self.monsterinfo.run = tank_run
                self.monsterinfo.dodge = null
                self.monsterinfo.attack = tank_attack
                self.monsterinfo.melee = null
                self.monsterinfo.sight = tank_sight
                self.monsterinfo.idle = tank_idle

                GameBase.gi.linkentity(self)

                self.monsterinfo.currentmove = tank_move_stand
                self.monsterinfo.scale = MODEL_SCALE

                GameAI.walkmonster_start.think(self)

                if (Lib.strcmp(self.classname, "monster_tank_commander") == 0)
                    self.s.skinnum = 2
                return true
            }
        }
    }

}