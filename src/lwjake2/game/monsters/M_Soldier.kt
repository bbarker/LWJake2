/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package lwjake2.game.monsters

import lwjake2.Defines
import lwjake2.game.EntDieAdapter
import lwjake2.game.EntDodgeAdapter
import lwjake2.game.EntInteractAdapter
import lwjake2.game.EntPainAdapter
import lwjake2.game.EntThinkAdapter
import lwjake2.game.GameAI
import lwjake2.game.GameBase
import lwjake2.game.GameMisc
import lwjake2.game.GameUtil
import lwjake2.game.Monster
import lwjake2.game.edict_t
import lwjake2.game.mframe_t
import lwjake2.game.mmove_t
import lwjake2.game.monsters.M_Flash
import lwjake2.qcommon.Com
import lwjake2.util.Lib
import lwjake2.util.Math3D

public class M_Soldier {
    companion object {

        // This file generated by ModelGen - Do NOT Modify

        public val FRAME_attak101: Int = 0

        public val FRAME_attak102: Int = 1

        public val FRAME_attak103: Int = 2

        public val FRAME_attak104: Int = 3

        public val FRAME_attak105: Int = 4

        public val FRAME_attak106: Int = 5

        public val FRAME_attak107: Int = 6

        public val FRAME_attak108: Int = 7

        public val FRAME_attak109: Int = 8

        public val FRAME_attak110: Int = 9

        public val FRAME_attak111: Int = 10

        public val FRAME_attak112: Int = 11

        public val FRAME_attak201: Int = 12

        public val FRAME_attak202: Int = 13

        public val FRAME_attak203: Int = 14

        public val FRAME_attak204: Int = 15

        public val FRAME_attak205: Int = 16

        public val FRAME_attak206: Int = 17

        public val FRAME_attak207: Int = 18

        public val FRAME_attak208: Int = 19

        public val FRAME_attak209: Int = 20

        public val FRAME_attak210: Int = 21

        public val FRAME_attak211: Int = 22

        public val FRAME_attak212: Int = 23

        public val FRAME_attak213: Int = 24

        public val FRAME_attak214: Int = 25

        public val FRAME_attak215: Int = 26

        public val FRAME_attak216: Int = 27

        public val FRAME_attak217: Int = 28

        public val FRAME_attak218: Int = 29

        public val FRAME_attak301: Int = 30

        public val FRAME_attak302: Int = 31

        public val FRAME_attak303: Int = 32

        public val FRAME_attak304: Int = 33

        public val FRAME_attak305: Int = 34

        public val FRAME_attak306: Int = 35

        public val FRAME_attak307: Int = 36

        public val FRAME_attak308: Int = 37

        public val FRAME_attak309: Int = 38

        public val FRAME_attak401: Int = 39

        public val FRAME_attak402: Int = 40

        public val FRAME_attak403: Int = 41

        public val FRAME_attak404: Int = 42

        public val FRAME_attak405: Int = 43

        public val FRAME_attak406: Int = 44

        public val FRAME_duck01: Int = 45

        public val FRAME_duck02: Int = 46

        public val FRAME_duck03: Int = 47

        public val FRAME_duck04: Int = 48

        public val FRAME_duck05: Int = 49

        public val FRAME_pain101: Int = 50

        public val FRAME_pain102: Int = 51

        public val FRAME_pain103: Int = 52

        public val FRAME_pain104: Int = 53

        public val FRAME_pain105: Int = 54

        public val FRAME_pain201: Int = 55

        public val FRAME_pain202: Int = 56

        public val FRAME_pain203: Int = 57

        public val FRAME_pain204: Int = 58

        public val FRAME_pain205: Int = 59

        public val FRAME_pain206: Int = 60

        public val FRAME_pain207: Int = 61

        public val FRAME_pain301: Int = 62

        public val FRAME_pain302: Int = 63

        public val FRAME_pain303: Int = 64

        public val FRAME_pain304: Int = 65

        public val FRAME_pain305: Int = 66

        public val FRAME_pain306: Int = 67

        public val FRAME_pain307: Int = 68

        public val FRAME_pain308: Int = 69

        public val FRAME_pain309: Int = 70

        public val FRAME_pain310: Int = 71

        public val FRAME_pain311: Int = 72

        public val FRAME_pain312: Int = 73

        public val FRAME_pain313: Int = 74

        public val FRAME_pain314: Int = 75

        public val FRAME_pain315: Int = 76

        public val FRAME_pain316: Int = 77

        public val FRAME_pain317: Int = 78

        public val FRAME_pain318: Int = 79

        public val FRAME_pain401: Int = 80

        public val FRAME_pain402: Int = 81

        public val FRAME_pain403: Int = 82

        public val FRAME_pain404: Int = 83

        public val FRAME_pain405: Int = 84

        public val FRAME_pain406: Int = 85

        public val FRAME_pain407: Int = 86

        public val FRAME_pain408: Int = 87

        public val FRAME_pain409: Int = 88

        public val FRAME_pain410: Int = 89

        public val FRAME_pain411: Int = 90

        public val FRAME_pain412: Int = 91

        public val FRAME_pain413: Int = 92

        public val FRAME_pain414: Int = 93

        public val FRAME_pain415: Int = 94

        public val FRAME_pain416: Int = 95

        public val FRAME_pain417: Int = 96

        public val FRAME_run01: Int = 97

        public val FRAME_run02: Int = 98

        public val FRAME_run03: Int = 99

        public val FRAME_run04: Int = 100

        public val FRAME_run05: Int = 101

        public val FRAME_run06: Int = 102

        public val FRAME_run07: Int = 103

        public val FRAME_run08: Int = 104

        public val FRAME_run09: Int = 105

        public val FRAME_run10: Int = 106

        public val FRAME_run11: Int = 107

        public val FRAME_run12: Int = 108

        public val FRAME_runs01: Int = 109

        public val FRAME_runs02: Int = 110

        public val FRAME_runs03: Int = 111

        public val FRAME_runs04: Int = 112

        public val FRAME_runs05: Int = 113

        public val FRAME_runs06: Int = 114

        public val FRAME_runs07: Int = 115

        public val FRAME_runs08: Int = 116

        public val FRAME_runs09: Int = 117

        public val FRAME_runs10: Int = 118

        public val FRAME_runs11: Int = 119

        public val FRAME_runs12: Int = 120

        public val FRAME_runs13: Int = 121

        public val FRAME_runs14: Int = 122

        public val FRAME_runs15: Int = 123

        public val FRAME_runs16: Int = 124

        public val FRAME_runs17: Int = 125

        public val FRAME_runs18: Int = 126

        public val FRAME_runt01: Int = 127

        public val FRAME_runt02: Int = 128

        public val FRAME_runt03: Int = 129

        public val FRAME_runt04: Int = 130

        public val FRAME_runt05: Int = 131

        public val FRAME_runt06: Int = 132

        public val FRAME_runt07: Int = 133

        public val FRAME_runt08: Int = 134

        public val FRAME_runt09: Int = 135

        public val FRAME_runt10: Int = 136

        public val FRAME_runt11: Int = 137

        public val FRAME_runt12: Int = 138

        public val FRAME_runt13: Int = 139

        public val FRAME_runt14: Int = 140

        public val FRAME_runt15: Int = 141

        public val FRAME_runt16: Int = 142

        public val FRAME_runt17: Int = 143

        public val FRAME_runt18: Int = 144

        public val FRAME_runt19: Int = 145

        public val FRAME_stand101: Int = 146

        public val FRAME_stand102: Int = 147

        public val FRAME_stand103: Int = 148

        public val FRAME_stand104: Int = 149

        public val FRAME_stand105: Int = 150

        public val FRAME_stand106: Int = 151

        public val FRAME_stand107: Int = 152

        public val FRAME_stand108: Int = 153

        public val FRAME_stand109: Int = 154

        public val FRAME_stand110: Int = 155

        public val FRAME_stand111: Int = 156

        public val FRAME_stand112: Int = 157

        public val FRAME_stand113: Int = 158

        public val FRAME_stand114: Int = 159

        public val FRAME_stand115: Int = 160

        public val FRAME_stand116: Int = 161

        public val FRAME_stand117: Int = 162

        public val FRAME_stand118: Int = 163

        public val FRAME_stand119: Int = 164

        public val FRAME_stand120: Int = 165

        public val FRAME_stand121: Int = 166

        public val FRAME_stand122: Int = 167

        public val FRAME_stand123: Int = 168

        public val FRAME_stand124: Int = 169

        public val FRAME_stand125: Int = 170

        public val FRAME_stand126: Int = 171

        public val FRAME_stand127: Int = 172

        public val FRAME_stand128: Int = 173

        public val FRAME_stand129: Int = 174

        public val FRAME_stand130: Int = 175

        public val FRAME_stand301: Int = 176

        public val FRAME_stand302: Int = 177

        public val FRAME_stand303: Int = 178

        public val FRAME_stand304: Int = 179

        public val FRAME_stand305: Int = 180

        public val FRAME_stand306: Int = 181

        public val FRAME_stand307: Int = 182

        public val FRAME_stand308: Int = 183

        public val FRAME_stand309: Int = 184

        public val FRAME_stand310: Int = 185

        public val FRAME_stand311: Int = 186

        public val FRAME_stand312: Int = 187

        public val FRAME_stand313: Int = 188

        public val FRAME_stand314: Int = 189

        public val FRAME_stand315: Int = 190

        public val FRAME_stand316: Int = 191

        public val FRAME_stand317: Int = 192

        public val FRAME_stand318: Int = 193

        public val FRAME_stand319: Int = 194

        public val FRAME_stand320: Int = 195

        public val FRAME_stand321: Int = 196

        public val FRAME_stand322: Int = 197

        public val FRAME_stand323: Int = 198

        public val FRAME_stand324: Int = 199

        public val FRAME_stand325: Int = 200

        public val FRAME_stand326: Int = 201

        public val FRAME_stand327: Int = 202

        public val FRAME_stand328: Int = 203

        public val FRAME_stand329: Int = 204

        public val FRAME_stand330: Int = 205

        public val FRAME_stand331: Int = 206

        public val FRAME_stand332: Int = 207

        public val FRAME_stand333: Int = 208

        public val FRAME_stand334: Int = 209

        public val FRAME_stand335: Int = 210

        public val FRAME_stand336: Int = 211

        public val FRAME_stand337: Int = 212

        public val FRAME_stand338: Int = 213

        public val FRAME_stand339: Int = 214

        public val FRAME_walk101: Int = 215

        public val FRAME_walk102: Int = 216

        public val FRAME_walk103: Int = 217

        public val FRAME_walk104: Int = 218

        public val FRAME_walk105: Int = 219

        public val FRAME_walk106: Int = 220

        public val FRAME_walk107: Int = 221

        public val FRAME_walk108: Int = 222

        public val FRAME_walk109: Int = 223

        public val FRAME_walk110: Int = 224

        public val FRAME_walk111: Int = 225

        public val FRAME_walk112: Int = 226

        public val FRAME_walk113: Int = 227

        public val FRAME_walk114: Int = 228

        public val FRAME_walk115: Int = 229

        public val FRAME_walk116: Int = 230

        public val FRAME_walk117: Int = 231

        public val FRAME_walk118: Int = 232

        public val FRAME_walk119: Int = 233

        public val FRAME_walk120: Int = 234

        public val FRAME_walk121: Int = 235

        public val FRAME_walk122: Int = 236

        public val FRAME_walk123: Int = 237

        public val FRAME_walk124: Int = 238

        public val FRAME_walk125: Int = 239

        public val FRAME_walk126: Int = 240

        public val FRAME_walk127: Int = 241

        public val FRAME_walk128: Int = 242

        public val FRAME_walk129: Int = 243

        public val FRAME_walk130: Int = 244

        public val FRAME_walk131: Int = 245

        public val FRAME_walk132: Int = 246

        public val FRAME_walk133: Int = 247

        public val FRAME_walk201: Int = 248

        public val FRAME_walk202: Int = 249

        public val FRAME_walk203: Int = 250

        public val FRAME_walk204: Int = 251

        public val FRAME_walk205: Int = 252

        public val FRAME_walk206: Int = 253

        public val FRAME_walk207: Int = 254

        public val FRAME_walk208: Int = 255

        public val FRAME_walk209: Int = 256

        public val FRAME_walk210: Int = 257

        public val FRAME_walk211: Int = 258

        public val FRAME_walk212: Int = 259

        public val FRAME_walk213: Int = 260

        public val FRAME_walk214: Int = 261

        public val FRAME_walk215: Int = 262

        public val FRAME_walk216: Int = 263

        public val FRAME_walk217: Int = 264

        public val FRAME_walk218: Int = 265

        public val FRAME_walk219: Int = 266

        public val FRAME_walk220: Int = 267

        public val FRAME_walk221: Int = 268

        public val FRAME_walk222: Int = 269

        public val FRAME_walk223: Int = 270

        public val FRAME_walk224: Int = 271

        public val FRAME_death101: Int = 272

        public val FRAME_death102: Int = 273

        public val FRAME_death103: Int = 274

        public val FRAME_death104: Int = 275

        public val FRAME_death105: Int = 276

        public val FRAME_death106: Int = 277

        public val FRAME_death107: Int = 278

        public val FRAME_death108: Int = 279

        public val FRAME_death109: Int = 280

        public val FRAME_death110: Int = 281

        public val FRAME_death111: Int = 282

        public val FRAME_death112: Int = 283

        public val FRAME_death113: Int = 284

        public val FRAME_death114: Int = 285

        public val FRAME_death115: Int = 286

        public val FRAME_death116: Int = 287

        public val FRAME_death117: Int = 288

        public val FRAME_death118: Int = 289

        public val FRAME_death119: Int = 290

        public val FRAME_death120: Int = 291

        public val FRAME_death121: Int = 292

        public val FRAME_death122: Int = 293

        public val FRAME_death123: Int = 294

        public val FRAME_death124: Int = 295

        public val FRAME_death125: Int = 296

        public val FRAME_death126: Int = 297

        public val FRAME_death127: Int = 298

        public val FRAME_death128: Int = 299

        public val FRAME_death129: Int = 300

        public val FRAME_death130: Int = 301

        public val FRAME_death131: Int = 302

        public val FRAME_death132: Int = 303

        public val FRAME_death133: Int = 304

        public val FRAME_death134: Int = 305

        public val FRAME_death135: Int = 306

        public val FRAME_death136: Int = 307

        public val FRAME_death201: Int = 308

        public val FRAME_death202: Int = 309

        public val FRAME_death203: Int = 310

        public val FRAME_death204: Int = 311

        public val FRAME_death205: Int = 312

        public val FRAME_death206: Int = 313

        public val FRAME_death207: Int = 314

        public val FRAME_death208: Int = 315

        public val FRAME_death209: Int = 316

        public val FRAME_death210: Int = 317

        public val FRAME_death211: Int = 318

        public val FRAME_death212: Int = 319

        public val FRAME_death213: Int = 320

        public val FRAME_death214: Int = 321

        public val FRAME_death215: Int = 322

        public val FRAME_death216: Int = 323

        public val FRAME_death217: Int = 324

        public val FRAME_death218: Int = 325

        public val FRAME_death219: Int = 326

        public val FRAME_death220: Int = 327

        public val FRAME_death221: Int = 328

        public val FRAME_death222: Int = 329

        public val FRAME_death223: Int = 330

        public val FRAME_death224: Int = 331

        public val FRAME_death225: Int = 332

        public val FRAME_death226: Int = 333

        public val FRAME_death227: Int = 334

        public val FRAME_death228: Int = 335

        public val FRAME_death229: Int = 336

        public val FRAME_death230: Int = 337

        public val FRAME_death231: Int = 338

        public val FRAME_death232: Int = 339

        public val FRAME_death233: Int = 340

        public val FRAME_death234: Int = 341

        public val FRAME_death235: Int = 342

        public val FRAME_death301: Int = 343

        public val FRAME_death302: Int = 344

        public val FRAME_death303: Int = 345

        public val FRAME_death304: Int = 346

        public val FRAME_death305: Int = 347

        public val FRAME_death306: Int = 348

        public val FRAME_death307: Int = 349

        public val FRAME_death308: Int = 350

        public val FRAME_death309: Int = 351

        public val FRAME_death310: Int = 352

        public val FRAME_death311: Int = 353

        public val FRAME_death312: Int = 354

        public val FRAME_death313: Int = 355

        public val FRAME_death314: Int = 356

        public val FRAME_death315: Int = 357

        public val FRAME_death316: Int = 358

        public val FRAME_death317: Int = 359

        public val FRAME_death318: Int = 360

        public val FRAME_death319: Int = 361

        public val FRAME_death320: Int = 362

        public val FRAME_death321: Int = 363

        public val FRAME_death322: Int = 364

        public val FRAME_death323: Int = 365

        public val FRAME_death324: Int = 366

        public val FRAME_death325: Int = 367

        public val FRAME_death326: Int = 368

        public val FRAME_death327: Int = 369

        public val FRAME_death328: Int = 370

        public val FRAME_death329: Int = 371

        public val FRAME_death330: Int = 372

        public val FRAME_death331: Int = 373

        public val FRAME_death332: Int = 374

        public val FRAME_death333: Int = 375

        public val FRAME_death334: Int = 376

        public val FRAME_death335: Int = 377

        public val FRAME_death336: Int = 378

        public val FRAME_death337: Int = 379

        public val FRAME_death338: Int = 380

        public val FRAME_death339: Int = 381

        public val FRAME_death340: Int = 382

        public val FRAME_death341: Int = 383

        public val FRAME_death342: Int = 384

        public val FRAME_death343: Int = 385

        public val FRAME_death344: Int = 386

        public val FRAME_death345: Int = 387

        public val FRAME_death401: Int = 388

        public val FRAME_death402: Int = 389

        public val FRAME_death403: Int = 390

        public val FRAME_death404: Int = 391

        public val FRAME_death405: Int = 392

        public val FRAME_death406: Int = 393

        public val FRAME_death407: Int = 394

        public val FRAME_death408: Int = 395

        public val FRAME_death409: Int = 396

        public val FRAME_death410: Int = 397

        public val FRAME_death411: Int = 398

        public val FRAME_death412: Int = 399

        public val FRAME_death413: Int = 400

        public val FRAME_death414: Int = 401

        public val FRAME_death415: Int = 402

        public val FRAME_death416: Int = 403

        public val FRAME_death417: Int = 404

        public val FRAME_death418: Int = 405

        public val FRAME_death419: Int = 406

        public val FRAME_death420: Int = 407

        public val FRAME_death421: Int = 408

        public val FRAME_death422: Int = 409

        public val FRAME_death423: Int = 410

        public val FRAME_death424: Int = 411

        public val FRAME_death425: Int = 412

        public val FRAME_death426: Int = 413

        public val FRAME_death427: Int = 414

        public val FRAME_death428: Int = 415

        public val FRAME_death429: Int = 416

        public val FRAME_death430: Int = 417

        public val FRAME_death431: Int = 418

        public val FRAME_death432: Int = 419

        public val FRAME_death433: Int = 420

        public val FRAME_death434: Int = 421

        public val FRAME_death435: Int = 422

        public val FRAME_death436: Int = 423

        public val FRAME_death437: Int = 424

        public val FRAME_death438: Int = 425

        public val FRAME_death439: Int = 426

        public val FRAME_death440: Int = 427

        public val FRAME_death441: Int = 428

        public val FRAME_death442: Int = 429

        public val FRAME_death443: Int = 430

        public val FRAME_death444: Int = 431

        public val FRAME_death445: Int = 432

        public val FRAME_death446: Int = 433

        public val FRAME_death447: Int = 434

        public val FRAME_death448: Int = 435

        public val FRAME_death449: Int = 436

        public val FRAME_death450: Int = 437

        public val FRAME_death451: Int = 438

        public val FRAME_death452: Int = 439

        public val FRAME_death453: Int = 440

        public val FRAME_death501: Int = 441

        public val FRAME_death502: Int = 442

        public val FRAME_death503: Int = 443

        public val FRAME_death504: Int = 444

        public val FRAME_death505: Int = 445

        public val FRAME_death506: Int = 446

        public val FRAME_death507: Int = 447

        public val FRAME_death508: Int = 448

        public val FRAME_death509: Int = 449

        public val FRAME_death510: Int = 450

        public val FRAME_death511: Int = 451

        public val FRAME_death512: Int = 452

        public val FRAME_death513: Int = 453

        public val FRAME_death514: Int = 454

        public val FRAME_death515: Int = 455

        public val FRAME_death516: Int = 456

        public val FRAME_death517: Int = 457

        public val FRAME_death518: Int = 458

        public val FRAME_death519: Int = 459

        public val FRAME_death520: Int = 460

        public val FRAME_death521: Int = 461

        public val FRAME_death522: Int = 462

        public val FRAME_death523: Int = 463

        public val FRAME_death524: Int = 464

        public val FRAME_death601: Int = 465

        public val FRAME_death602: Int = 466

        public val FRAME_death603: Int = 467

        public val FRAME_death604: Int = 468

        public val FRAME_death605: Int = 469

        public val FRAME_death606: Int = 470

        public val FRAME_death607: Int = 471

        public val FRAME_death608: Int = 472

        public val FRAME_death609: Int = 473

        public val FRAME_death610: Int = 474

        public val MODEL_SCALE: Float = 1.200000.toFloat()

        var sound_idle: Int = 0

        var sound_sight1: Int = 0

        var sound_sight2: Int = 0

        var sound_pain_light: Int = 0

        var sound_pain: Int = 0

        var sound_pain_ss: Int = 0

        var sound_death_light: Int = 0

        var sound_death: Int = 0

        var sound_death_ss: Int = 0

        var sound_cock: Int = 0

        var soldier_dead: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_dead"
            }

            public fun think(self: edict_t): Boolean {

                Math3D.VectorSet(self.mins, -16, -16, -24)
                Math3D.VectorSet(self.maxs, 16, 16, -8)
                self.movetype = Defines.MOVETYPE_TOSS
                self.svflags = self.svflags or Defines.SVF_DEADMONSTER
                self.nextthink = 0
                GameBase.gi.linkentity(self)
                return true
            }
        }

        var soldier_die: EntDieAdapter = object : EntDieAdapter() {
            public fun getID(): String {
                return "soldier_die"
            }

            public fun die(self: edict_t, inflictor: edict_t, attacker: edict_t, damage: Int, point: FloatArray) {
                var n: Int

                // check for gib
                if (self.health <= self.gib_health) {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("misc/udeath.wav"), 1, Defines.ATTN_NORM, 0)
                    run {
                        n = 0
                        while (n < 3) {
                            GameMisc.ThrowGib(self, "models/objects/gibs/sm_meat/tris.md2", damage, Defines.GIB_ORGANIC)
                            n++
                        }
                    }
                    GameMisc.ThrowGib(self, "models/objects/gibs/chest/tris.md2", damage, Defines.GIB_ORGANIC)
                    GameMisc.ThrowHead(self, "models/objects/gibs/head2/tris.md2", damage, Defines.GIB_ORGANIC)
                    self.deadflag = Defines.DEAD_DEAD
                    return
                }

                if (self.deadflag == Defines.DEAD_DEAD)
                    return

                // regular death
                self.deadflag = Defines.DEAD_DEAD
                self.takedamage = Defines.DAMAGE_YES
                self.s.skinnum = self.s.skinnum or 1

                if (self.s.skinnum == 1)
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_death_light, 1, Defines.ATTN_NORM, 0)
                else if (self.s.skinnum == 3)
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_death, 1, Defines.ATTN_NORM, 0)
                else
                // (self.s.skinnum == 5)
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_death_ss, 1, Defines.ATTN_NORM, 0)

                if (Math.abs((self.s.origin[2] + self.viewheight) - point[2]) <= 4) {
                    // head shot
                    self.monsterinfo.currentmove = soldier_move_death3
                    return
                }

                n = Lib.rand() % 5
                if (n == 0)
                    self.monsterinfo.currentmove = soldier_move_death1
                else if (n == 1)
                    self.monsterinfo.currentmove = soldier_move_death2
                else if (n == 2)
                    self.monsterinfo.currentmove = soldier_move_death4
                else if (n == 3)
                    self.monsterinfo.currentmove = soldier_move_death5
                else
                    self.monsterinfo.currentmove = soldier_move_death6
            }
        }

        var soldier_attack1_refire1: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_attack1_refire1"
            }

            public fun think(self: edict_t): Boolean {
                if (self.s.skinnum > 1)
                    return true

                if (self.enemy.health <= 0)
                    return true

                if (((GameBase.skill.value == 3) && (Lib.random() < 0.5)) || (GameUtil.range(self, self.enemy) == Defines.RANGE_MELEE))
                    self.monsterinfo.nextframe = FRAME_attak102
                else
                    self.monsterinfo.nextframe = FRAME_attak110
                return true
            }
        }

        var soldier_attack1_refire2: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_attack1_refire2"
            }

            public fun think(self: edict_t): Boolean {
                if (self.s.skinnum < 2)
                    return true

                if (self.enemy.health <= 0)
                    return true

                if (((GameBase.skill.value == 3) && (Lib.random() < 0.5)) || (GameUtil.range(self, self.enemy) == Defines.RANGE_MELEE))
                    self.monsterinfo.nextframe = FRAME_attak102
                return true
            }
        }

        var soldier_attack2_refire1: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_attack2_refire1"
            }

            public fun think(self: edict_t): Boolean {
                if (self.s.skinnum > 1)
                    return true

                if (self.enemy.health <= 0)
                    return true

                if (((GameBase.skill.value == 3) && (Lib.random() < 0.5)) || (GameUtil.range(self, self.enemy) == Defines.RANGE_MELEE))
                    self.monsterinfo.nextframe = FRAME_attak204
                else
                    self.monsterinfo.nextframe = FRAME_attak216
                return true
            }
        }

        var soldier_attack2_refire2: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_attack2_refire2"
            }

            public fun think(self: edict_t): Boolean {
                if (self.s.skinnum < 2)
                    return true

                if (self.enemy.health <= 0)
                    return true

                if (((GameBase.skill.value == 3) && (Lib.random() < 0.5)) || (GameUtil.range(self, self.enemy) == Defines.RANGE_MELEE))
                    self.monsterinfo.nextframe = FRAME_attak204
                return true
            }
        }

        var soldier_attack3_refire: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_attack3_refire"
            }

            public fun think(self: edict_t): Boolean {
                if ((GameBase.level.time + 0.4) < self.monsterinfo.pausetime)
                    self.monsterinfo.nextframe = FRAME_attak303
                return true
            }
        }

        var soldier_attack6_refire: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_attack6_refire"
            }

            public fun think(self: edict_t): Boolean {
                if (self.enemy.health <= 0)
                    return true

                if (GameUtil.range(self, self.enemy) < Defines.RANGE_MID)
                    return true

                if (GameBase.skill.value == 3)
                    self.monsterinfo.nextframe = FRAME_runs03
                return true
            }
        }

        // ATTACK6 (run & shoot)
        var soldier_fire8: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_fire8"
            }

            public fun think(self: edict_t): Boolean {
                soldier_fire(self, 7)
                return true
            }
        }

        // ATTACK1 (blaster/shotgun)

        var soldier_fire1: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_fire1"
            }

            public fun think(self: edict_t): Boolean {
                soldier_fire(self, 0)
                return true
            }
        }

        // ATTACK2 (blaster/shotgun)

        var soldier_fire2: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_fire2"
            }

            public fun think(self: edict_t): Boolean {
                soldier_fire(self, 1)
                return true
            }
        }

        var soldier_duck_down: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_duck_down"
            }

            public fun think(self: edict_t): Boolean {
                if ((self.monsterinfo.aiflags and Defines.AI_DUCKED) != 0)
                    return true
                self.monsterinfo.aiflags = self.monsterinfo.aiflags or Defines.AI_DUCKED
                self.maxs[2] -= 32
                self.takedamage = Defines.DAMAGE_YES
                self.monsterinfo.pausetime = GameBase.level.time + 1
                GameBase.gi.linkentity(self)
                return true
            }
        }

        var soldier_fire3: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_fire3"
            }

            public fun think(self: edict_t): Boolean {
                soldier_duck_down.think(self)
                soldier_fire(self, 2)
                return true
            }
        }

        // ATTACK4 (machinegun)

        var soldier_fire4: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_fire4"
            }

            public fun think(self: edict_t): Boolean {
                soldier_fire(self, 3)
                //
                //	if (self.enemy.health <= 0)
                //		return;
                //
                //	if ( ((skill.value == 3) && (random() < 0.5)) || (range(self,
                // self.enemy) == RANGE_MELEE) )
                //		self.monsterinfo.nextframe = FRAME_attak402;
                return true
            }
        }

        //
        // DEATH
        //

        var soldier_fire6: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_fire6"
            }

            public fun think(self: edict_t): Boolean {
                soldier_fire(self, 5)
                return true
            }
        }

        var soldier_fire7: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_fire7"
            }

            public fun think(self: edict_t): Boolean {
                soldier_fire(self, 6)
                return true
            }
        }

        var soldier_idle: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_idle"
            }

            public fun think(self: edict_t): Boolean {
                if (Lib.random() > 0.8)
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_idle, 1, Defines.ATTN_IDLE, 0)
                return true
            }
        }

        var soldier_stand: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_stand"
            }

            public fun think(self: edict_t): Boolean {
                if ((self.monsterinfo.currentmove == soldier_move_stand3) || (Lib.random() < 0.8))
                    self.monsterinfo.currentmove = soldier_move_stand1
                else
                    self.monsterinfo.currentmove = soldier_move_stand3
                return true
            }
        }

        //
        // WALK
        //
        var soldier_walk1_random: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_walk1_random"
            }

            public fun think(self: edict_t): Boolean {
                if (Lib.random() > 0.1)
                    self.monsterinfo.nextframe = FRAME_walk101
                return true
            }
        }

        var soldier_walk: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_walk"
            }

            public fun think(self: edict_t): Boolean {
                if (Lib.random() < 0.5)
                    self.monsterinfo.currentmove = soldier_move_walk1
                else
                    self.monsterinfo.currentmove = soldier_move_walk2
                return true
            }
        }

        var soldier_run: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_run"
            }

            public fun think(self: edict_t): Boolean {
                if ((self.monsterinfo.aiflags and Defines.AI_STAND_GROUND) != 0) {
                    self.monsterinfo.currentmove = soldier_move_stand1
                    return true
                }

                if (self.monsterinfo.currentmove == soldier_move_walk1 || self.monsterinfo.currentmove == soldier_move_walk2 || self.monsterinfo.currentmove == soldier_move_start_run) {
                    self.monsterinfo.currentmove = soldier_move_run
                } else {
                    self.monsterinfo.currentmove = soldier_move_start_run
                }
                return true
            }
        }

        var soldier_pain: EntPainAdapter = object : EntPainAdapter() {
            public fun getID(): String {
                return "soldier_pain"
            }

            public fun pain(self: edict_t, other: edict_t, kick: Float, damage: Int) {
                val r: Float
                val n: Int

                if (self.health < (self.max_health / 2))
                    self.s.skinnum = self.s.skinnum or 1

                if (GameBase.level.time < self.pain_debounce_time) {
                    if ((self.velocity[2] > 100) && ((self.monsterinfo.currentmove == soldier_move_pain1) || (self.monsterinfo.currentmove == soldier_move_pain2) || (self.monsterinfo.currentmove == soldier_move_pain3)))
                        self.monsterinfo.currentmove = soldier_move_pain4
                    return
                }

                self.pain_debounce_time = GameBase.level.time + 3

                n = self.s.skinnum or 1
                if (n == 1)
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain_light, 1, Defines.ATTN_NORM, 0)
                else if (n == 3)
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain, 1, Defines.ATTN_NORM, 0)
                else
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain_ss, 1, Defines.ATTN_NORM, 0)

                if (self.velocity[2] > 100) {
                    self.monsterinfo.currentmove = soldier_move_pain4
                    return
                }

                if (GameBase.skill.value == 3)
                    return  // no pain anims in nightmare

                r = Lib.random()

                if (r < 0.33)
                    self.monsterinfo.currentmove = soldier_move_pain1
                else if (r < 0.66)
                    self.monsterinfo.currentmove = soldier_move_pain2
                else
                    self.monsterinfo.currentmove = soldier_move_pain3
            }
        }

        //
        // SIGHT
        //

        var soldier_duck_up: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_duck_up"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.aiflags = self.monsterinfo.aiflags and Defines.AI_DUCKED.inv()
                self.maxs[2] += 32
                self.takedamage = Defines.DAMAGE_AIM
                GameBase.gi.linkentity(self)
                return true
            }
        }

        var soldier_sight: EntInteractAdapter = object : EntInteractAdapter() {
            public fun getID(): String {
                return "soldier_sight"
            }

            public fun interact(self: edict_t, other: edict_t): Boolean {
                if (Lib.random() < 0.5)
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_sight1, 1, Defines.ATTN_NORM, 0)
                else
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_sight2, 1, Defines.ATTN_NORM, 0)

                if ((GameBase.skill.value > 0) && (GameUtil.range(self, self.enemy) >= Defines.RANGE_MID)) {
                    if (Lib.random() > 0.5)
                        self.monsterinfo.currentmove = soldier_move_attack6
                }
                return true
            }
        }

        //
        // SPAWN
        //

        var SP_monster_soldier_x: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "SP_monster_soldier_x"
            }

            public fun think(self: edict_t): Boolean {

                self.s.modelindex = GameBase.gi.modelindex("models/monsters/soldier/tris.md2")
                self.monsterinfo.scale = MODEL_SCALE
                Math3D.VectorSet(self.mins, -16, -16, -24)
                Math3D.VectorSet(self.maxs, 16, 16, 32)
                self.movetype = Defines.MOVETYPE_STEP
                self.solid = Defines.SOLID_BBOX

                sound_idle = GameBase.gi.soundindex("soldier/solidle1.wav")
                sound_sight1 = GameBase.gi.soundindex("soldier/solsght1.wav")
                sound_sight2 = GameBase.gi.soundindex("soldier/solsrch1.wav")
                sound_cock = GameBase.gi.soundindex("infantry/infatck3.wav")

                self.mass = 100

                self.pain = soldier_pain
                self.die = soldier_die

                self.monsterinfo.stand = soldier_stand
                self.monsterinfo.walk = soldier_walk
                self.monsterinfo.run = soldier_run
                self.monsterinfo.dodge = soldier_dodge
                self.monsterinfo.attack = soldier_attack
                self.monsterinfo.melee = null
                self.monsterinfo.sight = soldier_sight

                GameBase.gi.linkentity(self)

                self.monsterinfo.stand.think(self)

                GameAI.walkmonster_start.think(self)
                return true
            }
        }

        /*
     * QUAKED monster_soldier_light (1 .5 0) (-16 -16 -24) (16 16 32) Ambush
     * Trigger_Spawn Sight
     */
        public var SP_monster_soldier_light: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "SP_monster_soldier_light"
            }

            public fun think(self: edict_t): Boolean {
                if (GameBase.deathmatch.value != 0) {
                    GameUtil.G_FreeEdict(self)
                    return true
                }

                SP_monster_soldier_x.think(self)

                sound_pain_light = GameBase.gi.soundindex("soldier/solpain2.wav")
                sound_death_light = GameBase.gi.soundindex("soldier/soldeth2.wav")
                GameBase.gi.modelindex("models/objects/laser/tris.md2")
                GameBase.gi.soundindex("misc/lasfly.wav")
                GameBase.gi.soundindex("soldier/solatck2.wav")

                self.s.skinnum = 0
                self.health = 20
                self.gib_health = -30
                return true
            }
        }

        /*
     * QUAKED monster_soldier (1 .5 0) (-16 -16 -24) (16 16 32) Ambush
     * Trigger_Spawn Sight
     */

        public var SP_monster_soldier: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "SP_monster_soldier"
            }

            public fun think(self: edict_t): Boolean {
                Com.DPrintf("Spawning a soldier at " + self.s.origin[0] + " " + self.s.origin[1] + " " + self.s.origin[2] + " " + "\n")

                if (GameBase.deathmatch.value != 0) {
                    GameUtil.G_FreeEdict(self)
                    return true
                }

                SP_monster_soldier_x.think(self)

                sound_pain = GameBase.gi.soundindex("soldier/solpain1.wav")
                sound_death = GameBase.gi.soundindex("soldier/soldeth1.wav")
                GameBase.gi.soundindex("soldier/solatck1.wav")

                self.s.skinnum = 2
                self.health = 30
                self.gib_health = -30
                return true
            }
        }

        /**
         * QUAKED monster_soldier_ss (1 .5 0) (-16 -16 -24) (16 16 32) Ambush
         * Trigger_Spawn Sight
         */
        public var SP_monster_soldier_ss: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "SP_monster_soldier_ss"
            }

            public fun think(self: edict_t): Boolean {
                if (GameBase.deathmatch.value != 0) {
                    GameUtil.G_FreeEdict(self)
                    return true
                }

                SP_monster_soldier_x.think(self)

                sound_pain_ss = GameBase.gi.soundindex("soldier/solpain3.wav")
                sound_death_ss = GameBase.gi.soundindex("soldier/soldeth3.wav")
                GameBase.gi.soundindex("soldier/solatck3.wav")

                self.s.skinnum = 4
                self.health = 40
                self.gib_health = -30
                return true
            }
        }

        fun soldier_fire(self: edict_t, flash_number: Int) {
            val start = floatArray(0.0, 0.0, 0.0)
            val forward = floatArray(0.0, 0.0, 0.0)
            val right = floatArray(0.0, 0.0, 0.0)
            val up = floatArray(0.0, 0.0, 0.0)
            val aim = floatArray(0.0, 0.0, 0.0)
            val dir = floatArray(0.0, 0.0, 0.0)
            val end = floatArray(0.0, 0.0, 0.0)
            val r: Float
            val u: Float
            val flash_index: Int

            if (self.s.skinnum < 2)
                flash_index = blaster_flash[flash_number]
            else if (self.s.skinnum < 4)
                flash_index = shotgun_flash[flash_number]
            else
                flash_index = machinegun_flash[flash_number]

            Math3D.AngleVectors(self.s.angles, forward, right, null)
            Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[flash_index], forward, right, start)

            if (flash_number == 5 || flash_number == 6) {
                Math3D.VectorCopy(forward, aim)
            } else {
                Math3D.VectorCopy(self.enemy.s.origin, end)
                end[2] += self.enemy.viewheight
                Math3D.VectorSubtract(end, start, aim)
                Math3D.vectoangles(aim, dir)
                Math3D.AngleVectors(dir, forward, right, up)

                r = Lib.crandom() * 1000
                u = Lib.crandom() * 500
                Math3D.VectorMA(start, 8192, forward, end)
                Math3D.VectorMA(end, r, right, end)
                Math3D.VectorMA(end, u, up, end)

                Math3D.VectorSubtract(end, start, aim)
                Math3D.VectorNormalize(aim)
            }

            if (self.s.skinnum <= 1) {
                Monster.monster_fire_blaster(self, start, aim, 5, 600, flash_index, Defines.EF_BLASTER)
            } else if (self.s.skinnum <= 3) {
                Monster.monster_fire_shotgun(self, start, aim, 2, 1, Defines.DEFAULT_SHOTGUN_HSPREAD, Defines.DEFAULT_SHOTGUN_VSPREAD, Defines.DEFAULT_SHOTGUN_COUNT, flash_index)
            } else {
                if (0 == (self.monsterinfo.aiflags and Defines.AI_HOLD_FRAME))
                    self.monsterinfo.pausetime = GameBase.level.time + (3 + Lib.rand() % 8) * Defines.FRAMETIME

                Monster.monster_fire_bullet(self, start, aim, 2, 4, Defines.DEFAULT_BULLET_HSPREAD, Defines.DEFAULT_BULLET_VSPREAD, flash_index)

                if (GameBase.level.time >= self.monsterinfo.pausetime)
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags and Defines.AI_HOLD_FRAME.inv()
                else
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags or Defines.AI_HOLD_FRAME
            }
        }

        var soldier_cock: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_cock"
            }

            public fun think(self: edict_t): Boolean {
                if (self.s.frame == FRAME_stand322)
                    GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_cock, 1, Defines.ATTN_IDLE, 0)
                else
                    GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_cock, 1, Defines.ATTN_NORM, 0)
                return true
            }
        }

        // STAND
        var soldier_frames_stand1 = array<mframe_t>(mframe_t(GameAI.ai_stand, 0, soldier_idle), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null))

        var soldier_move_stand1 = mmove_t(FRAME_stand101, FRAME_stand130, soldier_frames_stand1, soldier_stand)

        var soldier_frames_stand3 = array<mframe_t>(mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, soldier_cock), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null))

        var soldier_move_stand3 = mmove_t(FRAME_stand301, FRAME_stand339, soldier_frames_stand3, soldier_stand)

        var soldier_frames_walk1 = array<mframe_t>(mframe_t(GameAI.ai_walk, 3, null), mframe_t(GameAI.ai_walk, 6, null), mframe_t(GameAI.ai_walk, 2, null), mframe_t(GameAI.ai_walk, 2, null), mframe_t(GameAI.ai_walk, 2, null), mframe_t(GameAI.ai_walk, 1, null), mframe_t(GameAI.ai_walk, 6, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 3, null), mframe_t(GameAI.ai_walk, -1, soldier_walk1_random), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null))

        var soldier_move_walk1 = mmove_t(FRAME_walk101, FRAME_walk133, soldier_frames_walk1, null)

        var soldier_frames_walk2 = array<mframe_t>(mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 9, null), mframe_t(GameAI.ai_walk, 8, null), mframe_t(GameAI.ai_walk, 5, null), mframe_t(GameAI.ai_walk, 1, null), mframe_t(GameAI.ai_walk, 3, null), mframe_t(GameAI.ai_walk, 7, null), mframe_t(GameAI.ai_walk, 6, null), mframe_t(GameAI.ai_walk, 7, null))

        var soldier_move_walk2 = mmove_t(FRAME_walk209, FRAME_walk218, soldier_frames_walk2, null)

        //
        // RUN
        //

        var soldier_frames_start_run = array<mframe_t>(mframe_t(GameAI.ai_run, 7, null), mframe_t(GameAI.ai_run, 5, null))

        var soldier_move_start_run = mmove_t(FRAME_run01, FRAME_run02, soldier_frames_start_run, soldier_run)

        var soldier_frames_run = array<mframe_t>(mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 11, null), mframe_t(GameAI.ai_run, 11, null), mframe_t(GameAI.ai_run, 16, null), mframe_t(GameAI.ai_run, 10, null), mframe_t(GameAI.ai_run, 15, null))

        var soldier_move_run = mmove_t(FRAME_run03, FRAME_run08, soldier_frames_run, null)

        //
        // DUCK
        //

        var soldier_duck_hold: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_duck_hold"
            }

            public fun think(self: edict_t): Boolean {
                if (GameBase.level.time >= self.monsterinfo.pausetime)
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags and Defines.AI_HOLD_FRAME.inv()
                else
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags or Defines.AI_HOLD_FRAME
                return true
            }
        }

        //
        // PAIN
        //

        var soldier_frames_pain1 = array<mframe_t>(mframe_t(GameAI.ai_move, -3, null), mframe_t(GameAI.ai_move, 4, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 0, null))

        var soldier_move_pain1 = mmove_t(FRAME_pain101, FRAME_pain105, soldier_frames_pain1, soldier_run)

        var soldier_frames_pain2 = array<mframe_t>(mframe_t(GameAI.ai_move, -13, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 4, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, 2, null))

        var soldier_move_pain2 = mmove_t(FRAME_pain201, FRAME_pain207, soldier_frames_pain2, soldier_run)

        var soldier_frames_pain3 = array<mframe_t>(mframe_t(GameAI.ai_move, -8, null), mframe_t(GameAI.ai_move, 10, null), mframe_t(GameAI.ai_move, -4, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, -3, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 4, null), mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, 2, null))

        var soldier_move_pain3 = mmove_t(FRAME_pain301, FRAME_pain318, soldier_frames_pain3, soldier_run)

        var soldier_frames_pain4 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -10, null), mframe_t(GameAI.ai_move, -6, null), mframe_t(GameAI.ai_move, 8, null), mframe_t(GameAI.ai_move, 4, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 5, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, 2, null), mframe_t(GameAI.ai_move, 0, null))

        var soldier_move_pain4 = mmove_t(FRAME_pain401, FRAME_pain417, soldier_frames_pain4, soldier_run)

        //
        // ATTACK
        //

        var blaster_flash = intArray(Defines.MZ2_SOLDIER_BLASTER_1, Defines.MZ2_SOLDIER_BLASTER_2, Defines.MZ2_SOLDIER_BLASTER_3, Defines.MZ2_SOLDIER_BLASTER_4, Defines.MZ2_SOLDIER_BLASTER_5, Defines.MZ2_SOLDIER_BLASTER_6, Defines.MZ2_SOLDIER_BLASTER_7, Defines.MZ2_SOLDIER_BLASTER_8)

        var shotgun_flash = intArray(Defines.MZ2_SOLDIER_SHOTGUN_1, Defines.MZ2_SOLDIER_SHOTGUN_2, Defines.MZ2_SOLDIER_SHOTGUN_3, Defines.MZ2_SOLDIER_SHOTGUN_4, Defines.MZ2_SOLDIER_SHOTGUN_5, Defines.MZ2_SOLDIER_SHOTGUN_6, Defines.MZ2_SOLDIER_SHOTGUN_7, Defines.MZ2_SOLDIER_SHOTGUN_8)

        var machinegun_flash = intArray(Defines.MZ2_SOLDIER_MACHINEGUN_1, Defines.MZ2_SOLDIER_MACHINEGUN_2, Defines.MZ2_SOLDIER_MACHINEGUN_3, Defines.MZ2_SOLDIER_MACHINEGUN_4, Defines.MZ2_SOLDIER_MACHINEGUN_5, Defines.MZ2_SOLDIER_MACHINEGUN_6, Defines.MZ2_SOLDIER_MACHINEGUN_7, Defines.MZ2_SOLDIER_MACHINEGUN_8)

        var soldier_frames_attack1 = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, soldier_fire1), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, soldier_attack1_refire1), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, soldier_cock), mframe_t(GameAI.ai_charge, 0, soldier_attack1_refire2), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null))

        var soldier_move_attack1 = mmove_t(FRAME_attak101, FRAME_attak112, soldier_frames_attack1, soldier_run)

        var soldier_frames_attack2 = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, soldier_fire2), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, soldier_attack2_refire1), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, soldier_cock), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, soldier_attack2_refire2), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null))

        var soldier_move_attack2 = mmove_t(FRAME_attak201, FRAME_attak218, soldier_frames_attack2, soldier_run)

        var soldier_frames_attack3 = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, soldier_fire3), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, soldier_attack3_refire), mframe_t(GameAI.ai_charge, 0, soldier_duck_up), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null))

        var soldier_move_attack3 = mmove_t(FRAME_attak301, FRAME_attak309, soldier_frames_attack3, soldier_run)

        var soldier_frames_attack4 = array<mframe_t>(mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, soldier_fire4), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null), mframe_t(GameAI.ai_charge, 0, null))

        var soldier_move_attack4 = mmove_t(FRAME_attak401, FRAME_attak406, soldier_frames_attack4, soldier_run)

        var soldier_frames_attack6 = array<mframe_t>(mframe_t(GameAI.ai_charge, 10, null), mframe_t(GameAI.ai_charge, 4, null), mframe_t(GameAI.ai_charge, 12, null), mframe_t(GameAI.ai_charge, 11, soldier_fire8), mframe_t(GameAI.ai_charge, 13, null), mframe_t(GameAI.ai_charge, 18, null), mframe_t(GameAI.ai_charge, 15, null), mframe_t(GameAI.ai_charge, 14, null), mframe_t(GameAI.ai_charge, 11, null), mframe_t(GameAI.ai_charge, 8, null), mframe_t(GameAI.ai_charge, 11, null), mframe_t(GameAI.ai_charge, 12, null), mframe_t(GameAI.ai_charge, 12, null), mframe_t(GameAI.ai_charge, 17, soldier_attack6_refire))

        var soldier_move_attack6 = mmove_t(FRAME_runs01, FRAME_runs14, soldier_frames_attack6, soldier_run)

        var soldier_frames_duck = array<mframe_t>(mframe_t(GameAI.ai_move, 5, soldier_duck_down), mframe_t(GameAI.ai_move, -1, soldier_duck_hold), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 0, soldier_duck_up), mframe_t(GameAI.ai_move, 5, null))

        var soldier_move_duck = mmove_t(FRAME_duck01, FRAME_duck05, soldier_frames_duck, soldier_run)

        var soldier_frames_death1 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -10, null), mframe_t(GameAI.ai_move, -10, null), mframe_t(GameAI.ai_move, -10, null), mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, soldier_fire6), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, soldier_fire7), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var soldier_move_death1 = mmove_t(FRAME_death101, FRAME_death136, soldier_frames_death1, soldier_dead)

        var soldier_frames_death2 = array<mframe_t>(mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var soldier_move_death2 = mmove_t(FRAME_death201, FRAME_death235, soldier_frames_death2, soldier_dead)

        var soldier_frames_death3 = array<mframe_t>(mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var soldier_move_death3 = mmove_t(FRAME_death301, FRAME_death345, soldier_frames_death3, soldier_dead)

        var soldier_frames_death4 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var soldier_move_death4 = mmove_t(FRAME_death401, FRAME_death453, soldier_frames_death4, soldier_dead)

        var soldier_frames_death5 = array<mframe_t>(mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var soldier_move_death5 = mmove_t(FRAME_death501, FRAME_death524, soldier_frames_death5, soldier_dead)

        var soldier_frames_death6 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var soldier_move_death6 = mmove_t(FRAME_death601, FRAME_death610, soldier_frames_death6, soldier_dead)

        // ATTACK3 (duck and shoot)

        var soldier_attack: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "soldier_attack"
            }

            public fun think(self: edict_t): Boolean {
                if (self.s.skinnum < 4) {
                    if (Lib.random() < 0.5)
                        self.monsterinfo.currentmove = soldier_move_attack1
                    else
                        self.monsterinfo.currentmove = soldier_move_attack2
                } else {
                    self.monsterinfo.currentmove = soldier_move_attack4
                }
                return true
            }
        }

        var soldier_dodge: EntDodgeAdapter = object : EntDodgeAdapter() {
            public fun getID(): String {
                return "soldier_dodge"
            }

            public fun dodge(self: edict_t, attacker: edict_t, eta: Float) {
                var r: Float

                r = Lib.random()
                if (r > 0.25)
                    return

                if (self.enemy == null)
                    self.enemy = attacker

                if (GameBase.skill.value == 0) {
                    self.monsterinfo.currentmove = soldier_move_duck
                    return
                }

                self.monsterinfo.pausetime = GameBase.level.time + eta + 0.3.toFloat()
                r = Lib.random()

                if (GameBase.skill.value == 1) {
                    if (r > 0.33)
                        self.monsterinfo.currentmove = soldier_move_duck
                    else
                        self.monsterinfo.currentmove = soldier_move_attack3
                    return
                }

                if (GameBase.skill.value >= 2) {
                    if (r > 0.66)
                        self.monsterinfo.currentmove = soldier_move_duck
                    else
                        self.monsterinfo.currentmove = soldier_move_attack3
                    return
                }

                self.monsterinfo.currentmove = soldier_move_attack3
            }
        }
    }

}