/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package lwjake2.game.monsters

import lwjake2.Defines
import lwjake2.game.EntDieAdapter
import lwjake2.game.EntPainAdapter
import lwjake2.game.EntThinkAdapter
import lwjake2.game.EntTouchAdapter
import lwjake2.game.EntUseAdapter
import lwjake2.game.GameAI
import lwjake2.game.GameBase
import lwjake2.game.GameMisc
import lwjake2.game.GameUtil
import lwjake2.game.Monster
import lwjake2.game.cplane_t
import lwjake2.game.csurface_t
import lwjake2.game.edict_t
import lwjake2.game.mframe_t
import lwjake2.game.mmove_t
import lwjake2.util.Lib
import lwjake2.util.Math3D

public class M_Actor {
    companion object {
        //	This file generated by ModelGen - Do NOT Modify

        public val FRAME_attak01: Int = 0

        public val FRAME_attak02: Int = 1

        public val FRAME_attak03: Int = 2

        public val FRAME_attak04: Int = 3

        public val FRAME_death101: Int = 4

        public val FRAME_death102: Int = 5

        public val FRAME_death103: Int = 6

        public val FRAME_death104: Int = 7

        public val FRAME_death105: Int = 8

        public val FRAME_death106: Int = 9

        public val FRAME_death107: Int = 10

        public val FRAME_death201: Int = 11

        public val FRAME_death202: Int = 12

        public val FRAME_death203: Int = 13

        public val FRAME_death204: Int = 14

        public val FRAME_death205: Int = 15

        public val FRAME_death206: Int = 16

        public val FRAME_death207: Int = 17

        public val FRAME_death208: Int = 18

        public val FRAME_death209: Int = 19

        public val FRAME_death210: Int = 20

        public val FRAME_death211: Int = 21

        public val FRAME_death212: Int = 22

        public val FRAME_death213: Int = 23

        public val FRAME_death301: Int = 24

        public val FRAME_death302: Int = 25

        public val FRAME_death303: Int = 26

        public val FRAME_death304: Int = 27

        public val FRAME_death305: Int = 28

        public val FRAME_death306: Int = 29

        public val FRAME_death307: Int = 30

        public val FRAME_death308: Int = 31

        public val FRAME_death309: Int = 32

        public val FRAME_death310: Int = 33

        public val FRAME_death311: Int = 34

        public val FRAME_death312: Int = 35

        public val FRAME_death313: Int = 36

        public val FRAME_death314: Int = 37

        public val FRAME_death315: Int = 38

        public val FRAME_flip01: Int = 39

        public val FRAME_flip02: Int = 40

        public val FRAME_flip03: Int = 41

        public val FRAME_flip04: Int = 42

        public val FRAME_flip05: Int = 43

        public val FRAME_flip06: Int = 44

        public val FRAME_flip07: Int = 45

        public val FRAME_flip08: Int = 46

        public val FRAME_flip09: Int = 47

        public val FRAME_flip10: Int = 48

        public val FRAME_flip11: Int = 49

        public val FRAME_flip12: Int = 50

        public val FRAME_flip13: Int = 51

        public val FRAME_flip14: Int = 52

        public val FRAME_grenad01: Int = 53

        public val FRAME_grenad02: Int = 54

        public val FRAME_grenad03: Int = 55

        public val FRAME_grenad04: Int = 56

        public val FRAME_grenad05: Int = 57

        public val FRAME_grenad06: Int = 58

        public val FRAME_grenad07: Int = 59

        public val FRAME_grenad08: Int = 60

        public val FRAME_grenad09: Int = 61

        public val FRAME_grenad10: Int = 62

        public val FRAME_grenad11: Int = 63

        public val FRAME_grenad12: Int = 64

        public val FRAME_grenad13: Int = 65

        public val FRAME_grenad14: Int = 66

        public val FRAME_grenad15: Int = 67

        public val FRAME_jump01: Int = 68

        public val FRAME_jump02: Int = 69

        public val FRAME_jump03: Int = 70

        public val FRAME_jump04: Int = 71

        public val FRAME_jump05: Int = 72

        public val FRAME_jump06: Int = 73

        public val FRAME_pain101: Int = 74

        public val FRAME_pain102: Int = 75

        public val FRAME_pain103: Int = 76

        public val FRAME_pain201: Int = 77

        public val FRAME_pain202: Int = 78

        public val FRAME_pain203: Int = 79

        public val FRAME_pain301: Int = 80

        public val FRAME_pain302: Int = 81

        public val FRAME_pain303: Int = 82

        public val FRAME_push01: Int = 83

        public val FRAME_push02: Int = 84

        public val FRAME_push03: Int = 85

        public val FRAME_push04: Int = 86

        public val FRAME_push05: Int = 87

        public val FRAME_push06: Int = 88

        public val FRAME_push07: Int = 89

        public val FRAME_push08: Int = 90

        public val FRAME_push09: Int = 91

        public val FRAME_run01: Int = 92

        public val FRAME_run02: Int = 93

        public val FRAME_run03: Int = 94

        public val FRAME_run04: Int = 95

        public val FRAME_run05: Int = 96

        public val FRAME_run06: Int = 97

        public val FRAME_run07: Int = 98

        public val FRAME_run08: Int = 99

        public val FRAME_run09: Int = 100

        public val FRAME_run10: Int = 101

        public val FRAME_run11: Int = 102

        public val FRAME_run12: Int = 103

        public val FRAME_runs01: Int = 104

        public val FRAME_runs02: Int = 105

        public val FRAME_runs03: Int = 106

        public val FRAME_runs04: Int = 107

        public val FRAME_runs05: Int = 108

        public val FRAME_runs06: Int = 109

        public val FRAME_runs07: Int = 110

        public val FRAME_runs08: Int = 111

        public val FRAME_runs09: Int = 112

        public val FRAME_runs10: Int = 113

        public val FRAME_runs11: Int = 114

        public val FRAME_runs12: Int = 115

        public val FRAME_salute01: Int = 116

        public val FRAME_salute02: Int = 117

        public val FRAME_salute03: Int = 118

        public val FRAME_salute04: Int = 119

        public val FRAME_salute05: Int = 120

        public val FRAME_salute06: Int = 121

        public val FRAME_salute07: Int = 122

        public val FRAME_salute08: Int = 123

        public val FRAME_salute09: Int = 124

        public val FRAME_salute10: Int = 125

        public val FRAME_salute11: Int = 126

        public val FRAME_salute12: Int = 127

        public val FRAME_stand101: Int = 128

        public val FRAME_stand102: Int = 129

        public val FRAME_stand103: Int = 130

        public val FRAME_stand104: Int = 131

        public val FRAME_stand105: Int = 132

        public val FRAME_stand106: Int = 133

        public val FRAME_stand107: Int = 134

        public val FRAME_stand108: Int = 135

        public val FRAME_stand109: Int = 136

        public val FRAME_stand110: Int = 137

        public val FRAME_stand111: Int = 138

        public val FRAME_stand112: Int = 139

        public val FRAME_stand113: Int = 140

        public val FRAME_stand114: Int = 141

        public val FRAME_stand115: Int = 142

        public val FRAME_stand116: Int = 143

        public val FRAME_stand117: Int = 144

        public val FRAME_stand118: Int = 145

        public val FRAME_stand119: Int = 146

        public val FRAME_stand120: Int = 147

        public val FRAME_stand121: Int = 148

        public val FRAME_stand122: Int = 149

        public val FRAME_stand123: Int = 150

        public val FRAME_stand124: Int = 151

        public val FRAME_stand125: Int = 152

        public val FRAME_stand126: Int = 153

        public val FRAME_stand127: Int = 154

        public val FRAME_stand128: Int = 155

        public val FRAME_stand129: Int = 156

        public val FRAME_stand130: Int = 157

        public val FRAME_stand131: Int = 158

        public val FRAME_stand132: Int = 159

        public val FRAME_stand133: Int = 160

        public val FRAME_stand134: Int = 161

        public val FRAME_stand135: Int = 162

        public val FRAME_stand136: Int = 163

        public val FRAME_stand137: Int = 164

        public val FRAME_stand138: Int = 165

        public val FRAME_stand139: Int = 166

        public val FRAME_stand140: Int = 167

        public val FRAME_stand201: Int = 168

        public val FRAME_stand202: Int = 169

        public val FRAME_stand203: Int = 170

        public val FRAME_stand204: Int = 171

        public val FRAME_stand205: Int = 172

        public val FRAME_stand206: Int = 173

        public val FRAME_stand207: Int = 174

        public val FRAME_stand208: Int = 175

        public val FRAME_stand209: Int = 176

        public val FRAME_stand210: Int = 177

        public val FRAME_stand211: Int = 178

        public val FRAME_stand212: Int = 179

        public val FRAME_stand213: Int = 180

        public val FRAME_stand214: Int = 181

        public val FRAME_stand215: Int = 182

        public val FRAME_stand216: Int = 183

        public val FRAME_stand217: Int = 184

        public val FRAME_stand218: Int = 185

        public val FRAME_stand219: Int = 186

        public val FRAME_stand220: Int = 187

        public val FRAME_stand221: Int = 188

        public val FRAME_stand222: Int = 189

        public val FRAME_stand223: Int = 190

        public val FRAME_swim01: Int = 191

        public val FRAME_swim02: Int = 192

        public val FRAME_swim03: Int = 193

        public val FRAME_swim04: Int = 194

        public val FRAME_swim05: Int = 195

        public val FRAME_swim06: Int = 196

        public val FRAME_swim07: Int = 197

        public val FRAME_swim08: Int = 198

        public val FRAME_swim09: Int = 199

        public val FRAME_swim10: Int = 200

        public val FRAME_swim11: Int = 201

        public val FRAME_swim12: Int = 202

        public val FRAME_sw_atk01: Int = 203

        public val FRAME_sw_atk02: Int = 204

        public val FRAME_sw_atk03: Int = 205

        public val FRAME_sw_atk04: Int = 206

        public val FRAME_sw_atk05: Int = 207

        public val FRAME_sw_atk06: Int = 208

        public val FRAME_sw_pan01: Int = 209

        public val FRAME_sw_pan02: Int = 210

        public val FRAME_sw_pan03: Int = 211

        public val FRAME_sw_pan04: Int = 212

        public val FRAME_sw_pan05: Int = 213

        public val FRAME_sw_std01: Int = 214

        public val FRAME_sw_std02: Int = 215

        public val FRAME_sw_std03: Int = 216

        public val FRAME_sw_std04: Int = 217

        public val FRAME_sw_std05: Int = 218

        public val FRAME_sw_std06: Int = 219

        public val FRAME_sw_std07: Int = 220

        public val FRAME_sw_std08: Int = 221

        public val FRAME_sw_std09: Int = 222

        public val FRAME_sw_std10: Int = 223

        public val FRAME_sw_std11: Int = 224

        public val FRAME_sw_std12: Int = 225

        public val FRAME_sw_std13: Int = 226

        public val FRAME_sw_std14: Int = 227

        public val FRAME_sw_std15: Int = 228

        public val FRAME_sw_std16: Int = 229

        public val FRAME_sw_std17: Int = 230

        public val FRAME_sw_std18: Int = 231

        public val FRAME_sw_std19: Int = 232

        public val FRAME_sw_std20: Int = 233

        public val FRAME_taunt01: Int = 234

        public val FRAME_taunt02: Int = 235

        public val FRAME_taunt03: Int = 236

        public val FRAME_taunt04: Int = 237

        public val FRAME_taunt05: Int = 238

        public val FRAME_taunt06: Int = 239

        public val FRAME_taunt07: Int = 240

        public val FRAME_taunt08: Int = 241

        public val FRAME_taunt09: Int = 242

        public val FRAME_taunt10: Int = 243

        public val FRAME_taunt11: Int = 244

        public val FRAME_taunt12: Int = 245

        public val FRAME_taunt13: Int = 246

        public val FRAME_taunt14: Int = 247

        public val FRAME_taunt15: Int = 248

        public val FRAME_taunt16: Int = 249

        public val FRAME_taunt17: Int = 250

        public val FRAME_walk01: Int = 251

        public val FRAME_walk02: Int = 252

        public val FRAME_walk03: Int = 253

        public val FRAME_walk04: Int = 254

        public val FRAME_walk05: Int = 255

        public val FRAME_walk06: Int = 256

        public val FRAME_walk07: Int = 257

        public val FRAME_walk08: Int = 258

        public val FRAME_walk09: Int = 259

        public val FRAME_walk10: Int = 260

        public val FRAME_walk11: Int = 261

        public val FRAME_wave01: Int = 262

        public val FRAME_wave02: Int = 263

        public val FRAME_wave03: Int = 264

        public val FRAME_wave04: Int = 265

        public val FRAME_wave05: Int = 266

        public val FRAME_wave06: Int = 267

        public val FRAME_wave07: Int = 268

        public val FRAME_wave08: Int = 269

        public val FRAME_wave09: Int = 270

        public val FRAME_wave10: Int = 271

        public val FRAME_wave11: Int = 272

        public val FRAME_wave12: Int = 273

        public val FRAME_wave13: Int = 274

        public val FRAME_wave14: Int = 275

        public val FRAME_wave15: Int = 276

        public val FRAME_wave16: Int = 277

        public val FRAME_wave17: Int = 278

        public val FRAME_wave18: Int = 279

        public val FRAME_wave19: Int = 280

        public val FRAME_wave20: Int = 281

        public val FRAME_wave21: Int = 282

        public val FRAME_bl_atk01: Int = 283

        public val FRAME_bl_atk02: Int = 284

        public val FRAME_bl_atk03: Int = 285

        public val FRAME_bl_atk04: Int = 286

        public val FRAME_bl_atk05: Int = 287

        public val FRAME_bl_atk06: Int = 288

        public val FRAME_bl_flp01: Int = 289

        public val FRAME_bl_flp02: Int = 290

        public val FRAME_bl_flp13: Int = 291

        public val FRAME_bl_flp14: Int = 292

        public val FRAME_bl_flp15: Int = 293

        public val FRAME_bl_jmp01: Int = 294

        public val FRAME_bl_jmp02: Int = 295

        public val FRAME_bl_jmp03: Int = 296

        public val FRAME_bl_jmp04: Int = 297

        public val FRAME_bl_jmp05: Int = 298

        public val FRAME_bl_jmp06: Int = 299

        public val FRAME_bl_pn101: Int = 300

        public val FRAME_bl_pn102: Int = 301

        public val FRAME_bl_pn103: Int = 302

        public val FRAME_bl_pn201: Int = 303

        public val FRAME_bl_pn202: Int = 304

        public val FRAME_bl_pn203: Int = 305

        public val FRAME_bl_pn301: Int = 306

        public val FRAME_bl_pn302: Int = 307

        public val FRAME_bl_pn303: Int = 308

        public val FRAME_bl_psh08: Int = 309

        public val FRAME_bl_psh09: Int = 310

        public val FRAME_bl_run01: Int = 311

        public val FRAME_bl_run02: Int = 312

        public val FRAME_bl_run03: Int = 313

        public val FRAME_bl_run04: Int = 314

        public val FRAME_bl_run05: Int = 315

        public val FRAME_bl_run06: Int = 316

        public val FRAME_bl_run07: Int = 317

        public val FRAME_bl_run08: Int = 318

        public val FRAME_bl_run09: Int = 319

        public val FRAME_bl_run10: Int = 320

        public val FRAME_bl_run11: Int = 321

        public val FRAME_bl_run12: Int = 322

        public val FRAME_bl_rns03: Int = 323

        public val FRAME_bl_rns04: Int = 324

        public val FRAME_bl_rns05: Int = 325

        public val FRAME_bl_rns06: Int = 326

        public val FRAME_bl_rns07: Int = 327

        public val FRAME_bl_rns08: Int = 328

        public val FRAME_bl_rns09: Int = 329

        public val FRAME_bl_sal10: Int = 330

        public val FRAME_bl_sal11: Int = 331

        public val FRAME_bl_sal12: Int = 332

        public val FRAME_bl_std01: Int = 333

        public val FRAME_bl_std02: Int = 334

        public val FRAME_bl_std03: Int = 335

        public val FRAME_bl_std04: Int = 336

        public val FRAME_bl_std05: Int = 337

        public val FRAME_bl_std06: Int = 338

        public val FRAME_bl_std07: Int = 339

        public val FRAME_bl_std08: Int = 340

        public val FRAME_bl_std09: Int = 341

        public val FRAME_bl_std10: Int = 342

        public val FRAME_bl_std11: Int = 343

        public val FRAME_bl_std12: Int = 344

        public val FRAME_bl_std13: Int = 345

        public val FRAME_bl_std14: Int = 346

        public val FRAME_bl_std15: Int = 347

        public val FRAME_bl_std16: Int = 348

        public val FRAME_bl_std17: Int = 349

        public val FRAME_bl_std18: Int = 350

        public val FRAME_bl_std19: Int = 351

        public val FRAME_bl_std20: Int = 352

        public val FRAME_bl_std21: Int = 353

        public val FRAME_bl_std22: Int = 354

        public val FRAME_bl_std23: Int = 355

        public val FRAME_bl_std24: Int = 356

        public val FRAME_bl_std25: Int = 357

        public val FRAME_bl_std26: Int = 358

        public val FRAME_bl_std27: Int = 359

        public val FRAME_bl_std28: Int = 360

        public val FRAME_bl_std29: Int = 361

        public val FRAME_bl_std30: Int = 362

        public val FRAME_bl_std31: Int = 363

        public val FRAME_bl_std32: Int = 364

        public val FRAME_bl_std33: Int = 365

        public val FRAME_bl_std34: Int = 366

        public val FRAME_bl_std35: Int = 367

        public val FRAME_bl_std36: Int = 368

        public val FRAME_bl_std37: Int = 369

        public val FRAME_bl_std38: Int = 370

        public val FRAME_bl_std39: Int = 371

        public val FRAME_bl_std40: Int = 372

        public val FRAME_bl_swm01: Int = 373

        public val FRAME_bl_swm02: Int = 374

        public val FRAME_bl_swm03: Int = 375

        public val FRAME_bl_swm04: Int = 376

        public val FRAME_bl_swm05: Int = 377

        public val FRAME_bl_swm06: Int = 378

        public val FRAME_bl_swm07: Int = 379

        public val FRAME_bl_swm08: Int = 380

        public val FRAME_bl_swm09: Int = 381

        public val FRAME_bl_swm10: Int = 382

        public val FRAME_bl_swm11: Int = 383

        public val FRAME_bl_swm12: Int = 384

        public val FRAME_bl_swk01: Int = 385

        public val FRAME_bl_swk02: Int = 386

        public val FRAME_bl_swk03: Int = 387

        public val FRAME_bl_swk04: Int = 388

        public val FRAME_bl_swk05: Int = 389

        public val FRAME_bl_swk06: Int = 390

        public val FRAME_bl_swp01: Int = 391

        public val FRAME_bl_swp02: Int = 392

        public val FRAME_bl_swp03: Int = 393

        public val FRAME_bl_swp04: Int = 394

        public val FRAME_bl_swp05: Int = 395

        public val FRAME_bl_sws01: Int = 396

        public val FRAME_bl_sws02: Int = 397

        public val FRAME_bl_sws03: Int = 398

        public val FRAME_bl_sws04: Int = 399

        public val FRAME_bl_sws05: Int = 400

        public val FRAME_bl_sws06: Int = 401

        public val FRAME_bl_sws07: Int = 402

        public val FRAME_bl_sws08: Int = 403

        public val FRAME_bl_sws09: Int = 404

        public val FRAME_bl_sws10: Int = 405

        public val FRAME_bl_sws11: Int = 406

        public val FRAME_bl_sws12: Int = 407

        public val FRAME_bl_sws13: Int = 408

        public val FRAME_bl_sws14: Int = 409

        public val FRAME_bl_tau14: Int = 410

        public val FRAME_bl_tau15: Int = 411

        public val FRAME_bl_tau16: Int = 412

        public val FRAME_bl_tau17: Int = 413

        public val FRAME_bl_wlk01: Int = 414

        public val FRAME_bl_wlk02: Int = 415

        public val FRAME_bl_wlk03: Int = 416

        public val FRAME_bl_wlk04: Int = 417

        public val FRAME_bl_wlk05: Int = 418

        public val FRAME_bl_wlk06: Int = 419

        public val FRAME_bl_wlk07: Int = 420

        public val FRAME_bl_wlk08: Int = 421

        public val FRAME_bl_wlk09: Int = 422

        public val FRAME_bl_wlk10: Int = 423

        public val FRAME_bl_wlk11: Int = 424

        public val FRAME_bl_wav19: Int = 425

        public val FRAME_bl_wav20: Int = 426

        public val FRAME_bl_wav21: Int = 427

        public val FRAME_cr_atk01: Int = 428

        public val FRAME_cr_atk02: Int = 429

        public val FRAME_cr_atk03: Int = 430

        public val FRAME_cr_atk04: Int = 431

        public val FRAME_cr_atk05: Int = 432

        public val FRAME_cr_atk06: Int = 433

        public val FRAME_cr_atk07: Int = 434

        public val FRAME_cr_atk08: Int = 435

        public val FRAME_cr_pan01: Int = 436

        public val FRAME_cr_pan02: Int = 437

        public val FRAME_cr_pan03: Int = 438

        public val FRAME_cr_pan04: Int = 439

        public val FRAME_cr_std01: Int = 440

        public val FRAME_cr_std02: Int = 441

        public val FRAME_cr_std03: Int = 442

        public val FRAME_cr_std04: Int = 443

        public val FRAME_cr_std05: Int = 444

        public val FRAME_cr_std06: Int = 445

        public val FRAME_cr_std07: Int = 446

        public val FRAME_cr_std08: Int = 447

        public val FRAME_cr_wlk01: Int = 448

        public val FRAME_cr_wlk02: Int = 449

        public val FRAME_cr_wlk03: Int = 450

        public val FRAME_cr_wlk04: Int = 451

        public val FRAME_cr_wlk05: Int = 452

        public val FRAME_cr_wlk06: Int = 453

        public val FRAME_cr_wlk07: Int = 454

        public val FRAME_crbl_a01: Int = 455

        public val FRAME_crbl_a02: Int = 456

        public val FRAME_crbl_a03: Int = 457

        public val FRAME_crbl_a04: Int = 458

        public val FRAME_crbl_a05: Int = 459

        public val FRAME_crbl_a06: Int = 460

        public val FRAME_crbl_a07: Int = 461

        public val FRAME_crbl_p01: Int = 462

        public val FRAME_crbl_p02: Int = 463

        public val FRAME_crbl_p03: Int = 464

        public val FRAME_crbl_p04: Int = 465

        public val FRAME_crbl_s01: Int = 466

        public val FRAME_crbl_s02: Int = 467

        public val FRAME_crbl_s03: Int = 468

        public val FRAME_crbl_s04: Int = 469

        public val FRAME_crbl_s05: Int = 470

        public val FRAME_crbl_s06: Int = 471

        public val FRAME_crbl_s07: Int = 472

        public val FRAME_crbl_s08: Int = 473

        public val FRAME_crbl_w01: Int = 474

        public val FRAME_crbl_w02: Int = 475

        public val FRAME_crbl_w03: Int = 476

        public val FRAME_crbl_w04: Int = 477

        public val FRAME_crbl_w05: Int = 478

        public val FRAME_crbl_w06: Int = 479

        public val FRAME_crbl_w07: Int = 480

        public val MODEL_SCALE: Float = 1.000000.toFloat()

        public val MAX_ACTOR_NAMES: Int = 8

        var actor_names = array<String>("Hellrot", "Tokay", "Killme", "Disruptor", "Adrianator", "Rambear", "Titus", "Bitterman")

        var actor_stand: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "actor_stand"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = actor_move_stand

                // randomize on startup
                if (GameBase.level.time < 1.0)
                    self.s.frame = self.monsterinfo.currentmove.firstframe + (Lib.rand() % (self.monsterinfo.currentmove.lastframe - self.monsterinfo.currentmove.firstframe + 1))
                return true
            }
        }

        var actor_frames_stand = array<mframe_t>(mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null), mframe_t(GameAI.ai_stand, 0.toFloat(), null))

        var actor_move_stand = mmove_t(FRAME_stand101, FRAME_stand140, actor_frames_stand, null)

        var actor_frames_walk = array<mframe_t>(mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 6, null), mframe_t(GameAI.ai_walk, 10, null), mframe_t(GameAI.ai_walk, 3, null), mframe_t(GameAI.ai_walk, 2, null), mframe_t(GameAI.ai_walk, 7, null), mframe_t(GameAI.ai_walk, 10, null), mframe_t(GameAI.ai_walk, 1, null), mframe_t(GameAI.ai_walk, 4, null), mframe_t(GameAI.ai_walk, 0, null), mframe_t(GameAI.ai_walk, 0, null))

        var actor_move_walk = mmove_t(FRAME_walk01, FRAME_walk08, actor_frames_walk, null)

        var actor_walk: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "actor_walk"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = actor_move_walk
                return true
            }
        }

        var actor_frames_run = array<mframe_t>(mframe_t(GameAI.ai_run, 4, null), mframe_t(GameAI.ai_run, 15, null), mframe_t(GameAI.ai_run, 15, null), mframe_t(GameAI.ai_run, 8, null), mframe_t(GameAI.ai_run, 20, null), mframe_t(GameAI.ai_run, 15, null), mframe_t(GameAI.ai_run, 8, null), mframe_t(GameAI.ai_run, 17, null), mframe_t(GameAI.ai_run, 12, null), mframe_t(GameAI.ai_run, -2, null), mframe_t(GameAI.ai_run, -2, null), mframe_t(GameAI.ai_run, -1, null))

        var actor_move_run = mmove_t(FRAME_run02, FRAME_run07, actor_frames_run, null)

        var actor_run: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "actor_run"
            }

            public fun think(self: edict_t): Boolean {
                if ((GameBase.level.time < self.pain_debounce_time) && (self.enemy == null)) {
                    if (self.movetarget != null)
                        actor_walk.think(self)
                    else
                        actor_stand.think(self)
                    return true
                }

                if ((self.monsterinfo.aiflags and Defines.AI_STAND_GROUND) != 0) {
                    actor_stand.think(self)
                    return true
                }

                self.monsterinfo.currentmove = actor_move_run
                return true

            }
        }

        var actor_frames_pain1 = array<mframe_t>(mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, 4, null), mframe_t(GameAI.ai_move, 1, null))

        var actor_move_pain1 = mmove_t(FRAME_pain101, FRAME_pain103, actor_frames_pain1, actor_run)

        var actor_frames_pain2 = array<mframe_t>(mframe_t(GameAI.ai_move, -4, null), mframe_t(GameAI.ai_move, 4, null), mframe_t(GameAI.ai_move, 0, null))

        var actor_move_pain2 = mmove_t(FRAME_pain201, FRAME_pain203, actor_frames_pain2, actor_run)

        var actor_frames_pain3 = array<mframe_t>(mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 0, null))

        var actor_move_pain3 = mmove_t(FRAME_pain301, FRAME_pain303, actor_frames_pain3, actor_run)

        var actor_frames_flipoff = array<mframe_t>(mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null))

        var actor_move_flipoff = mmove_t(FRAME_flip01, FRAME_flip14, actor_frames_flipoff, actor_run)

        var actor_frames_taunt = array<mframe_t>(mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null), mframe_t(GameAI.ai_turn, 0, null))

        var actor_move_taunt = mmove_t(FRAME_taunt01, FRAME_taunt17, actor_frames_taunt, actor_run)

        var messages = array<String>("Watch it", "#$@*&", "Idiot", "Check your targets")

        var actor_pain: EntPainAdapter = object : EntPainAdapter() {
            public fun getID(): String {
                return "actor_pain"
            }

            public fun pain(self: edict_t, other: edict_t, kick: Float, damage: Int) {

                val n: Int

                if (self.health < (self.max_health / 2))
                    self.s.skinnum = 1

                if (GameBase.level.time < self.pain_debounce_time)
                    return

                self.pain_debounce_time = GameBase.level.time + 3
                //GameBase.gi.sound (self, CHAN_VOICE, actor.sound_pain, 1,
                // ATTN_NORM, 0);

                if ((other.client != null) && (Lib.random() < 0.4)) {
                    val v = floatArray(0.0, 0.0, 0.0)

                    val name: String

                    Math3D.VectorSubtract(other.s.origin, self.s.origin, v)
                    self.ideal_yaw = Math3D.vectoyaw(v)
                    if (Lib.random() < 0.5.toFloat())
                        self.monsterinfo.currentmove = actor_move_flipoff
                    else
                        self.monsterinfo.currentmove = actor_move_taunt

                    // FIXME: does the ent-id work out ?
                    name = actor_names[(self.index) % MAX_ACTOR_NAMES]

                    GameBase.gi.cprintf(other, Defines.PRINT_CHAT, name + ": " + messages[Lib.rand() % 3] + "!\n")
                    return
                }

                n = Lib.rand() % 3
                if (n == 0)
                    self.monsterinfo.currentmove = actor_move_pain1
                else if (n == 1)
                    self.monsterinfo.currentmove = actor_move_pain2
                else
                    self.monsterinfo.currentmove = actor_move_pain3
            }
        }

        var actor_dead: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "actor_dead"
            }

            public fun think(self: edict_t): Boolean {
                Math3D.VectorSet(self.mins, -16, -16, -24)
                Math3D.VectorSet(self.maxs, 16, 16, -8)
                self.movetype = Defines.MOVETYPE_TOSS
                self.svflags = self.svflags or Defines.SVF_DEADMONSTER
                self.nextthink = 0
                GameBase.gi.linkentity(self)
                return true
            }
        }

        var actor_frames_death1 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -13, null), mframe_t(GameAI.ai_move, 14, null), mframe_t(GameAI.ai_move, 3, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, 1, null))

        var actor_move_death1 = mmove_t(FRAME_death101, FRAME_death107, actor_frames_death1, actor_dead)

        var actor_frames_death2 = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 7, null), mframe_t(GameAI.ai_move, -6, null), mframe_t(GameAI.ai_move, -5, null), mframe_t(GameAI.ai_move, 1, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, -2, null), mframe_t(GameAI.ai_move, -1, null), mframe_t(GameAI.ai_move, -9, null), mframe_t(GameAI.ai_move, -13, null), mframe_t(GameAI.ai_move, -13, null), mframe_t(GameAI.ai_move, 0, null))

        var actor_move_death2 = mmove_t(FRAME_death201, FRAME_death213, actor_frames_death2, actor_dead)

        var actor_die: EntDieAdapter = object : EntDieAdapter() {
            public fun getID(): String {
                return "actor_die"
            }

            public fun die(self: edict_t, inflictor: edict_t, attacker: edict_t, damage: Int, point: FloatArray) {
                var n: Int

                //	check for gib
                if (self.health <= -80) {
                    //		 gi.sound (self, CHAN_VOICE, actor.sound_gib, 1, ATTN_NORM,
                    // 0);
                    run {
                        n = 0
                        while (n < 2) {
                            GameMisc.ThrowGib(self, "models/objects/gibs/bone/tris.md2", damage, Defines.GIB_ORGANIC)
                            n++
                        }
                    }
                    run {
                        n = 0
                        while (n < 4) {
                            GameMisc.ThrowGib(self, "models/objects/gibs/sm_meat/tris.md2", damage, Defines.GIB_ORGANIC)
                            n++
                        }
                    }
                    GameMisc.ThrowHead(self, "models/objects/gibs/head2/tris.md2", damage, Defines.GIB_ORGANIC)
                    self.deadflag = Defines.DEAD_DEAD
                    return
                }

                if (self.deadflag == Defines.DEAD_DEAD)
                    return

                //	regular death
                //	 gi.sound (self, CHAN_VOICE, actor.sound_die, 1, ATTN_NORM, 0);
                self.deadflag = Defines.DEAD_DEAD
                self.takedamage = Defines.DAMAGE_YES

                n = Lib.rand() % 2
                if (n == 0)
                    self.monsterinfo.currentmove = actor_move_death1
                else
                    self.monsterinfo.currentmove = actor_move_death2
            }
        }

        var actor_fire: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "actor_fire"
            }

            public fun think(self: edict_t): Boolean {
                actorMachineGun(self)

                if (GameBase.level.time >= self.monsterinfo.pausetime)
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags and Defines.AI_HOLD_FRAME.inv()
                else
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags or Defines.AI_HOLD_FRAME

                return true
            }
        }

        var actor_frames_attack = array<mframe_t>(mframe_t(GameAI.ai_charge, -2, actor_fire), mframe_t(GameAI.ai_charge, -2, null), mframe_t(GameAI.ai_charge, 3, null), mframe_t(GameAI.ai_charge, 2, null))

        var actor_move_attack = mmove_t(FRAME_attak01, FRAME_attak04, actor_frames_attack, actor_run)

        var actor_attack: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "actor_attack"
            }

            public fun think(self: edict_t): Boolean {
                val n: Int

                self.monsterinfo.currentmove = actor_move_attack
                n = (Lib.rand() and 15) + 3 + 7
                self.monsterinfo.pausetime = GameBase.level.time + n * Defines.FRAMETIME

                return true
            }
        }

        var actor_use: EntUseAdapter = object : EntUseAdapter() {
            public fun getID(): String {
                return "actor_use"
            }

            public fun use(self: edict_t, other: edict_t, activator: edict_t) {
                val v = floatArray(0.0, 0.0, 0.0)

                self.goalentity = self.movetarget = GameBase.G_PickTarget(self.target)
                if ((null == self.movetarget) || (Lib.strcmp(self.movetarget.classname, "target_actor") != 0)) {
                    GameBase.gi.dprintf(self.classname + " has bad target " + self.target + " at " + Lib.vtos(self.s.origin) + "\n")
                    self.target = null
                    self.monsterinfo.pausetime = 100000000
                    self.monsterinfo.stand.think(self)
                    return
                }

                Math3D.VectorSubtract(self.goalentity.s.origin, self.s.origin, v)
                self.ideal_yaw = self.s.angles[Defines.YAW] = Math3D.vectoyaw(v)
                self.monsterinfo.walk.think(self)
                self.target = null
            }
        }

        /*
     * QUAKED target_actor (.5 .3 0) (-8 -8 -8) (8 8 8) JUMP SHOOT ATTACK x HOLD
     * BRUTAL JUMP jump in set direction upon reaching this target SHOOT take a
     * single shot at the pathtarget ATTACK attack pathtarget until it or actor
     * is dead
     * 
     * "target" next target_actor "pathtarget" target of any action to be taken
     * at this point "wait" amount of time actor should pause at this point
     * "message" actor will "say" this to the player
     * 
     * for JUMP only: "speed" speed thrown forward (default 200) "height" speed
     * thrown upwards (default 200)
     */

        var target_actor_touch: EntTouchAdapter = object : EntTouchAdapter() {
            public fun getID(): String {
                return "target_actor_touch"
            }

            public fun touch(self: edict_t, other: edict_t, plane: cplane_t, surf: csurface_t) {
                val v = floatArray(0.0, 0.0, 0.0)

                if (other.movetarget != self)
                    return

                if (other.enemy != null)
                    return

                other.goalentity = other.movetarget = null

                if (self.message != null) {
                    var n: Int
                    var ent: edict_t

                    run {
                        n = 1
                        while (n <= GameBase.game.maxclients) {
                            ent = GameBase.g_edicts[n]
                            if (!ent.inuse)
                                continue
                            GameBase.gi.cprintf(ent, Defines.PRINT_CHAT, actor_names[(other.index) % MAX_ACTOR_NAMES] + ": " + self.message + "\n")
                            n++
                        }
                    }
                }

                if ((self.spawnflags and 1) != 0)
                //jump
                {
                    other.velocity[0] = self.movedir[0] * self.speed
                    other.velocity[1] = self.movedir[1] * self.speed

                    if (other.groundentity != null) {
                        other.groundentity = null
                        other.velocity[2] = self.movedir[2]
                        GameBase.gi.sound(other, Defines.CHAN_VOICE, GameBase.gi.soundindex("player/male/jump1.wav"), 1, Defines.ATTN_NORM, 0)
                    }
                }

                if ((self.spawnflags and 2) != 0)
                //shoot
                {
                } else if ((self.spawnflags and 4) != 0)
                //attack
                {
                    other.enemy = GameBase.G_PickTarget(self.pathtarget)
                    if (other.enemy != null) {
                        other.goalentity = other.enemy
                        if ((self.spawnflags and 32) != 0)
                            other.monsterinfo.aiflags = other.monsterinfo.aiflags or Defines.AI_BRUTAL
                        if ((self.spawnflags and 16) != 0) {
                            other.monsterinfo.aiflags = other.monsterinfo.aiflags or Defines.AI_STAND_GROUND
                            actor_stand.think(other)
                        } else {
                            actor_run.think(other)
                        }
                    }
                }

                if (0 != (self.spawnflags and 6) && (self.pathtarget != null)) {
                    val savetarget: String

                    savetarget = self.target
                    self.target = self.pathtarget
                    GameUtil.G_UseTargets(self, other)
                    self.target = savetarget
                }

                other.movetarget = GameBase.G_PickTarget(self.target)

                if (other.goalentity == null)
                    other.goalentity = other.movetarget

                if (null == other.movetarget && null == other.enemy) {
                    other.monsterinfo.pausetime = GameBase.level.time + 100000000
                    other.monsterinfo.stand.think(other)
                } else if (other.movetarget == other.goalentity) {
                    Math3D.VectorSubtract(other.movetarget.s.origin, other.s.origin, v)
                    other.ideal_yaw = Math3D.vectoyaw(v)
                }
            }
        }

        fun actorMachineGun(self: edict_t) {
            val start = floatArray(0.0, 0.0, 0.0)
            val target = floatArray(0.0, 0.0, 0.0)

            val forward = floatArray(0.0, 0.0, 0.0)
            val right = floatArray(0.0, 0.0, 0.0)

            Math3D.AngleVectors(self.s.angles, forward, right, null)

            Math3D.G_ProjectSource(self.s.origin, M_Flash.monster_flash_offset[Defines.MZ2_ACTOR_MACHINEGUN_1], forward, right, start)

            if (self.enemy != null) {
                if (self.enemy.health > 0) {
                    Math3D.VectorMA(self.enemy.s.origin, -0.2.toFloat(), self.enemy.velocity, target)
                    target[2] += self.enemy.viewheight
                } else {
                    Math3D.VectorCopy(self.enemy.absmin, target)
                    target[2] += (self.enemy.size[2] / 2)
                }
                Math3D.VectorSubtract(target, start, forward)
                Math3D.VectorNormalize(forward)
            } else {
                Math3D.AngleVectors(self.s.angles, forward, null, null)
            }
            Monster.monster_fire_bullet(self, start, forward, 3, 4, Defines.DEFAULT_BULLET_HSPREAD, Defines.DEFAULT_BULLET_VSPREAD, Defines.MZ2_ACTOR_MACHINEGUN_1)
        }

        /**
         * QUAKED misc_actor (1 .5 0) (-16 -16 -24) (16 16 32)
         */

        public fun SP_misc_actor(self: edict_t) {
            if (GameBase.deathmatch.value != 0) {
                GameUtil.G_FreeEdict(self)
                return
            }

            if (self.targetname != null) {
                GameBase.gi.dprintf("untargeted " + self.classname + " at " + Lib.vtos(self.s.origin) + "\n")
                GameUtil.G_FreeEdict(self)
                return
            }

            if (self.target != null) {
                GameBase.gi.dprintf(self.classname + " with no target at " + Lib.vtos(self.s.origin) + "\n")
                GameUtil.G_FreeEdict(self)
                return
            }

            self.movetype = Defines.MOVETYPE_STEP
            self.solid = Defines.SOLID_BBOX
            self.s.modelindex = GameBase.gi.modelindex("players/male/tris.md2")
            Math3D.VectorSet(self.mins, -16, -16, -24)
            Math3D.VectorSet(self.maxs, 16, 16, 32)

            if (0 == self.health)
                self.health = 100
            self.mass = 200

            self.pain = actor_pain
            self.die = actor_die

            self.monsterinfo.stand = actor_stand
            self.monsterinfo.walk = actor_walk
            self.monsterinfo.run = actor_run
            self.monsterinfo.attack = actor_attack
            self.monsterinfo.melee = null
            self.monsterinfo.sight = null

            self.monsterinfo.aiflags = self.monsterinfo.aiflags or Defines.AI_GOOD_GUY

            GameBase.gi.linkentity(self)

            self.monsterinfo.currentmove = actor_move_stand
            self.monsterinfo.scale = MODEL_SCALE

            GameAI.walkmonster_start.think(self)

            // actors always start in a dormant state, they *must* be used to get
            // going
            self.use = actor_use
        }

        public fun SP_target_actor(self: edict_t) {
            if (self.targetname != null)
                GameBase.gi.dprintf(self.classname + " with no targetname at " + Lib.vtos(self.s.origin) + " \n")

            self.solid = Defines.SOLID_TRIGGER
            self.touch = target_actor_touch
            Math3D.VectorSet(self.mins, -8, -8, -8)
            Math3D.VectorSet(self.maxs, 8, 8, 8)
            self.svflags = Defines.SVF_NOCLIENT

            if ((self.spawnflags and 1) != 0) {
                if (0 == self.speed)
                    self.speed = 200
                if (0 == GameBase.st.height)
                    GameBase.st.height = 200
                if (self.s.angles[Defines.YAW] == 0)
                    self.s.angles[Defines.YAW] = 360
                GameBase.G_SetMovedir(self.s.angles, self.movedir)
                self.movedir[2] = GameBase.st.height
            }

            GameBase.gi.linkentity(self)
        }
    }
}