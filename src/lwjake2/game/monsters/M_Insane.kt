/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package lwjake2.game.monsters

import lwjake2.Defines
import lwjake2.game.EntDieAdapter
import lwjake2.game.EntPainAdapter
import lwjake2.game.EntThinkAdapter
import lwjake2.game.GameAI
import lwjake2.game.GameBase
import lwjake2.game.GameMisc
import lwjake2.game.GameUtil
import lwjake2.game.edict_t
import lwjake2.game.mframe_t
import lwjake2.game.mmove_t
import lwjake2.util.Lib
import lwjake2.util.Math3D

public class M_Insane {
    companion object {
        //	This file generated by ModelGen - Do NOT Modify

        public val FRAME_stand1: Int = 0

        public val FRAME_stand2: Int = 1

        public val FRAME_stand3: Int = 2

        public val FRAME_stand4: Int = 3

        public val FRAME_stand5: Int = 4

        public val FRAME_stand6: Int = 5

        public val FRAME_stand7: Int = 6

        public val FRAME_stand8: Int = 7

        public val FRAME_stand9: Int = 8

        public val FRAME_stand10: Int = 9

        public val FRAME_stand11: Int = 10

        public val FRAME_stand12: Int = 11

        public val FRAME_stand13: Int = 12

        public val FRAME_stand14: Int = 13

        public val FRAME_stand15: Int = 14

        public val FRAME_stand16: Int = 15

        public val FRAME_stand17: Int = 16

        public val FRAME_stand18: Int = 17

        public val FRAME_stand19: Int = 18

        public val FRAME_stand20: Int = 19

        public val FRAME_stand21: Int = 20

        public val FRAME_stand22: Int = 21

        public val FRAME_stand23: Int = 22

        public val FRAME_stand24: Int = 23

        public val FRAME_stand25: Int = 24

        public val FRAME_stand26: Int = 25

        public val FRAME_stand27: Int = 26

        public val FRAME_stand28: Int = 27

        public val FRAME_stand29: Int = 28

        public val FRAME_stand30: Int = 29

        public val FRAME_stand31: Int = 30

        public val FRAME_stand32: Int = 31

        public val FRAME_stand33: Int = 32

        public val FRAME_stand34: Int = 33

        public val FRAME_stand35: Int = 34

        public val FRAME_stand36: Int = 35

        public val FRAME_stand37: Int = 36

        public val FRAME_stand38: Int = 37

        public val FRAME_stand39: Int = 38

        public val FRAME_stand40: Int = 39

        public val FRAME_stand41: Int = 40

        public val FRAME_stand42: Int = 41

        public val FRAME_stand43: Int = 42

        public val FRAME_stand44: Int = 43

        public val FRAME_stand45: Int = 44

        public val FRAME_stand46: Int = 45

        public val FRAME_stand47: Int = 46

        public val FRAME_stand48: Int = 47

        public val FRAME_stand49: Int = 48

        public val FRAME_stand50: Int = 49

        public val FRAME_stand51: Int = 50

        public val FRAME_stand52: Int = 51

        public val FRAME_stand53: Int = 52

        public val FRAME_stand54: Int = 53

        public val FRAME_stand55: Int = 54

        public val FRAME_stand56: Int = 55

        public val FRAME_stand57: Int = 56

        public val FRAME_stand58: Int = 57

        public val FRAME_stand59: Int = 58

        public val FRAME_stand60: Int = 59

        public val FRAME_stand61: Int = 60

        public val FRAME_stand62: Int = 61

        public val FRAME_stand63: Int = 62

        public val FRAME_stand64: Int = 63

        public val FRAME_stand65: Int = 64

        public val FRAME_stand66: Int = 65

        public val FRAME_stand67: Int = 66

        public val FRAME_stand68: Int = 67

        public val FRAME_stand69: Int = 68

        public val FRAME_stand70: Int = 69

        public val FRAME_stand71: Int = 70

        public val FRAME_stand72: Int = 71

        public val FRAME_stand73: Int = 72

        public val FRAME_stand74: Int = 73

        public val FRAME_stand75: Int = 74

        public val FRAME_stand76: Int = 75

        public val FRAME_stand77: Int = 76

        public val FRAME_stand78: Int = 77

        public val FRAME_stand79: Int = 78

        public val FRAME_stand80: Int = 79

        public val FRAME_stand81: Int = 80

        public val FRAME_stand82: Int = 81

        public val FRAME_stand83: Int = 82

        public val FRAME_stand84: Int = 83

        public val FRAME_stand85: Int = 84

        public val FRAME_stand86: Int = 85

        public val FRAME_stand87: Int = 86

        public val FRAME_stand88: Int = 87

        public val FRAME_stand89: Int = 88

        public val FRAME_stand90: Int = 89

        public val FRAME_stand91: Int = 90

        public val FRAME_stand92: Int = 91

        public val FRAME_stand93: Int = 92

        public val FRAME_stand94: Int = 93

        public val FRAME_stand95: Int = 94

        public val FRAME_stand96: Int = 95

        public val FRAME_stand97: Int = 96

        public val FRAME_stand98: Int = 97

        public val FRAME_stand99: Int = 98

        public val FRAME_stand100: Int = 99

        public val FRAME_stand101: Int = 100

        public val FRAME_stand102: Int = 101

        public val FRAME_stand103: Int = 102

        public val FRAME_stand104: Int = 103

        public val FRAME_stand105: Int = 104

        public val FRAME_stand106: Int = 105

        public val FRAME_stand107: Int = 106

        public val FRAME_stand108: Int = 107

        public val FRAME_stand109: Int = 108

        public val FRAME_stand110: Int = 109

        public val FRAME_stand111: Int = 110

        public val FRAME_stand112: Int = 111

        public val FRAME_stand113: Int = 112

        public val FRAME_stand114: Int = 113

        public val FRAME_stand115: Int = 114

        public val FRAME_stand116: Int = 115

        public val FRAME_stand117: Int = 116

        public val FRAME_stand118: Int = 117

        public val FRAME_stand119: Int = 118

        public val FRAME_stand120: Int = 119

        public val FRAME_stand121: Int = 120

        public val FRAME_stand122: Int = 121

        public val FRAME_stand123: Int = 122

        public val FRAME_stand124: Int = 123

        public val FRAME_stand125: Int = 124

        public val FRAME_stand126: Int = 125

        public val FRAME_stand127: Int = 126

        public val FRAME_stand128: Int = 127

        public val FRAME_stand129: Int = 128

        public val FRAME_stand130: Int = 129

        public val FRAME_stand131: Int = 130

        public val FRAME_stand132: Int = 131

        public val FRAME_stand133: Int = 132

        public val FRAME_stand134: Int = 133

        public val FRAME_stand135: Int = 134

        public val FRAME_stand136: Int = 135

        public val FRAME_stand137: Int = 136

        public val FRAME_stand138: Int = 137

        public val FRAME_stand139: Int = 138

        public val FRAME_stand140: Int = 139

        public val FRAME_stand141: Int = 140

        public val FRAME_stand142: Int = 141

        public val FRAME_stand143: Int = 142

        public val FRAME_stand144: Int = 143

        public val FRAME_stand145: Int = 144

        public val FRAME_stand146: Int = 145

        public val FRAME_stand147: Int = 146

        public val FRAME_stand148: Int = 147

        public val FRAME_stand149: Int = 148

        public val FRAME_stand150: Int = 149

        public val FRAME_stand151: Int = 150

        public val FRAME_stand152: Int = 151

        public val FRAME_stand153: Int = 152

        public val FRAME_stand154: Int = 153

        public val FRAME_stand155: Int = 154

        public val FRAME_stand156: Int = 155

        public val FRAME_stand157: Int = 156

        public val FRAME_stand158: Int = 157

        public val FRAME_stand159: Int = 158

        public val FRAME_stand160: Int = 159

        public val FRAME_walk27: Int = 160

        public val FRAME_walk28: Int = 161

        public val FRAME_walk29: Int = 162

        public val FRAME_walk30: Int = 163

        public val FRAME_walk31: Int = 164

        public val FRAME_walk32: Int = 165

        public val FRAME_walk33: Int = 166

        public val FRAME_walk34: Int = 167

        public val FRAME_walk35: Int = 168

        public val FRAME_walk36: Int = 169

        public val FRAME_walk37: Int = 170

        public val FRAME_walk38: Int = 171

        public val FRAME_walk39: Int = 172

        public val FRAME_walk1: Int = 173

        public val FRAME_walk2: Int = 174

        public val FRAME_walk3: Int = 175

        public val FRAME_walk4: Int = 176

        public val FRAME_walk5: Int = 177

        public val FRAME_walk6: Int = 178

        public val FRAME_walk7: Int = 179

        public val FRAME_walk8: Int = 180

        public val FRAME_walk9: Int = 181

        public val FRAME_walk10: Int = 182

        public val FRAME_walk11: Int = 183

        public val FRAME_walk12: Int = 184

        public val FRAME_walk13: Int = 185

        public val FRAME_walk14: Int = 186

        public val FRAME_walk15: Int = 187

        public val FRAME_walk16: Int = 188

        public val FRAME_walk17: Int = 189

        public val FRAME_walk18: Int = 190

        public val FRAME_walk19: Int = 191

        public val FRAME_walk20: Int = 192

        public val FRAME_walk21: Int = 193

        public val FRAME_walk22: Int = 194

        public val FRAME_walk23: Int = 195

        public val FRAME_walk24: Int = 196

        public val FRAME_walk25: Int = 197

        public val FRAME_walk26: Int = 198

        public val FRAME_st_pain2: Int = 199

        public val FRAME_st_pain3: Int = 200

        public val FRAME_st_pain4: Int = 201

        public val FRAME_st_pain5: Int = 202

        public val FRAME_st_pain6: Int = 203

        public val FRAME_st_pain7: Int = 204

        public val FRAME_st_pain8: Int = 205

        public val FRAME_st_pain9: Int = 206

        public val FRAME_st_pain10: Int = 207

        public val FRAME_st_pain11: Int = 208

        public val FRAME_st_pain12: Int = 209

        public val FRAME_st_death2: Int = 210

        public val FRAME_st_death3: Int = 211

        public val FRAME_st_death4: Int = 212

        public val FRAME_st_death5: Int = 213

        public val FRAME_st_death6: Int = 214

        public val FRAME_st_death7: Int = 215

        public val FRAME_st_death8: Int = 216

        public val FRAME_st_death9: Int = 217

        public val FRAME_st_death10: Int = 218

        public val FRAME_st_death11: Int = 219

        public val FRAME_st_death12: Int = 220

        public val FRAME_st_death13: Int = 221

        public val FRAME_st_death14: Int = 222

        public val FRAME_st_death15: Int = 223

        public val FRAME_st_death16: Int = 224

        public val FRAME_st_death17: Int = 225

        public val FRAME_st_death18: Int = 226

        public val FRAME_crawl1: Int = 227

        public val FRAME_crawl2: Int = 228

        public val FRAME_crawl3: Int = 229

        public val FRAME_crawl4: Int = 230

        public val FRAME_crawl5: Int = 231

        public val FRAME_crawl6: Int = 232

        public val FRAME_crawl7: Int = 233

        public val FRAME_crawl8: Int = 234

        public val FRAME_crawl9: Int = 235

        public val FRAME_cr_pain2: Int = 236

        public val FRAME_cr_pain3: Int = 237

        public val FRAME_cr_pain4: Int = 238

        public val FRAME_cr_pain5: Int = 239

        public val FRAME_cr_pain6: Int = 240

        public val FRAME_cr_pain7: Int = 241

        public val FRAME_cr_pain8: Int = 242

        public val FRAME_cr_pain9: Int = 243

        public val FRAME_cr_pain10: Int = 244

        public val FRAME_cr_death10: Int = 245

        public val FRAME_cr_death11: Int = 246

        public val FRAME_cr_death12: Int = 247

        public val FRAME_cr_death13: Int = 248

        public val FRAME_cr_death14: Int = 249

        public val FRAME_cr_death15: Int = 250

        public val FRAME_cr_death16: Int = 251

        public val FRAME_cross1: Int = 252

        public val FRAME_cross2: Int = 253

        public val FRAME_cross3: Int = 254

        public val FRAME_cross4: Int = 255

        public val FRAME_cross5: Int = 256

        public val FRAME_cross6: Int = 257

        public val FRAME_cross7: Int = 258

        public val FRAME_cross8: Int = 259

        public val FRAME_cross9: Int = 260

        public val FRAME_cross10: Int = 261

        public val FRAME_cross11: Int = 262

        public val FRAME_cross12: Int = 263

        public val FRAME_cross13: Int = 264

        public val FRAME_cross14: Int = 265

        public val FRAME_cross15: Int = 266

        public val FRAME_cross16: Int = 267

        public val FRAME_cross17: Int = 268

        public val FRAME_cross18: Int = 269

        public val FRAME_cross19: Int = 270

        public val FRAME_cross20: Int = 271

        public val FRAME_cross21: Int = 272

        public val FRAME_cross22: Int = 273

        public val FRAME_cross23: Int = 274

        public val FRAME_cross24: Int = 275

        public val FRAME_cross25: Int = 276

        public val FRAME_cross26: Int = 277

        public val FRAME_cross27: Int = 278

        public val FRAME_cross28: Int = 279

        public val FRAME_cross29: Int = 280

        public val FRAME_cross30: Int = 281

        public val MODEL_SCALE: Float = 1.000000.toFloat()

        var sound_fist: Int = 0

        var sound_shake: Int = 0

        var sound_moan: Int = 0

        var sound_scream = intArray(0, 0, 0, 0, 0, 0, 0, 0)

        var insane_fist: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "insane_fist"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_fist, 1, Defines.ATTN_IDLE, 0)
                return true
            }
        }

        var insane_shake: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "insane_shake"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_shake, 1, Defines.ATTN_IDLE, 0)
                return true
            }
        }

        var insane_moan: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "insane_moan"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_moan, 1, Defines.ATTN_IDLE, 0)
                return true
            }
        }

        var insane_scream: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "insane_scream"
            }

            public fun think(self: edict_t): Boolean {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_scream[Lib.rand() % 8], 1, Defines.ATTN_IDLE, 0)
                return true
            }
        }

        var insane_cross: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "insane_cross"
            }

            public fun think(self: edict_t): Boolean {
                if (Lib.random() < 0.8)
                    self.monsterinfo.currentmove = insane_move_cross
                else
                    self.monsterinfo.currentmove = insane_move_struggle_cross
                return true
            }
        }

        var insane_walk: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "insane_walk"
            }

            public fun think(self: edict_t): Boolean {
                if ((self.spawnflags and 16) != 0)
                // Hold Ground?
                    if (self.s.frame == FRAME_cr_pain10) {
                        self.monsterinfo.currentmove = insane_move_down
                        return true
                    }
                if ((self.spawnflags and 4) != 0)
                    self.monsterinfo.currentmove = insane_move_crawl
                else if (Lib.random() <= 0.5)
                    self.monsterinfo.currentmove = insane_move_walk_normal
                else
                    self.monsterinfo.currentmove = insane_move_walk_insane
                return true
            }
        }

        var insane_run: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "insane_run"
            }

            public fun think(self: edict_t): Boolean {
                if ((self.spawnflags and 16) != 0)
                // Hold Ground?
                    if (self.s.frame == FRAME_cr_pain10) {
                        self.monsterinfo.currentmove = insane_move_down
                        return true
                    }
                if ((self.spawnflags and 4) != 0)
                // Crawling?
                    self.monsterinfo.currentmove = insane_move_runcrawl
                else if (Lib.random() <= 0.5)
                // Else, mix it up
                    self.monsterinfo.currentmove = insane_move_run_normal
                else
                    self.monsterinfo.currentmove = insane_move_run_insane
                return true
            }
        }

        var insane_pain: EntPainAdapter = object : EntPainAdapter() {
            public fun getID(): String {
                return "insane_pain"
            }

            public fun pain(self: edict_t, other: edict_t, kick: Float, damage: Int) {
                val l: Int
                val r: Int

                //	 if (self.health < (self.max_health / 2))
                //		 self.s.skinnum = 1;

                if (GameBase.level.time < self.pain_debounce_time)
                    return

                self.pain_debounce_time = GameBase.level.time + 3

                r = 1 + (Lib.rand() and 1)
                if (self.health < 25)
                    l = 25
                else if (self.health < 50)
                    l = 50
                else if (self.health < 75)
                    l = 75
                else
                    l = 100
                GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("player/male/pain" + l + "_" + r + ".wav"), 1, Defines.ATTN_IDLE, 0)

                if (GameBase.skill.value == 3)
                    return  // no pain anims in nightmare

                // Don't go into pain frames if crucified.
                if ((self.spawnflags and 8) != 0) {
                    self.monsterinfo.currentmove = insane_move_struggle_cross
                    return
                }

                if (((self.s.frame >= FRAME_crawl1) && (self.s.frame <= FRAME_crawl9)) || ((self.s.frame >= FRAME_stand99) && (self.s.frame <= FRAME_stand160))) {
                    self.monsterinfo.currentmove = insane_move_crawl_pain
                } else
                    self.monsterinfo.currentmove = insane_move_stand_pain
            }
        }

        var insane_onground: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "insane_onground"
            }

            public fun think(self: edict_t): Boolean {
                self.monsterinfo.currentmove = insane_move_down
                return true
            }
        }

        var insane_checkdown: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "insane_checkdown"
            }

            public fun think(self: edict_t): Boolean {
                //			if ( (self.s.frame == FRAME_stand94) || (self.s.frame ==
                // FRAME_stand65) )
                if ((self.spawnflags and 32) != 0)
                // Always stand
                    return true
                if (Lib.random() < 0.3)
                    if (Lib.random() < 0.5)
                        self.monsterinfo.currentmove = insane_move_uptodown
                    else
                        self.monsterinfo.currentmove = insane_move_jumpdown
                return true
            }
        }

        var insane_checkup: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "insane_checkup"
            }

            public fun think(self: edict_t): Boolean {
                //			If Hold_Ground and Crawl are set
                if ((self.spawnflags and 4) != 0 && (self.spawnflags and 16) != 0)
                    return true
                if (Lib.random() < 0.5)
                    self.monsterinfo.currentmove = insane_move_downtoup
                return true
            }
        }

        var insane_stand: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "insane_stand"
            }

            public fun think(self: edict_t): Boolean {
                if ((self.spawnflags and 8) != 0)
                // If crucified
                {
                    self.monsterinfo.currentmove = insane_move_cross
                    self.monsterinfo.aiflags = self.monsterinfo.aiflags or Defines.AI_STAND_GROUND
                } else if ((self.spawnflags and 4) != 0 && (self.spawnflags and 16) != 0)
                    self.monsterinfo.currentmove = insane_move_down
                else if (Lib.random() < 0.5)
                    self.monsterinfo.currentmove = insane_move_stand_normal
                else
                    self.monsterinfo.currentmove = insane_move_stand_insane// If Hold_Ground and Crawl are set
                return true
            }
        }

        var insane_dead: EntThinkAdapter = object : EntThinkAdapter() {
            public fun getID(): String {
                return "insane_dead"
            }

            public fun think(self: edict_t): Boolean {
                if ((self.spawnflags and 8) != 0) {
                    self.flags = self.flags or Defines.FL_FLY
                } else {
                    Math3D.VectorSet(self.mins, -16, -16, -24)
                    Math3D.VectorSet(self.maxs, 16, 16, -8)
                    self.movetype = Defines.MOVETYPE_TOSS
                }
                self.svflags = self.svflags or Defines.SVF_DEADMONSTER
                self.nextthink = 0
                GameBase.gi.linkentity(self)
                return true
            }
        }

        var insane_die: EntDieAdapter = object : EntDieAdapter() {
            public fun getID(): String {
                return "insane_die"
            }

            public fun die(self: edict_t, inflictor: edict_t, attacker: edict_t, damage: Int, point: FloatArray) {
                var n: Int

                if (self.health <= self.gib_health) {
                    GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("misc/udeath.wav"), 1, Defines.ATTN_IDLE, 0)
                    run {
                        n = 0
                        while (n < 2) {
                            GameMisc.ThrowGib(self, "models/objects/gibs/bone/tris.md2", damage, Defines.GIB_ORGANIC)
                            n++
                        }
                    }
                    run {
                        n = 0
                        while (n < 4) {
                            GameMisc.ThrowGib(self, "models/objects/gibs/sm_meat/tris.md2", damage, Defines.GIB_ORGANIC)
                            n++
                        }
                    }
                    GameMisc.ThrowHead(self, "models/objects/gibs/head2/tris.md2", damage, Defines.GIB_ORGANIC)
                    self.deadflag = Defines.DEAD_DEAD
                    return
                }

                if (self.deadflag == Defines.DEAD_DEAD)
                    return

                GameBase.gi.sound(self, Defines.CHAN_VOICE, GameBase.gi.soundindex("player/male/death" + ((Lib.rand() % 4) + 1) + ".wav"), 1, Defines.ATTN_IDLE, 0)

                self.deadflag = Defines.DEAD_DEAD
                self.takedamage = Defines.DAMAGE_YES

                if ((self.spawnflags and 8) != 0) {
                    insane_dead.think(self)
                } else {
                    if (((self.s.frame >= FRAME_crawl1) && (self.s.frame <= FRAME_crawl9)) || ((self.s.frame >= FRAME_stand99) && (self.s.frame <= FRAME_stand160)))
                        self.monsterinfo.currentmove = insane_move_crawl_death
                    else
                        self.monsterinfo.currentmove = insane_move_stand_death
                }
            }

        }

        var insane_frames_stand_normal = array<mframe_t>(mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, insane_checkdown))

        var insane_move_stand_normal = mmove_t(FRAME_stand60, FRAME_stand65, insane_frames_stand_normal, insane_stand)

        var insane_frames_stand_insane = array<mframe_t>(mframe_t(GameAI.ai_stand, 0, insane_shake), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, null), mframe_t(GameAI.ai_stand, 0, insane_checkdown))

        var insane_move_stand_insane = mmove_t(FRAME_stand65, FRAME_stand94, insane_frames_stand_insane, insane_stand)

        var insane_frames_uptodown = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, insane_moan), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 2.7.toFloat(), null), mframe_t(GameAI.ai_move, 4.1.toFloat(), null), mframe_t(GameAI.ai_move, 6.toFloat(), null), mframe_t(GameAI.ai_move, 7.6.toFloat(), null), mframe_t(GameAI.ai_move, 3.6.toFloat(), null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, insane_fist), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, insane_fist), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var insane_move_uptodown = mmove_t(FRAME_stand1, FRAME_stand40, insane_frames_uptodown, insane_onground)

        var insane_frames_downtoup = array<mframe_t>(mframe_t(GameAI.ai_move, -0.7.toFloat(), null), // 41
                mframe_t(GameAI.ai_move, -1.2.toFloat(), null), // 42
                mframe_t(GameAI.ai_move, -1.5.toFloat(), null), // 43
                mframe_t(GameAI.ai_move, -4.5.toFloat(), null), // 44
                mframe_t(GameAI.ai_move, -3.5.toFloat(), null), // 45
                mframe_t(GameAI.ai_move, -0.2.toFloat(), null), // 46
                mframe_t(GameAI.ai_move, 0, null), // 47
                mframe_t(GameAI.ai_move, -1.3.toFloat(), null), // 48
                mframe_t(GameAI.ai_move, -3, null), // 49
                mframe_t(GameAI.ai_move, -2, null), // 50
                mframe_t(GameAI.ai_move, 0, null), // 51
                mframe_t(GameAI.ai_move, 0, null), // 52
                mframe_t(GameAI.ai_move, 0, null), // 53
                mframe_t(GameAI.ai_move, -3.3.toFloat(), null), // 54
                mframe_t(GameAI.ai_move, -1.6.toFloat(), null), // 55
                mframe_t(GameAI.ai_move, -0.3.toFloat(), null), // 56
                mframe_t(GameAI.ai_move, 0, null), // 57
                mframe_t(GameAI.ai_move, 0, null), // 58
                mframe_t(GameAI.ai_move, 0, null) // 59
        )

        var insane_move_downtoup = mmove_t(FRAME_stand41, FRAME_stand59, insane_frames_downtoup, insane_stand)

        var insane_frames_jumpdown = array<mframe_t>(mframe_t(GameAI.ai_move, 0.2.toFloat(), null), mframe_t(GameAI.ai_move, 11.5.toFloat(), null), mframe_t(GameAI.ai_move, 5.1.toFloat(), null), mframe_t(GameAI.ai_move, 7.1.toFloat(), null), mframe_t(GameAI.ai_move, 0, null))

        var insane_move_jumpdown = mmove_t(FRAME_stand96, FRAME_stand100, insane_frames_jumpdown, insane_onground)

        var insane_frames_down = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), // 100)
                mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), // 110)
                mframe_t(GameAI.ai_move, -1.7.toFloat(), null), mframe_t(GameAI.ai_move, -1.6.toFloat(), null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, insane_fist), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), // 120)
                mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), // 130
                mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, insane_moan), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), // 140
                mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), // 150
                mframe_t(GameAI.ai_move, 0.5.toFloat(), null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, -0.2.toFloat(), insane_scream), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0.2.toFloat(), null), mframe_t(GameAI.ai_move, 0.4.toFloat(), null), mframe_t(GameAI.ai_move, 0.6.toFloat(), null), mframe_t(GameAI.ai_move, 0.8.toFloat(), null), mframe_t(GameAI.ai_move, 0.7.toFloat(), null), mframe_t(GameAI.ai_move, 0, insane_checkup) // 160
        )

        var insane_move_down = mmove_t(FRAME_stand100, FRAME_stand160, insane_frames_down, insane_onground)

        var insane_frames_walk_normal = array<mframe_t>(mframe_t(GameAI.ai_walk, 0, insane_scream), mframe_t(GameAI.ai_walk, 2.5.toFloat(), null), mframe_t(GameAI.ai_walk, 3.5.toFloat(), null), mframe_t(GameAI.ai_walk, 1.7.toFloat(), null), mframe_t(GameAI.ai_walk, 2.3.toFloat(), null), mframe_t(GameAI.ai_walk, 2.4.toFloat(), null), mframe_t(GameAI.ai_walk, 2.2.toFloat(), null), mframe_t(GameAI.ai_walk, 4.2.toFloat(), null), mframe_t(GameAI.ai_walk, 5.6.toFloat(), null), mframe_t(GameAI.ai_walk, 3.3.toFloat(), null), mframe_t(GameAI.ai_walk, 2.4.toFloat(), null), mframe_t(GameAI.ai_walk, 0.9.toFloat(), null), mframe_t(GameAI.ai_walk, 0, null))

        var insane_move_walk_normal = mmove_t(FRAME_walk27, FRAME_walk39, insane_frames_walk_normal, insane_walk)

        var insane_move_run_normal = mmove_t(FRAME_walk27, FRAME_walk39, insane_frames_walk_normal, insane_run)

        var insane_frames_walk_insane = array<mframe_t>(mframe_t(GameAI.ai_walk, 0, insane_scream), // walk 1
                mframe_t(GameAI.ai_walk, 3.4.toFloat(), null), // walk 2
                mframe_t(GameAI.ai_walk, 3.6.toFloat(), null), // 3
                mframe_t(GameAI.ai_walk, 2.9.toFloat(), null), // 4
                mframe_t(GameAI.ai_walk, 2.2.toFloat(), null), // 5
                mframe_t(GameAI.ai_walk, 2.6.toFloat(), null), // 6
                mframe_t(GameAI.ai_walk, 0, null), // 7
                mframe_t(GameAI.ai_walk, 0.7.toFloat(), null), // 8
                mframe_t(GameAI.ai_walk, 4.8.toFloat(), null), // 9
                mframe_t(GameAI.ai_walk, 5.3.toFloat(), null), // 10
                mframe_t(GameAI.ai_walk, 1.1.toFloat(), null), // 11
                mframe_t(GameAI.ai_walk, 2, null), // 12
                mframe_t(GameAI.ai_walk, 0.5.toFloat(), null), // 13
                mframe_t(GameAI.ai_walk, 0, null), // 14
                mframe_t(GameAI.ai_walk, 0, null), // 15
                mframe_t(GameAI.ai_walk, 4.9.toFloat(), null), // 16
                mframe_t(GameAI.ai_walk, 6.7.toFloat(), null), // 17
                mframe_t(GameAI.ai_walk, 3.8.toFloat(), null), // 18
                mframe_t(GameAI.ai_walk, 2, null), // 19
                mframe_t(GameAI.ai_walk, 0.2.toFloat(), null), // 20
                mframe_t(GameAI.ai_walk, 0, null), // 21
                mframe_t(GameAI.ai_walk, 3.4.toFloat(), null), // 22
                mframe_t(GameAI.ai_walk, 6.4.toFloat(), null), // 23
                mframe_t(GameAI.ai_walk, 5, null), // 24
                mframe_t(GameAI.ai_walk, 1.8.toFloat(), null), // 25
                mframe_t(GameAI.ai_walk, 0, null) // 26
        )

        var insane_move_walk_insane = mmove_t(FRAME_walk1, FRAME_walk26, insane_frames_walk_insane, insane_walk)

        var insane_move_run_insane = mmove_t(FRAME_walk1, FRAME_walk26, insane_frames_walk_insane, insane_run)

        var insane_frames_stand_pain = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var insane_move_stand_pain = mmove_t(FRAME_st_pain2, FRAME_st_pain12, insane_frames_stand_pain, insane_run)

        var insane_frames_stand_death = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var insane_move_stand_death = mmove_t(FRAME_st_death2, FRAME_st_death18, insane_frames_stand_death, insane_dead)

        var insane_frames_crawl = array<mframe_t>(mframe_t(GameAI.ai_walk, 0, insane_scream), mframe_t(GameAI.ai_walk, 1.5.toFloat(), null), mframe_t(GameAI.ai_walk, 2.1.toFloat(), null), mframe_t(GameAI.ai_walk, 3.6.toFloat(), null), mframe_t(GameAI.ai_walk, 2.toFloat(), null), mframe_t(GameAI.ai_walk, 0.9.toFloat(), null), mframe_t(GameAI.ai_walk, 3.toFloat(), null), mframe_t(GameAI.ai_walk, 3.4.toFloat(), null), mframe_t(GameAI.ai_walk, 2.4.toFloat(), null))

        var insane_move_crawl = mmove_t(FRAME_crawl1, FRAME_crawl9, insane_frames_crawl, null)

        var insane_move_runcrawl = mmove_t(FRAME_crawl1, FRAME_crawl9, insane_frames_crawl, null)

        var insane_frames_crawl_pain = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var insane_move_crawl_pain = mmove_t(FRAME_cr_pain2, FRAME_cr_pain10, insane_frames_crawl_pain, insane_run)

        var insane_frames_crawl_death = array<mframe_t>(mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var insane_move_crawl_death = mmove_t(FRAME_cr_death10, FRAME_cr_death16, insane_frames_crawl_death, insane_dead)

        var insane_frames_cross = array<mframe_t>(mframe_t(GameAI.ai_move, 0, insane_moan), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var insane_move_cross = mmove_t(FRAME_cross1, FRAME_cross15, insane_frames_cross, insane_cross)

        var insane_frames_struggle_cross = array<mframe_t>(mframe_t(GameAI.ai_move, 0, insane_scream), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null), mframe_t(GameAI.ai_move, 0, null))

        var insane_move_struggle_cross = mmove_t(FRAME_cross16, FRAME_cross30, insane_frames_struggle_cross, insane_cross)

        /*
     * QUAKED misc_insane (1 .5 0) (-16 -16 -24) (16 16 32) Ambush Trigger_Spawn
     * CRAWL CRUCIFIED STAND_GROUND ALWAYS_STAND
     */
        public fun SP_misc_insane(self: edict_t) {
            //	 static int skin = 0; //@@

            if (GameBase.deathmatch.value != 0) {
                GameUtil.G_FreeEdict(self)
                return
            }

            sound_fist = GameBase.gi.soundindex("insane/insane11.wav")
            sound_shake = GameBase.gi.soundindex("insane/insane5.wav")
            sound_moan = GameBase.gi.soundindex("insane/insane7.wav")
            sound_scream[0] = GameBase.gi.soundindex("insane/insane1.wav")
            sound_scream[1] = GameBase.gi.soundindex("insane/insane2.wav")
            sound_scream[2] = GameBase.gi.soundindex("insane/insane3.wav")
            sound_scream[3] = GameBase.gi.soundindex("insane/insane4.wav")
            sound_scream[4] = GameBase.gi.soundindex("insane/insane6.wav")
            sound_scream[5] = GameBase.gi.soundindex("insane/insane8.wav")
            sound_scream[6] = GameBase.gi.soundindex("insane/insane9.wav")
            sound_scream[7] = GameBase.gi.soundindex("insane/insane10.wav")

            self.movetype = Defines.MOVETYPE_STEP
            self.solid = Defines.SOLID_BBOX
            self.s.modelindex = GameBase.gi.modelindex("models/monsters/insane/tris.md2")

            Math3D.VectorSet(self.mins, -16, -16, -24)
            Math3D.VectorSet(self.maxs, 16, 16, 32)

            self.health = 100
            self.gib_health = -50
            self.mass = 300

            self.pain = insane_pain
            self.die = insane_die

            self.monsterinfo.stand = insane_stand
            self.monsterinfo.walk = insane_walk
            self.monsterinfo.run = insane_run
            self.monsterinfo.dodge = null
            self.monsterinfo.attack = null
            self.monsterinfo.melee = null
            self.monsterinfo.sight = null
            self.monsterinfo.aiflags = self.monsterinfo.aiflags or Defines.AI_GOOD_GUY

            // @@
            //	 self.s.skinnum = skin;
            //	 skin++;
            //	 if (skin > 12)
            //		 skin = 0;

            GameBase.gi.linkentity(self)

            if ((self.spawnflags and 16) != 0)
            // Stand Ground
                self.monsterinfo.aiflags = self.monsterinfo.aiflags or Defines.AI_STAND_GROUND

            self.monsterinfo.currentmove = insane_move_stand_normal

            self.monsterinfo.scale = MODEL_SCALE
            if ((self.spawnflags and 8) != 0)
            // Crucified ?
            {
                Math3D.VectorSet(self.mins, -16, 0, 0)
                Math3D.VectorSet(self.maxs, 16, 8, 32)
                self.flags = self.flags or Defines.FL_NO_KNOCKBACK
                GameAI.flymonster_start.think(self)
            } else {
                GameAI.walkmonster_start.think(self)
                self.s.skinnum = Lib.rand() % 3
            }
        }
    }
}