/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package lwjake2.client

import lwjake2.Defines
import lwjake2.game.cmodel_t
import lwjake2.game.usercmd_t
import lwjake2.render.image_t
import lwjake2.render.model_t
import lwjake2.sound.sfx_t

import java.nio.ByteBuffer

public class client_state_t {

    {
        for (n in 0..Defines.CMD_BACKUP - 1)
            cmds[n] = usercmd_t()
        for (i in frames.indices) {
            frames[i] = frame_t()
        }

        for (n in 0..Defines.MAX_CONFIGSTRINGS - 1)
            configstrings[n] = String()

        for (n in 0..Defines.MAX_CLIENTS - 1)
            clientinfo[n] = clientinfo_t()
    }

    //
    //	   the client_state_t structure is wiped completely at every
    //	   server map change
    //
    var timeoutcount: Int = 0

    var timedemo_frames: Int = 0
    var timedemo_start: Int = 0

    public var refresh_prepped: Boolean = false // false if on new level or new ref dll
    public var sound_prepped: Boolean = false // ambient sounds can start
    var force_refdef: Boolean = false // vid has changed, so we can't use a paused refdef

    var parse_entities: Int = 0 // index (not anded off) into cl_parse_entities[]

    var cmd = usercmd_t()
    var cmds = arrayOfNulls<usercmd_t>(Defines.CMD_BACKUP) // each mesage will send several old cmds

    var cmd_time = IntArray(Defines.CMD_BACKUP) // time sent, for calculating pings
    var predicted_origins = Array<ShortArray>(Defines.CMD_BACKUP, { ShortArray(3) }) // for debug comparing against server

    var predicted_step: Float = 0.toFloat() // for stair up smoothing
    var predicted_step_time: Int = 0

    var predicted_origin = floatArray(0.0, 0.0, 0.0) // generated by CL_PredictMovement
    var predicted_angles = floatArray(0.0, 0.0, 0.0)
    var prediction_error = floatArray(0.0, 0.0, 0.0)

    public var frame: frame_t = frame_t() // received from server
    var surpressCount: Int = 0 // number of messages rate supressed
    var frames = arrayOfNulls<frame_t>(Defines.UPDATE_BACKUP)

    // the client maintains its own idea of view angles, which are
    // sent to the server each frame.  It is cleared to 0 upon entering each level.
    // the server sends a delta each frame which is added to the locally
    // tracked view angles to account for standing on rotating objects,
    // and teleport direction changes
    public var viewangles: FloatArray = floatArray(0.0, 0.0, 0.0)

    public var time: Int = 0 // this is the time value that the client
    // is rendering at.  always <= cls.realtime
    var lerpfrac: Float = 0.toFloat() // between oldframe and frame

    var refdef = refdef_t()

    var v_forward = floatArray(0.0, 0.0, 0.0)
    var v_right = floatArray(0.0, 0.0, 0.0)
    var v_up = floatArray(0.0, 0.0, 0.0) // set when refdef.angles is set

    //
    // transient data from server
    //

    var layout = "" // general 2D overlay
    var inventory = IntArray(Defines.MAX_ITEMS)

    //
    // non-gameserver infornamtion
    // FIXME: move this cinematic stuff into the cin_t structure
    var cinematic_file: ByteBuffer

    var cinematictime: Int = 0 // cls.realtime for first cinematic frame
    var cinematicframe: Int = 0
    var cinematicpalette = ByteArray(768)
    var cinematicpalette_active: Boolean = false

    //
    // server state information
    //
    var attractloop: Boolean = false // running the attract loop, any key will menu
    var servercount: Int = 0 // server identification for prespawns
    var gamedir = ""
    public var playernum: Int = 0

    public var configstrings: Array<String> = arrayOfNulls(Defines.MAX_CONFIGSTRINGS)

    //
    // locally derived information from server state
    //
    var model_draw = arrayOfNulls<model_t>(Defines.MAX_MODELS)
    var model_clip = arrayOfNulls<cmodel_t>(Defines.MAX_MODELS)

    public var sound_precache: Array<sfx_t> = arrayOfNulls<sfx_t>(Defines.MAX_SOUNDS)
    var image_precache = arrayOfNulls<image_t>(Defines.MAX_IMAGES)

    var clientinfo = arrayOfNulls<clientinfo_t>(Defines.MAX_CLIENTS)
    var baseclientinfo = clientinfo_t()

}
